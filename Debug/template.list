
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f48  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080023e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  2000006c  0800244c  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000158  0800244c  00020158  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008ed5  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017fe  00000000  00000000  00028f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004d0  00000000  00000000  0002a768  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0002ac38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000294e  00000000  00000000  0002b038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001995  00000000  00000000  0002d986  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f31b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001388  00000000  00000000  0002f398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800206c 	.word	0x0800206c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	0800206c 	.word	0x0800206c

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 fe28 	bl	8000de0 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <I2C1_Init>:
 */

#include "i2c.h"

void I2C1_Init(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 2;			//Enable GPIOB clock PB8(D15)=SCL,PB9(D14)=SDA.
 80001c8:	4a26      	ldr	r2, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001ca:	4b26      	ldr	r3, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001cc:	69db      	ldr	r3, [r3, #28]
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= (1<<21);	//Enable I2C1_EN clock
 80001d4:	4a23      	ldr	r2, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d6:	4b23      	ldr	r3, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001de:	6253      	str	r3, [r2, #36]	; 0x24

	//configures PB8,PB9 to I2C1_EN
	GPIOB->AFR[1] &= ~0x000000FF;	//PB8,PB9 I2C1 SCL, SDA. AFRH8 and AFRH9. clear
 80001e0:	4a21      	ldr	r2, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e2:	4b21      	ldr	r3, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;	//GPIOx_AFRL p.189,AF4=I2C1(0100 BIN) p.177
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001ee:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80001f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~0x000F0000;	//PB8 and PB9 clear
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;		//Alternate function mode PB8,PB9
 8000204:	4a18      	ldr	r2, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 0x00000300;	//output open-drain. p.184
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800021a:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~0x000F0000;	//no pull-up resistors for PB8 and PB9 p.185
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000226:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000;				//software reset I2C1 SWRST p.682
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <I2C1_Init+0xa8>)
 800022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800022e:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;			//stop reset
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800023a:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0020;				//peripheral clock 32 MHz
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <I2C1_Init+0xa8>)
 800023e:	2220      	movs	r2, #32
 8000240:	605a      	str	r2, [r3, #4]
	TPCLK1=1/32MHz=31,25ns
	tI2C_bus=1/100kHz=10us=10000ns
	tI2C_bus_div2=10000ns/2=5000ns
	CCR value=tI2C_bus_div2/TPCLK1=5000ns/31,25ns=160
	p. 692*/
	I2C1->CCR = 160;
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <I2C1_Init+0xa8>)
 8000244:	22a0      	movs	r2, #160	; 0xa0
 8000246:	61da      	str	r2, [r3, #28]

	//maximum rise time in sm mode = 1000ns. Equation 1000 ns/TPCK1
	I2C1->TRISE = 33;				//1000ns/31,25ns=32+1=33, p.693
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <I2C1_Init+0xa8>)
 800024a:	2221      	movs	r2, #33	; 0x21
 800024c:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;			//peripheral enable (I2C1)
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <I2C1_Init+0xa8>)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <I2C1_Init+0xa8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f043 0301 	orr.w	r3, r3, #1
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020400 	.word	0x40020400
 800026c:	40005400 	.word	0x40005400

08000270 <I2C1_Write>:

void I2C1_Write(uint8_t address, int n, uint8_t* data)
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;
	int i;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 800027e:	bf00      	nop
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <I2C1_Write+0xc0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0302 	and.w	r3, r3, #2
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1f9      	bne.n	8000280 <I2C1_Write+0x10>

	I2C1->CR1 &= ~0x800;			//disable POS p.682
 800028c:	4a28      	ldr	r2, [pc, #160]	; (8000330 <I2C1_Write+0xc0>)
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <I2C1_Write+0xc0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000296:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= 0x100;				//generate start p.694
 8000298:	4a25      	ldr	r2, [pc, #148]	; (8000330 <I2C1_Write+0xc0>)
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <I2C1_Write+0xc0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80002a4:	bf00      	nop
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <I2C1_Write+0xc0>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <I2C1_Write+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <I2C1_Write+0xc0>)
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80002ba:	bf00      	nop
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <I2C1_Write+0xc0>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f003 0302 	and.w	r3, r3, #2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <I2C1_Write+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <I2C1_Write+0xc0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	613b      	str	r3, [r7, #16]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80002ce:	bf00      	nop
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <I2C1_Write+0xc0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <I2C1_Write+0x60>

	//write data
	for(i=0;i<n;i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	e00f      	b.n	8000302 <I2C1_Write+0x92>
	{
		while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80002e2:	bf00      	nop
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <I2C1_Write+0xc0>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <I2C1_Write+0x74>
		I2C1->DR=*data++;				//send command
 80002f0:	490f      	ldr	r1, [pc, #60]	; (8000330 <I2C1_Write+0xc0>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	610b      	str	r3, [r1, #16]
	for(i=0;i<n;i++)
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3301      	adds	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	697a      	ldr	r2, [r7, #20]
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	429a      	cmp	r2, r3
 8000308:	dbeb      	blt.n	80002e2 <I2C1_Write+0x72>
	}

	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
 800030a:	bf00      	nop
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <I2C1_Write+0xc0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <I2C1_Write+0x9c>
	I2C1->CR1 |= (1<<9);			//generate stop
 8000318:	4a05      	ldr	r2, [pc, #20]	; (8000330 <I2C1_Write+0xc0>)
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <I2C1_Write+0xc0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	371c      	adds	r7, #28
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40005400 	.word	0x40005400

08000334 <I2C1_Read>:
	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
	I2C1->CR1 |= (1<<9);			//generate stop
}

void I2C1_Read(uint8_t address, int n, uint8_t* data)
{
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 8000342:	bf00      	nop
 8000344:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <I2C1_Read+0x100>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f9      	bne.n	8000344 <I2C1_Read+0x10>
	I2C1->CR1 &= ~0x800;			//Acknowledge clear p.682
 8000350:	4a38      	ldr	r2, [pc, #224]	; (8000434 <I2C1_Read+0x100>)
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <I2C1_Read+0x100>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800035a:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= 0x100;				//generate start p.694
 800035c:	4a35      	ldr	r2, [pc, #212]	; (8000434 <I2C1_Read+0x100>)
 800035e:	4b35      	ldr	r3, [pc, #212]	; (8000434 <I2C1_Read+0x100>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000366:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 8000368:	bf00      	nop
 800036a:	4b32      	ldr	r3, [pc, #200]	; (8000434 <I2C1_Read+0x100>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C1_Read+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 8000376:	4a2f      	ldr	r2, [pc, #188]	; (8000434 <I2C1_Read+0x100>)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 800037e:	bf00      	nop
 8000380:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <I2C1_Read+0x100>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0302 	and.w	r3, r3, #2
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f9      	beq.n	8000380 <I2C1_Read+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <I2C1_Read+0x100>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	617b      	str	r3, [r7, #20]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 8000392:	bf00      	nop
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <I2C1_Read+0x100>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <I2C1_Read+0x60>

	I2C1->CR1 |= 0x100;				//generate repeated start p.694
 80003a0:	4a24      	ldr	r2, [pc, #144]	; (8000434 <I2C1_Read+0x100>)
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <I2C1_Read+0x100>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003aa:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80003ac:	bf00      	nop
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <I2C1_Read+0x100>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f9      	beq.n	80003ae <I2C1_Read+0x7a>

	I2C1->DR=address << 1|1;		//transmit slave address
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <I2C1_Read+0x100>)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80003c6:	bf00      	nop
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <I2C1_Read+0x100>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <I2C1_Read+0x94>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <I2C1_Read+0x100>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	617b      	str	r3, [r7, #20]
	I2C1->CR1 |= (1<<10);			//Enable acknowledge p.683
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <I2C1_Read+0x100>)
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <I2C1_Read+0x100>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e4:	6013      	str	r3, [r2, #0]

	while(n > 0)					//read data from chip
 80003e6:	e010      	b.n	800040a <I2C1_Read+0xd6>
	{
		while(!(I2C1->SR1 & 0x40)){}	//wait until RXNE flag is set
 80003e8:	bf00      	nop
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <I2C1_Read+0x100>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <I2C1_Read+0xb6>
		(*data++) = I2C1->DR;			//read data from DR
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	607a      	str	r2, [r7, #4]
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <I2C1_Read+0x100>)
 80003fe:	6912      	ldr	r2, [r2, #16]
 8000400:	b2d2      	uxtb	r2, r2
 8000402:	701a      	strb	r2, [r3, #0]
		n--;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3b01      	subs	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
	while(n > 0)					//read data from chip
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2b00      	cmp	r3, #0
 800040e:	dceb      	bgt.n	80003e8 <I2C1_Read+0xb4>
	}
	I2C1->CR1 |= (1<<9);			//generate stop p.682
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <I2C1_Read+0x100>)
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <I2C1_Read+0x100>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<10);			//disable acknowledge p.682
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <I2C1_Read+0x100>)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <I2C1_Read+0x100>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	371c      	adds	r7, #28
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40005400 	.word	0x40005400

08000438 <CRC16>:
uint8_t MODBUS_Slaves[SLAVE_COUNT] = {LMT84LP_MODBUS_ADDRESS, NSL19M51_MODBUS_ADDRESS, DHT22_MODBUS_ADDRESS};

//parameter wLenght = how my bytes in your frame?
//*nData = your first element in frame array
uint16_t CRC16(uint8_t *nData, uint16_t wLength)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
		0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
		0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
	};

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8000444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000448:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 800044a:	e011      	b.n	8000470 <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	89fb      	ldrh	r3, [r7, #14]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4053      	eors	r3, r2
 800045a:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 800045c:	89fb      	ldrh	r3, [r7, #14]
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 8000462:	7b7b      	ldrb	r3, [r7, #13]
 8000464:	4a08      	ldr	r2, [pc, #32]	; (8000488 <CRC16+0x50>)
 8000466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800046a:	89fb      	ldrh	r3, [r7, #14]
 800046c:	4053      	eors	r3, r2
 800046e:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8000470:	887b      	ldrh	r3, [r7, #2]
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	807a      	strh	r2, [r7, #2]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1e8      	bne.n	800044c <CRC16+0x14>
	}

	return wCRCWord;
 800047a:	89fb      	ldrh	r3, [r7, #14]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	08002188 	.word	0x08002188

0800048c <MODBUS_VerifyCRC>:

MODBUS_Status MODBUS_VerifyCRC(uint8_t *MODBUS_Frame)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint16_t MODBUS_FrameCRC = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	81fb      	strh	r3, [r7, #14]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 2); // Exclude the CRC itself
 8000498:	2106      	movs	r1, #6
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ffcc 	bl	8000438 <CRC16>
 80004a0:	4603      	mov	r3, r0
 80004a2:	81fb      	strh	r3, [r7, #14]

	uint8_t CRC_lsb = (MODBUS_FrameCRC >> 8) == MODBUS_Frame[MODBUS_FRAME_SIZE - 1];
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3307      	adds	r3, #7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	429a      	cmp	r2, r3
 80004b4:	bf0c      	ite	eq
 80004b6:	2301      	moveq	r3, #1
 80004b8:	2300      	movne	r3, #0
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_msb = (MODBUS_FrameCRC & 0x00FF) == MODBUS_Frame[MODBUS_FRAME_SIZE - 2];
 80004be:	89fb      	ldrh	r3, [r7, #14]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	3206      	adds	r2, #6
 80004c6:	7812      	ldrb	r2, [r2, #0]
 80004c8:	4293      	cmp	r3, r2
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	733b      	strb	r3, [r7, #12]
	if (CRC_lsb && CRC_msb)
 80004d4:	7b7b      	ldrb	r3, [r7, #13]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d004      	beq.n	80004e4 <MODBUS_VerifyCRC+0x58>
 80004da:	7b3b      	ldrb	r3, [r7, #12]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MODBUS_VerifyCRC+0x58>
	{
		return MODBUS_CRC_VALID;
 80004e0:	2302      	movs	r3, #2
 80004e2:	e000      	b.n	80004e6 <MODBUS_VerifyCRC+0x5a>
	}

	return MODBUS_CRC_INVALID;
 80004e4:	2303      	movs	r3, #3
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <MODBUS_CheckAddress>:

MODBUS_Status MODBUS_CheckAddress(uint8_t address)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < SLAVE_COUNT; ++i)
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	e011      	b.n	8000524 <MODBUS_CheckAddress+0x34>
    {
        if (MODBUS_Slaves[i] == address)
 8000500:	4a10      	ldr	r2, [pc, #64]	; (8000544 <MODBUS_CheckAddress+0x54>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	429a      	cmp	r2, r3
 800050c:	d107      	bne.n	800051e <MODBUS_CheckAddress+0x2e>
        {
            GPIOA->ODR |= GPIO_ODR_ODR_5;
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <MODBUS_CheckAddress+0x58>)
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MODBUS_CheckAddress+0x58>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f043 0320 	orr.w	r3, r3, #32
 8000518:	6153      	str	r3, [r2, #20]
            return MODBUS_ADDR_VALID;
 800051a:	2301      	movs	r3, #1
 800051c:	e00c      	b.n	8000538 <MODBUS_CheckAddress+0x48>
    for (int i = 0; i < SLAVE_COUNT; ++i)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	3301      	adds	r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b02      	cmp	r3, #2
 8000528:	ddea      	ble.n	8000500 <MODBUS_CheckAddress+0x10>
        }
    }

    GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <MODBUS_CheckAddress+0x58>)
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MODBUS_CheckAddress+0x58>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f023 0320 	bic.w	r3, r3, #32
 8000534:	6153      	str	r3, [r2, #20]
    return MODBUS_ADDR_INVALID;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	40020000 	.word	0x40020000

0800054c <MODBUS_ReadFrame>:

void MODBUS_ReadFrame(uint8_t *MODBUS_Frame)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	static uint8_t frame_index = 0;
	uint8_t byte;

    while (MODBUS_RingBufferRead(&byte) == MODBUS_RINGBUFFER_NOT_EMPTY)
 8000554:	e014      	b.n	8000580 <MODBUS_ReadFrame+0x34>
    {
    	MODBUS_Frame[frame_index++] = byte;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MODBUS_ReadFrame+0x4c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	b2d1      	uxtb	r1, r2
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <MODBUS_ReadFrame+0x4c>)
 8000560:	7011      	strb	r1, [r2, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	701a      	strb	r2, [r3, #0]
    	if (frame_index >= MODBUS_FRAME_SIZE)
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MODBUS_ReadFrame+0x4c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b07      	cmp	r3, #7
 8000572:	d905      	bls.n	8000580 <MODBUS_ReadFrame+0x34>
    	{
    		frame_ready = 1;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MODBUS_ReadFrame+0x50>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
    		frame_index = 0;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MODBUS_ReadFrame+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
    while (MODBUS_RingBufferRead(&byte) == MODBUS_RINGBUFFER_NOT_EMPTY)
 8000580:	f107 030f 	add.w	r3, r7, #15
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f8b3 	bl	80006f0 <MODBUS_RingBufferRead>
 800058a:	4603      	mov	r3, r0
 800058c:	2b09      	cmp	r3, #9
 800058e:	d0e2      	beq.n	8000556 <MODBUS_ReadFrame+0xa>
		}
    }
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000008e 	.word	0x2000008e
 800059c:	20000088 	.word	0x20000088

080005a0 <MODBUS_ReadSensor>:

MODBUS_Status MODBUS_ReadSensor(uint8_t *MODBUS_Frame, uint8_t *MODBUS_ResponseFrame)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	MODBUS_Reading reading;

	switch (MODBUS_Frame[0])
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d01e      	beq.n	80005f0 <MODBUS_ReadSensor+0x50>
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d002      	beq.n	80005bc <MODBUS_ReadSensor+0x1c>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d01c      	beq.n	80005f4 <MODBUS_ReadSensor+0x54>
			}

			break;

		default:
			break;
 80005ba:	e01c      	b.n	80005f6 <MODBUS_ReadSensor+0x56>
			DHT22_ModbusHandler(&reading); // Example request frame for temperature 0x06 0x04 0x00 0x01 0x00 0x01 0x61 0xBD humidity 0x06 0x04 0x00 0x02 0x00 0x01 0x91 0xBD
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fc02 	bl	8000dca <DHT22_ModbusHandler>
			if (MODBUS_Frame[3] == 0x01)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3303      	adds	r3, #3
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d107      	bne.n	80005e0 <MODBUS_ReadSensor+0x40>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.humidity);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	897a      	ldrh	r2, [r7, #10]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6838      	ldr	r0, [r7, #0]
 80005da:	f000 f8bb 	bl	8000754 <MODBUS_Build_ResponseFrame>
			break;
 80005de:	e00a      	b.n	80005f6 <MODBUS_ReadSensor+0x56>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.temperature);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	893a      	ldrh	r2, [r7, #8]
 80005e6:	4619      	mov	r1, r3
 80005e8:	6838      	ldr	r0, [r7, #0]
 80005ea:	f000 f8b3 	bl	8000754 <MODBUS_Build_ResponseFrame>
			break;
 80005ee:	e002      	b.n	80005f6 <MODBUS_ReadSensor+0x56>
			break;
 80005f0:	bf00      	nop
 80005f2:	e000      	b.n	80005f6 <MODBUS_ReadSensor+0x56>
			break;
 80005f4:	bf00      	nop
	}

	return MODBUS_SENSOR_READ_OK;
 80005f6:	2304      	movs	r3, #4
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <MODBUS_ProcessFrame>:

void MODBUS_ProcessFrame(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	static uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
    MODBUS_ReadFrame(MODBUS_Frame);
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <MODBUS_ProcessFrame+0x50>)
 8000608:	f7ff ffa0 	bl	800054c <MODBUS_ReadFrame>

    if (!frame_ready)
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MODBUS_ProcessFrame+0x54>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d019      	beq.n	8000648 <MODBUS_ProcessFrame+0x48>
    {
        return;
    }

    GPIOA->ODR |= GPIO_ODR_ODR_5;
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MODBUS_ProcessFrame+0x58>)
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MODBUS_ProcessFrame+0x58>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f043 0320 	orr.w	r3, r3, #32
 800061e:	6153      	str	r3, [r2, #20]
    MODBUS_Status status = MODBUS_CheckAddress(MODBUS_Frame[0]);
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MODBUS_ProcessFrame+0x50>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff63 	bl	80004f0 <MODBUS_CheckAddress>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]

    if (status == MODBUS_ADDR_VALID)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d103      	bne.n	800063c <MODBUS_ProcessFrame+0x3c>
    {
        MODBUS_ProcessValidFrame(MODBUS_Frame);
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <MODBUS_ProcessFrame+0x50>)
 8000636:	f000 f82b 	bl	8000690 <MODBUS_ProcessValidFrame>
 800063a:	e001      	b.n	8000640 <MODBUS_ProcessFrame+0x40>
    }

    else
    {
        MODBUS_ProcessInvalidFrame();
 800063c:	f000 f852 	bl	80006e4 <MODBUS_ProcessInvalidFrame>
    }

    frame_ready = 0;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <MODBUS_ProcessFrame+0x54>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e000      	b.n	800064a <MODBUS_ProcessFrame+0x4a>
        return;
 8000648:	bf00      	nop
}
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000090 	.word	0x20000090
 8000654:	20000088 	.word	0x20000088
 8000658:	40020000 	.word	0x40020000

0800065c <MODBUS_TransmitResponse>:




MODBUS_Status MODBUS_TransmitResponse(uint8_t* MODBUS_ResponseFrame)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e009      	b.n	800067e <MODBUS_TransmitResponse+0x22>
	{
		USART2_write(MODBUS_ResponseFrame[i]);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f966 	bl	8000944 <USART2_write>
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b06      	cmp	r3, #6
 8000682:	ddf2      	ble.n	800066a <MODBUS_TransmitResponse+0xe>
	}
}
 8000684:	bf00      	nop
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MODBUS_ProcessValidFrame>:

void MODBUS_ProcessValidFrame(uint8_t *MODBUS_Frame)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b09f      	sub	sp, #124	; 0x7c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if (MODBUS_VerifyCRC(MODBUS_Frame) == MODBUS_CRC_INVALID)
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fef7 	bl	800048c <MODBUS_VerifyCRC>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10e      	bne.n	80006c2 <MODBUS_ProcessValidFrame+0x32>
	{
#ifdef DEBUG
	    char debugBuffer[100];
		snprintf(debugBuffer, 20, "%s", "Checksum error!");
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <MODBUS_ProcessValidFrame+0x50>)
 80006aa:	461c      	mov	r4, r3
 80006ac:	4613      	mov	r3, r2
 80006ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		USART2_write_buffer(debugBuffer);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f959 	bl	8000970 <USART2_write_buffer>
#endif
		return;
 80006be:	bf00      	nop
 80006c0:	e00a      	b.n	80006d8 <MODBUS_ProcessValidFrame+0x48>
	}

	uint8_t MODBUS_ResponseFrame[MODBUS_FRAME_SIZE];
    MODBUS_ReadSensor(MODBUS_Frame, MODBUS_ResponseFrame);
 80006c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff69 	bl	80005a0 <MODBUS_ReadSensor>
    MODBUS_TransmitResponse(MODBUS_ResponseFrame);
 80006ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffc2 	bl	800065c <MODBUS_TransmitResponse>
    {
        snprintf(debugBuffer, sizeof(debugBuffer), "%.2x ", MODBUS_Frame[i]);
        USART2_write_buffer(debugBuffer);
    }
#endif
}
 80006d8:	377c      	adds	r7, #124	; 0x7c
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	08002084 	.word	0x08002084

080006e4 <MODBUS_ProcessInvalidFrame>:

void MODBUS_ProcessInvalidFrame(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
#if DEBUG == 1
    char debugBuffer[100];
    snprintf(debugBuffer, sizeof(debugBuffer), "Invalid address!");
    USART2_write_buffer(debugBuffer);
#endif
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <MODBUS_RingBufferRead>:

MODBUS_Status MODBUS_RingBufferRead(uint8_t *data)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    if (rx_tail == rx_head)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MODBUS_RingBufferRead+0x58>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MODBUS_RingBufferRead+0x5c>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	429a      	cmp	r2, r3
 8000706:	d101      	bne.n	800070c <MODBUS_RingBufferRead+0x1c>
    {
        return MODBUS_RINGBUFFER_EMPTY;
 8000708:	2308      	movs	r3, #8
 800070a:	e017      	b.n	800073c <MODBUS_RingBufferRead+0x4c>
    }

    *data = rx_buffer[rx_tail];
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MODBUS_RingBufferRead+0x58>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MODBUS_RingBufferRead+0x60>)
 8000716:	5c9b      	ldrb	r3, [r3, r2]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	701a      	strb	r2, [r3, #0]
    rx_tail = (rx_tail + 1) % RX_BUFFER_SIZE;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MODBUS_RingBufferRead+0x58>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	3301      	adds	r3, #1
 8000726:	425a      	negs	r2, r3
 8000728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800072c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000730:	bf58      	it	pl
 8000732:	4253      	negpl	r3, r2
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <MODBUS_RingBufferRead+0x58>)
 8000738:	801a      	strh	r2, [r3, #0]
    return MODBUS_RINGBUFFER_NOT_EMPTY;
 800073a:	2309      	movs	r3, #9
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	2000008a 	.word	0x2000008a
 8000750:	200000d4 	.word	0x200000d4

08000754 <MODBUS_Build_ResponseFrame>:

MODBUS_Status MODBUS_Build_ResponseFrame(uint8_t* MODBUS_Frame, uint8_t slave_addr, uint16_t reading)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	803b      	strh	r3, [r7, #0]
	uint16_t MODBUS_FrameCRC = 0x0000;
 8000764:	2300      	movs	r3, #0
 8000766:	81fb      	strh	r3, [r7, #14]

	MODBUS_Frame[0] = slave_addr;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	78fa      	ldrb	r2, [r7, #3]
 800076c:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[1] = MODBUS_READ_INPUT_REG;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	2204      	movs	r2, #4
 8000774:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[2] = 0x02; // Send 2 bytes
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3302      	adds	r3, #2
 800077a:	2202      	movs	r2, #2
 800077c:	701a      	strb	r2, [r3, #0]

	MODBUS_Frame[3] = reading >> 8;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3303      	adds	r3, #3
 8000782:	883a      	ldrh	r2, [r7, #0]
 8000784:	0a12      	lsrs	r2, r2, #8
 8000786:	b292      	uxth	r2, r2
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[4] = reading & 0x00FF;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3304      	adds	r3, #4
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	701a      	strb	r2, [r3, #0]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 3);
 8000796:	2105      	movs	r1, #5
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fe4d 	bl	8000438 <CRC16>
 800079e:	4603      	mov	r3, r0
 80007a0:	81fb      	strh	r3, [r7, #14]
	MODBUS_Frame[5] = MODBUS_FrameCRC & 0x00FF;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3305      	adds	r3, #5
 80007a6:	89fa      	ldrh	r2, [r7, #14]
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[6] = MODBUS_FrameCRC >> 8;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3306      	adds	r3, #6
 80007b0:	89fa      	ldrh	r2, [r7, #14]
 80007b2:	0a12      	lsrs	r2, r2, #8
 80007b4:	b292      	uxth	r2, r2
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	701a      	strb	r2, [r3, #0]

	return MODBUS_FRAME_OK;
 80007ba:	2306      	movs	r3, #6
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE)
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MODBUS_IRQHandler+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d022      	beq.n	800081c <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART2->DR;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MODBUS_IRQHandler+0x64>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MODBUS_IRQHandler+0x68>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	3301      	adds	r3, #1
 80007e4:	425a      	negs	r2, r3
 80007e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80007ee:	bf58      	it	pl
 80007f0:	4253      	negpl	r3, r2
 80007f2:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MODBUS_IRQHandler+0x6c>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	88ba      	ldrh	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d00a      	beq.n	8000816 <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MODBUS_IRQHandler+0x68>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <MODBUS_IRQHandler+0x70>)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <MODBUS_IRQHandler+0x68>)
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 8000814:	e002      	b.n	800081c <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MODBUS_IRQHandler+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40004400 	.word	0x40004400
 800082c:	2000008a 	.word	0x2000008a
 8000830:	2000008c 	.word	0x2000008c
 8000834:	200000d4 	.word	0x200000d4
 8000838:	20000089 	.word	0x20000089

0800083c <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <TIM2_Init+0x3c>)
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <TIM2_Init+0x3c>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 800084c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000850:	221f      	movs	r2, #31
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 8000854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 800085e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6013      	str	r3, [r2, #0]
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000886:	4908      	ldr	r1, [pc, #32]	; (80008a8 <NVIC_EnableIRQ+0x2c>)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	095b      	lsrs	r3, r3, #5
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	f002 021f 	and.w	r2, r2, #31
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <USART2_init+0x8c>)
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <USART2_init+0x8c>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ba:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <USART2_init+0x8c>)
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <USART2_init+0x8c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <USART2_init+0x90>)
 80008ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ce:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 80008d0:	4a1a      	ldr	r2, [pc, #104]	; (800093c <USART2_init+0x90>)
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <USART2_init+0x90>)
 80008d4:	6a1b      	ldr	r3, [r3, #32]
 80008d6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80008da:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <USART2_init+0x90>)
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <USART2_init+0x90>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <USART2_init+0x90>)
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <USART2_init+0x90>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <USART2_init+0x94>)
 80008f6:	f640 5205 	movw	r2, #3333	; 0xd05
 80008fa:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <USART2_init+0x94>)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <USART2_init+0x94>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <USART2_init+0x94>)
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <USART2_init+0x94>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <USART2_init+0x94>)
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <USART2_init+0x94>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <USART2_init+0x94>)
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <USART2_init+0x94>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	f043 0320 	orr.w	r3, r3, #32
 800092a:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 800092c:	2026      	movs	r0, #38	; 0x26
 800092e:	f7ff ffa5 	bl	800087c <NVIC_EnableIRQ>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	40004400 	.word	0x40004400

08000944 <USART2_write>:
		data=USART2->DR;			//p739
		return data;
}

void USART2_write(char data)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 800094e:	bf00      	nop
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <USART2_write+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0f9      	beq.n	8000950 <USART2_write+0xc>
	USART2->DR = (data);		//p739
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <USART2_write+0x28>)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	6053      	str	r3, [r2, #4]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40004400 	.word	0x40004400

08000970 <USART2_write_buffer>:

void USART2_write_buffer(char* buffer)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 8000978:	e007      	b.n	800098a <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ffe0 	bl	8000944 <USART2_write>
		buffer++;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f3      	bne.n	800097a <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 8000992:	200d      	movs	r0, #13
 8000994:	f7ff ffd6 	bl	8000944 <USART2_write>
	USART2_write('\n');
 8000998:	200a      	movs	r0, #10
 800099a:	f7ff ffd3 	bl	8000944 <USART2_write>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 80009aa:	f7ff ff0b 	bl	80007c4 <MODBUS_IRQHandler>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <NVIC_EnableIRQ>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <NVIC_EnableIRQ+0x2c>)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	095b      	lsrs	r3, r3, #5
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	f002 021f 	and.w	r2, r2, #31
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <DHT22_SWITCH_MODE_OUTPUT>:

static volatile uint8_t pulses[BIT_COUNT];
static volatile uint8_t dht_status = 0;

void DHT22_SWITCH_MODE_OUTPUT()
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40020000 	.word	0x40020000

08000a0c <DHT22_SWITCH_MODE_INPUT>:

void DHT22_SWITCH_MODE_INPUT()
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <DHT22_SWITCH_MODE_INPUT+0x18>)
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <DHT22_SWITCH_MODE_INPUT+0x18>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40020000 	.word	0x40020000

08000a28 <DHT22_init>:

void DHT22_init()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <DHT22_init+0x50>)
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <DHT22_init+0x50>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6213      	str	r3, [r2, #32]
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI7_PA;
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <DHT22_init+0x54>)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <DHT22_init+0x54>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PA;
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <DHT22_init+0x54>)
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <DHT22_init+0x54>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= EXTI_IMR_MR7;
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <DHT22_init+0x58>)
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <DHT22_init+0x58>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a52:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_FT7;
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <DHT22_init+0x58>)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <DHT22_init+0x58>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5e:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR |= EXTI_RTSR_RT7;
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <DHT22_init+0x58>)
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <DHT22_init+0x58>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6a:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a6c:	2017      	movs	r0, #23
 8000a6e:	f7ff ffa1 	bl	80009b4 <NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	40010400 	.word	0x40010400

08000a84 <DHT22_read>:

uint8_t DHT22_read(MODBUS_Reading *reading)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0a2      	sub	sp, #136	; 0x88
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
    uint8_t byte_list[5] = {0};
 8000a8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	711a      	strb	r2, [r3, #4]
    uint8_t buffer[100];

    DHT22_start();
 8000a96:	f000 f8e5 	bl	8000c64 <DHT22_start>

    if (DHT22_wait_response())
 8000a9a:	f000 f907 	bl	8000cac <DHT22_wait_response>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d004      	beq.n	8000aae <DHT22_read+0x2a>
    {
        USART2_write_buffer("DHT22 Not ready to send data!");
 8000aa4:	4866      	ldr	r0, [pc, #408]	; (8000c40 <DHT22_read+0x1bc>)
 8000aa6:	f7ff ff63 	bl	8000970 <USART2_write_buffer>
        return DHT_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e0c3      	b.n	8000c36 <DHT22_read+0x1b2>
    }

    SysTick->LOAD = TIMEOUT_20_MS - 1; // Set maximum allowable wait time
 8000aae:	4b65      	ldr	r3, [pc, #404]	; (8000c44 <DHT22_read+0x1c0>)
 8000ab0:	4a65      	ldr	r2, [pc, #404]	; (8000c48 <DHT22_read+0x1c4>)
 8000ab2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000ab4:	4b63      	ldr	r3, [pc, #396]	; (8000c44 <DHT22_read+0x1c0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000aba:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <DHT22_read+0x1c0>)
 8000abc:	2205      	movs	r2, #5
 8000abe:	601a      	str	r2, [r3, #0]

    // Wait for data
    while(dht_status == DHT_MEASURING)
 8000ac0:	e00a      	b.n	8000ad8 <DHT22_read+0x54>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000ac2:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <DHT22_read+0x1c0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <DHT22_read+0x54>
        {
    		USART2_write_buffer("DHT22 measurement error :/");
 8000ace:	485f      	ldr	r0, [pc, #380]	; (8000c4c <DHT22_read+0x1c8>)
 8000ad0:	f7ff ff4e 	bl	8000970 <USART2_write_buffer>
            return DHT_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e0ae      	b.n	8000c36 <DHT22_read+0x1b2>
    while(dht_status == DHT_MEASURING)
 8000ad8:	4b5d      	ldr	r3, [pc, #372]	; (8000c50 <DHT22_read+0x1cc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d0ef      	beq.n	8000ac2 <DHT22_read+0x3e>
        }
    }

	SysTick->CTRL = 0;
 8000ae2:	4b58      	ldr	r3, [pc, #352]	; (8000c44 <DHT22_read+0x1c0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]

    if (dht_status == DHT_READY)
 8000ae8:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <DHT22_read+0x1cc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f040 80a0 	bne.w	8000c34 <DHT22_read+0x1b0>
    {
	    EXTI->IMR &= ~EXTI_IMR_MR7;
 8000af4:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <DHT22_read+0x1d0>)
 8000af6:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <DHT22_read+0x1d0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000afe:	6013      	str	r3, [r2, #0]
    	dht_status = DHT_NOT_READY;
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <DHT22_read+0x1cc>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	701a      	strb	r2, [r3, #0]

    	DHT22_decode_pulses(pulses, byte_list);
 8000b06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4852      	ldr	r0, [pc, #328]	; (8000c58 <DHT22_read+0x1d4>)
 8000b0e:	f000 f91d 	bl	8000d4c <DHT22_decode_pulses>

		uint8_t humidity_int = byte_list[0];
 8000b12:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000b16:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		uint8_t humidity_dec = byte_list[1];
 8000b1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000b1e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		uint8_t temperature_int = byte_list[2];
 8000b22:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000b26:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint8_t temperature_dec = byte_list[3];
 8000b2a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b2e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		uint8_t checksum = byte_list[4];
 8000b32:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000b36:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

		uint16_t humidity = (humidity_int << 8) | humidity_dec;
 8000b3a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		uint16_t temperature = (temperature_int << 8) | temperature_dec;
 8000b50:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	    if (temperature_int & 0x80) temperature = -temperature;
 8000b66:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da04      	bge.n	8000b78 <DHT22_read+0xf4>
 8000b6e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000b72:	425b      	negs	r3, r3
 8000b74:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		uint8_t expected_checksum = humidity_int + humidity_dec + temperature_int + temperature_dec;
 8000b78:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8000b7c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000b80:	4413      	add	r3, r2
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000b88:	4413      	add	r3, r2
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000b90:	4413      	add	r3, r2
 8000b92:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		if (expected_checksum != checksum)
 8000b96:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000b9a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d010      	beq.n	8000bc4 <DHT22_read+0x140>
		{
			snprintf(buffer, 100, "Invalid checksum expected %.2X got %.2X", expected_checksum, checksum);
 8000ba2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000ba6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000baa:	f107 000c 	add.w	r0, r7, #12
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <DHT22_read+0x1d8>)
 8000bb4:	2164      	movs	r1, #100	; 0x64
 8000bb6:	f000 fe1f 	bl	80017f8 <sniprintf>
			USART2_write_buffer(buffer);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fed6 	bl	8000970 <USART2_write_buffer>
		}

		//reading->humidity_int = humidity / 10;
		//reading->humidity_dec = humidity % 10;
		reading->humidity = (humidity / 10) << 8 | humidity % 10;
 8000bc4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000bc8:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <DHT22_read+0x1dc>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b218      	sxth	r0, r3
 8000bd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <DHT22_read+0x1dc>)
 8000bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8000be0:	08d9      	lsrs	r1, r3, #3
 8000be2:	460b      	mov	r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4303      	orrs	r3, r0
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	805a      	strh	r2, [r3, #2]

		//reading->temperature_int = temperature / 10;
		//reading->temperature_dec = temperature % 10;
		reading->temperature = (temperature / 10) << 8 | temperature % 10;
 8000bfa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <DHT22_read+0x1dc>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b218      	sxth	r0, r3
 8000c0c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <DHT22_read+0x1dc>)
 8000c12:	fba3 1302 	umull	r1, r3, r3, r2
 8000c16:	08d9      	lsrs	r1, r3, #3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4303      	orrs	r3, r0
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	801a      	strh	r2, [r3, #0]

		return DHT_READY;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e000      	b.n	8000c36 <DHT22_read+0x1b2>
    }

    return DHT_ERROR;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3780      	adds	r7, #128	; 0x80
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08002094 	.word	0x08002094
 8000c44:	e000e010 	.word	0xe000e010
 8000c48:	0009c3ff 	.word	0x0009c3ff
 8000c4c:	080020b4 	.word	0x080020b4
 8000c50:	200000c1 	.word	0x200000c1
 8000c54:	40010400 	.word	0x40010400
 8000c58:	20000098 	.word	0x20000098
 8000c5c:	080020d0 	.word	0x080020d0
 8000c60:	cccccccd 	.word	0xcccccccd

08000c64 <DHT22_start>:

void DHT22_start()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    EXTI->IMR &= ~EXTI_IMR_MR7;
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <DHT22_start+0x40>)
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <DHT22_start+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c72:	6013      	str	r3, [r2, #0]
    // MCU PULL LOW ~20ms
    DHT22_SWITCH_MODE_OUTPUT();
 8000c74:	f7ff feb6 	bl	80009e4 <DHT22_SWITCH_MODE_OUTPUT>
    GPIOA->ODR &= ~GPIO_ODR_ODR_7;
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <DHT22_start+0x44>)
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <DHT22_start+0x44>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c82:	6153      	str	r3, [r2, #20]
    delay_ms(20);
 8000c84:	2014      	movs	r0, #20
 8000c86:	f000 fb89 	bl	800139c <delay_ms>

    // MCU RELEASE LINE 20-40us
    GPIOA->ODR |= GPIO_ODR_ODR_7;
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <DHT22_start+0x44>)
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <DHT22_start+0x44>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6153      	str	r3, [r2, #20]
    DHT22_SWITCH_MODE_INPUT();
 8000c96:	f7ff feb9 	bl	8000a0c <DHT22_SWITCH_MODE_INPUT>
	delay_us(20);
 8000c9a:	2014      	movs	r0, #20
 8000c9c:	f000 fb58 	bl	8001350 <delay_us>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010400 	.word	0x40010400
 8000ca8:	40020000 	.word	0x40020000

08000cac <DHT22_wait_response>:

uint8_t DHT22_wait_response()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cb2:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000cb6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	601a      	str	r2, [r3, #0]

    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 8000cc4:	e00a      	b.n	8000cdc <DHT22_wait_response+0x30>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <DHT22_wait_response+0x30>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response PULL LOW");
 8000cd2:	481a      	ldr	r0, [pc, #104]	; (8000d3c <DHT22_wait_response+0x90>)
 8000cd4:	f7ff fe4c 	bl	8000970 <USART2_write_buffer>
            return DHT_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e02b      	b.n	8000d34 <DHT22_wait_response+0x88>
    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <DHT22_wait_response+0x94>)
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0ee      	beq.n	8000cc6 <DHT22_wait_response+0x1a>
        }
    }

    EXTI->IMR |= EXTI_IMR_MR7;
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <DHT22_wait_response+0x98>)
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <DHT22_wait_response+0x98>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	6013      	str	r3, [r2, #0]

    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time 85µs
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cf6:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000cfa:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000d04:	2205      	movs	r2, #5
 8000d06:	601a      	str	r2, [r3, #0]
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8000d08:	e00a      	b.n	8000d20 <DHT22_wait_response+0x74>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <DHT22_wait_response+0x74>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response GET READY");
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <DHT22_wait_response+0x9c>)
 8000d18:	f7ff fe2a 	bl	8000970 <USART2_write_buffer>
            return DHT_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e009      	b.n	8000d34 <DHT22_wait_response+0x88>
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <DHT22_wait_response+0x94>)
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ee      	bne.n	8000d0a <DHT22_wait_response+0x5e>
        }
    }

    SysTick->CTRL = 0;
 8000d2c:	4b02      	ldr	r3, [pc, #8]	; (8000d38 <DHT22_wait_response+0x8c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]

    return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	e000e010 	.word	0xe000e010
 8000d3c:	080020f8 	.word	0x080020f8
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40010400 	.word	0x40010400
 8000d48:	08002130 	.word	0x08002130

08000d4c <DHT22_decode_pulses>:

void DHT22_decode_pulses(volatile uint8_t *pulses, uint8_t *byte_list)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    uint8_t current_byte = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]

    for (int bit = 1; bit <= BIT_COUNT; bit++)
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	e02c      	b.n	8000dba <DHT22_decode_pulses+0x6e>
    {
        if (pulses[bit] > 20 && pulses[bit] < 32)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b14      	cmp	r3, #20
 8000d6c:	d90a      	bls.n	8000d84 <DHT22_decode_pulses+0x38>
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b1f      	cmp	r3, #31
 8000d7a:	d803      	bhi.n	8000d84 <DHT22_decode_pulses+0x38>
        {
            current_byte = (current_byte << 1) | 0;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	e006      	b.n	8000d92 <DHT22_decode_pulses+0x46>
        }
        else
        {
            current_byte = (current_byte << 1) | 1;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
        }

        if ((bit % 8) == 0)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10b      	bne.n	8000db4 <DHT22_decode_pulses+0x68>
        {
            byte_list[(bit / 8) - 1] = current_byte;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da00      	bge.n	8000da4 <DHT22_decode_pulses+0x58>
 8000da2:	3307      	adds	r3, #7
 8000da4:	10db      	asrs	r3, r3, #3
 8000da6:	3b01      	subs	r3, #1
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	7bfa      	ldrb	r2, [r7, #15]
 8000dae:	701a      	strb	r2, [r3, #0]
            current_byte = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
    for (int bit = 1; bit <= BIT_COUNT; bit++)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b29      	cmp	r3, #41	; 0x29
 8000dbe:	ddcf      	ble.n	8000d60 <DHT22_decode_pulses+0x14>
        }
    }
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DHT22_ModbusHandler>:

void DHT22_ModbusHandler(MODBUS_Reading* reading)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b09c      	sub	sp, #112	; 0x70
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	if(!(DHT22_read(reading)))
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fe56 	bl	8000a84 <DHT22_read>
		snprintf(buffer, 100, "DHT22 Temperature %4x", reading->temperature);
		USART2_write_buffer(buffer);
#endif
	}

	return;
 8000dd8:	bf00      	nop
}
 8000dda:	3770      	adds	r7, #112	; 0x70
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <DHT22_IRQHandler>:

void DHT22_IRQHandler()
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 8000de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <DHT22_IRQHandler+0xa4>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <DHT22_IRQHandler+0xa8>)
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d009      	beq.n	8000e14 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000e00:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <DHT22_IRQHandler+0xac>)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <DHT22_IRQHandler+0xa8>)
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <DHT22_IRQHandler+0xa8>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	e025      	b.n	8000e60 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <DHT22_IRQHandler+0xac>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d305      	bcc.n	8000e2a <DHT22_IRQHandler+0x4a>
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <DHT22_IRQHandler+0xac>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	e006      	b.n	8000e38 <DHT22_IRQHandler+0x58>
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <DHT22_IRQHandler+0xac>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	88fa      	ldrh	r2, [r7, #6]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <DHT22_IRQHandler+0xb0>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	b2d9      	uxtb	r1, r3
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <DHT22_IRQHandler+0xb4>)
 8000e46:	5499      	strb	r1, [r3, r2]
		index++;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <DHT22_IRQHandler+0xb0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <DHT22_IRQHandler+0xb0>)
 8000e52:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <DHT22_IRQHandler+0xa8>)
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <DHT22_IRQHandler+0xa8>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f023 0320 	bic.w	r3, r3, #32
 8000e5e:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <DHT22_IRQHandler+0xb0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b28      	cmp	r3, #40	; 0x28
 8000e66:	d905      	bls.n	8000e74 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <DHT22_IRQHandler+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <DHT22_IRQHandler+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <DHT22_IRQHandler+0xb8>)
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	615a      	str	r2, [r3, #20]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	200000c1 	.word	0x200000c1
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	200000c2 	.word	0x200000c2
 8000e90:	200000c4 	.word	0x200000c4
 8000e94:	20000098 	.word	0x20000098
 8000e98:	40010400 	.word	0x40010400

08000e9c <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000ea8:	23ff      	movs	r3, #255	; 0xff
 8000eaa:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	e021      	b.n	8000ef6 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	7b7b      	ldrb	r3, [r7, #13]
 8000ebc:	4053      	eors	r3, r2
 8000ebe:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	733b      	strb	r3, [r7, #12]
 8000ec4:	e011      	b.n	8000eea <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8000ec6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da07      	bge.n	8000ede <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	737b      	strb	r3, [r7, #13]
 8000edc:	e002      	b.n	8000ee4 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000ee4:	7b3b      	ldrb	r3, [r7, #12]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	733b      	strb	r3, [r7, #12]
 8000eea:	7b3b      	ldrb	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ea      	bne.n	8000ec6 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	81fb      	strh	r3, [r7, #14]
 8000ef6:	89fa      	ldrh	r2, [r7, #14]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3d9      	bcc.n	8000eb2 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffbc 	bl	8000e9c <sensirion_common_generate_crc>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d002      	beq.n	8000f34 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e000      	b.n	8000f36 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	817b      	strh	r3, [r7, #10]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000f56:	8abb      	ldrh	r3, [r7, #20]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	82ba      	strh	r2, [r7, #20]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	897a      	ldrh	r2, [r7, #10]
 8000f64:	0a12      	lsrs	r2, r2, #8
 8000f66:	b292      	uxth	r2, r2
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8000f6c:	8abb      	ldrh	r3, [r7, #20]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	82ba      	strh	r2, [r7, #20]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	897a      	ldrh	r2, [r7, #10]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
 8000f82:	e030      	b.n	8000fe6 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000f84:	8abb      	ldrh	r3, [r7, #20]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	82ba      	strh	r2, [r7, #20]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	7dfa      	ldrb	r2, [r7, #23]
 8000f92:	0052      	lsls	r2, r2, #1
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	440a      	add	r2, r1
 8000f98:	8812      	ldrh	r2, [r2, #0]
 8000f9a:	0a12      	lsrs	r2, r2, #8
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8000fa2:	8abb      	ldrh	r3, [r7, #20]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	82ba      	strh	r2, [r7, #20]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	7dfa      	ldrb	r2, [r7, #23]
 8000fb0:	0052      	lsls	r2, r2, #1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440a      	add	r2, r1
 8000fb6:	8812      	ldrh	r2, [r2, #0]
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8000fbc:	8abb      	ldrh	r3, [r7, #20]
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff68 	bl	8000e9c <sensirion_common_generate_crc>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000fd0:	8abb      	ldrh	r3, [r7, #20]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	82ba      	strh	r2, [r7, #20]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	7cfa      	ldrb	r2, [r7, #19]
 8000fde:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	7dfa      	ldrb	r2, [r7, #23]
 8000fe8:	7a7b      	ldrb	r3, [r7, #9]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3ca      	bcc.n	8000f84 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8000fee:	8abb      	ldrh	r3, [r7, #20]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	; 0x58
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	461a      	mov	r2, r3
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	4413      	add	r3, r2
 8001010:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800101a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f8e5 	bl	80011f2 <sensirion_i2c_read>
 8001028:	4603      	mov	r3, r0
 800102a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800102e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8001036:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800103a:	e047      	b.n	80010cc <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800103c:	2300      	movs	r3, #0
 800103e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001042:	2300      	movs	r3, #0
 8001044:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001048:	e039      	b.n	80010be <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800104a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800104e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001050:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001052:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001056:	3302      	adds	r3, #2
 8001058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800105a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	2102      	movs	r1, #2
 8001062:	f7ff ff52 	bl	8000f0a <sensirion_common_check_crc>
 8001066:	4603      	mov	r3, r0
 8001068:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800106c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8001074:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001078:	e028      	b.n	80010cc <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800107a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8001084:	461a      	mov	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800108e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001090:	440a      	add	r2, r1
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001096:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 80010a0:	461a      	mov	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80010aa:	3201      	adds	r2, #1
 80010ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80010ae:	440a      	add	r2, r1
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80010b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80010b8:	3303      	adds	r3, #3
 80010ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80010be:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80010c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3bf      	bcc.n	800104a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3758      	adds	r7, #88	; 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80010e4:	88ba      	ldrh	r2, [r7, #4]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff84 	bl	8000ff8 <sensirion_i2c_read_words_as_bytes>
 80010f0:	4603      	mov	r3, r0
 80010f2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80010f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <sensirion_i2c_read_words+0x2e>
        return ret;
 80010fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001100:	e020      	b.n	8001144 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e017      	b.n	8001138 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	0212      	lsls	r2, r2, #8
 8001120:	b211      	sxth	r1, r2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	3201      	adds	r2, #1
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	b212      	sxth	r2, r2
 800112a:	430a      	orrs	r2, r1
 800112c:	b212      	sxth	r2, r2
 800112e:	b292      	uxth	r2, r2
 8001130:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	b29b      	uxth	r3, r3
 800113c:	88ba      	ldrh	r2, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d8e2      	bhi.n	8001108 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 800115c:	88b9      	ldrh	r1, [r7, #4]
 800115e:	f107 000c 	add.w	r0, r7, #12
 8001162:	2300      	movs	r3, #0
 8001164:	2200      	movs	r2, #0
 8001166:	f7ff feea 	bl	8000f3e <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 800116a:	f107 010c 	add.w	r1, r7, #12
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2202      	movs	r2, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f850 	bl	8001218 <sensirion_i2c_write>
 8001178:	4603      	mov	r3, r0
 800117a:	b21b      	sxth	r3, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <sensirion_i2c_delayed_read_cmd>:
    return sensirion_i2c_write(address, buf, buf_size);
}

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60ba      	str	r2, [r7, #8]
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	460b      	mov	r3, r1
 8001194:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8001196:	89b9      	ldrh	r1, [r7, #12]
 8001198:	f107 0014 	add.w	r0, r7, #20
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	f7ff fecd 	bl	8000f3e <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80011a4:	f107 0114 	add.w	r1, r7, #20
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2202      	movs	r2, #2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f833 	bl	8001218 <sensirion_i2c_write>
 80011b2:	4603      	mov	r3, r0
 80011b4:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 80011b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 80011be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c2:	e00c      	b.n	80011de <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 80011ca:	68b8      	ldr	r0, [r7, #8]
 80011cc:	f000 f837 	bl	800123e <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 80011d0:	8c3a      	ldrh	r2, [r7, #32]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff7c 	bl	80010d4 <sensirion_i2c_read_words>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <sensirion_i2c_init>:
{
    return 1;
}

void sensirion_i2c_init(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
    I2C1_Init();
 80011ea:	f7fe ffeb 	bl	80001c4 <I2C1_Init>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <sensirion_i2c_read>:
{
    // TODO: Implement function
}

int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	6039      	str	r1, [r7, #0]
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	4613      	mov	r3, r2
 8001200:	80bb      	strh	r3, [r7, #4]
    I2C1_Read(address, count, data);
 8001202:	88b9      	ldrh	r1, [r7, #4]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f893 	bl	8000334 <I2C1_Read>
    return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <sensirion_i2c_write>:

int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	80bb      	strh	r3, [r7, #4]
    I2C1_Write(address, count, data);
 8001228:	88b9      	ldrh	r1, [r7, #4]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f81e 	bl	8000270 <I2C1_Write>

    return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <sensirion_sleep_usec>:

void sensirion_sleep_usec(uint32_t useconds)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	delay_us(useconds);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f882 	bl	8001350 <delay_us>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 800125e:	f107 020b 	add.w	r2, r7, #11
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f81b 	bl	80012a4 <sgp30_get_feature_set_version>
 800126e:	4603      	mov	r3, r0
 8001270:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8001272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <sgp30_check_featureset+0x2c>
        return ret;
 800127a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127e:	e00d      	b.n	800129c <sgp30_check_featureset+0x48>

    if (product_type != SGP30_PRODUCT_TYPE)
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <sgp30_check_featureset+0x38>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 8001286:	f06f 030b 	mvn.w	r3, #11
 800128a:	e007      	b.n	800129c <sgp30_check_featureset+0x48>

    if (fs_version < needed_fs)
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	429a      	cmp	r2, r3
 8001292:	d902      	bls.n	800129a <sgp30_check_featureset+0x46>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 8001294:	f06f 0309 	mvn.w	r3, #9
 8001298:	e000      	b.n	800129c <sgp30_check_featureset+0x48>

    return STATUS_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t* feature_set_version,
                                      uint8_t* product_type) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 80012ae:	2058      	movs	r0, #88	; 0x58
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	2301      	movs	r3, #1
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80012be:	f242 012f 	movw	r1, #8239	; 0x202f
 80012c2:	f7ff ff5f 	bl	8001184 <sensirion_i2c_delayed_read_cmd>
 80012c6:	4603      	mov	r3, r0
 80012c8:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 80012ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <sgp30_get_feature_set_version+0x34>
        return ret;
 80012d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d6:	e00b      	b.n	80012f0 <sgp30_get_feature_set_version+0x4c>

    *feature_set_version = words[0] & 0x00FF;
 80012d8:	89bb      	ldrh	r3, [r7, #12]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	0b1b      	lsrs	r3, r3, #12
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 80012fe:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 8001300:	f242 0103 	movw	r1, #8195	; 0x2003
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff21 	bl	800114c <sensirion_i2c_write_cmd>
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 800130e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001312:	f7ff ff94 	bl	800123e <sensirion_sleep_usec>
    return ret;
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <sgp30_probe>:

int16_t sgp30_probe() {
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 8001328:	2020      	movs	r0, #32
 800132a:	f7ff ff93 	bl	8001254 <sgp30_check_featureset>
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]

    if (ret != STATUS_OK)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <sgp30_probe+0x1e>
        return ret;
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	e002      	b.n	8001346 <sgp30_probe+0x24>

    return sgp30_iaq_init();
 8001340:	f7ff ffda 	bl	80012f8 <sgp30_iaq_init>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <delay_us>:
#include "timing.h"
#include "stm32l1xx.h"

void delay_us(unsigned long delay)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32 - 1; //32 000 000 = 1s so 32 = 1 us
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <delay_us+0x48>)
 800135e:	221f      	movs	r2, #31
 8001360:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <delay_us+0x48>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <delay_us+0x48>)
 800136a:	2205      	movs	r2, #5
 800136c:	601a      	str	r2, [r3, #0]

	  while(i < delay)
 800136e:	e009      	b.n	8001384 <delay_us+0x34>
	  {
		  while(!((SysTick->CTRL) & 0x10000)){}
 8001370:	bf00      	nop
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <delay_us+0x48>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f9      	beq.n	8001372 <delay_us+0x22>
		  i++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
	  while(i < delay)
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3f1      	bcc.n	8001370 <delay_us+0x20>
	  }
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <delay_ms>:

void delay_ms(unsigned long delay)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <delay_ms+0x48>)
 80013aa:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80013ae:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <delay_ms+0x48>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <delay_ms+0x48>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 80013bc:	e009      	b.n	80013d2 <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 80013be:	bf00      	nop
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <delay_ms+0x48>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f9      	beq.n	80013c0 <delay_ms+0x24>
		i++;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3f1      	bcc.n	80013be <delay_ms+0x22>
	}
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <SetSysClock>:
void SetSysClock(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 80013f2:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <SetSysClock+0x100>)
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <SetSysClock+0x100>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 80013fe:	bf00      	nop
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <SetSysClock+0x100>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f9      	beq.n	8001400 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <SetSysClock+0x100>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <SetSysClock+0x36>
  {
    status = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	e001      	b.n	8001422 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10b      	bne.n	8001440 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8001428:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <SetSysClock+0x100>)
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <SetSysClock+0x100>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001432:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8001434:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <SetSysClock+0x100>)
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <SetSysClock+0x100>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 800143e:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8001440:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <SetSysClock+0x104>)
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <SetSysClock+0x104>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 800144c:	4a27      	ldr	r2, [pc, #156]	; (80014ec <SetSysClock+0x104>)
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SetSysClock+0x104>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <SetSysClock+0x104>)
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <SetSysClock+0x104>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <SetSysClock+0x100>)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <SetSysClock+0x100>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <SetSysClock+0x108>)
 8001472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001476:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8001478:	bf00      	nop
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <SetSysClock+0x108>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <SetSysClock+0x100>)
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <SetSysClock+0x100>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001490:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <SetSysClock+0x100>)
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <SetSysClock+0x100>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800149c:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <SetSysClock+0x100>)
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <SetSysClock+0x100>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014a8:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <SetSysClock+0x100>)
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SetSysClock+0x100>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b4:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 80014b6:	bf00      	nop
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <SetSysClock+0x100>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f9      	beq.n	80014b8 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <SetSysClock+0x100>)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <SetSysClock+0x100>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f043 0303 	orr.w	r3, r3, #3
 80014ce:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 80014d0:	bf00      	nop
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SetSysClock+0x100>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f9      	beq.n	80014d2 <SetSysClock+0xea>
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40023c00 	.word	0x40023c00
 80014f0:	40007000 	.word	0x40007000

080014f4 <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	// CMSIS Initializations

	SetSysClock();
 80014fa:	f7ff ff75 	bl	80013e8 <SetSysClock>
	SystemCoreClockUpdate();
 80014fe:	f000 f8af 	bl	8001660 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8001502:	f7fe fe49 	bl	8000198 <GPIO_init>
	USART2_init();
 8001506:	f7ff f9d1 	bl	80008ac <USART2_init>
	TIM2_Init();
 800150a:	f7ff f997 	bl	800083c <TIM2_Init>
    sensirion_i2c_init();
 800150e:	f7ff fe6a 	bl	80011e6 <sensirion_i2c_init>

	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	DHT22_init();
 8001512:	f7ff fa89 	bl	8000a28 <DHT22_init>
	//ADC_init();

	USART2_write_buffer("Test");
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <main+0x6c>)
 8001518:	f7ff fa2a 	bl	8000970 <USART2_write_buffer>

	int16_t probe;
    while (1) {
        probe = sgp30_probe();
 800151c:	f7ff ff01 	bl	8001322 <sgp30_probe>
 8001520:	4603      	mov	r3, r0
 8001522:	80fb      	strh	r3, [r7, #6]

        if (probe == STATUS_OK)
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00e      	beq.n	800154a <main+0x56>
            break;

        if (probe == SGP30_ERR_UNSUPPORTED_FEATURE_SET)
 800152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001530:	f113 0f0a 	cmn.w	r3, #10
 8001534:	d102      	bne.n	800153c <main+0x48>
        	USART2_write_buffer("Not working");
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <main+0x70>)
 8001538:	f7ff fa1a 	bl	8000970 <USART2_write_buffer>

    	USART2_write_buffer("Not working");
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <main+0x70>)
 800153e:	f7ff fa17 	bl	8000970 <USART2_write_buffer>
        sensirion_sleep_usec(1000000);
 8001542:	4809      	ldr	r0, [pc, #36]	; (8001568 <main+0x74>)
 8001544:	f7ff fe7b 	bl	800123e <sensirion_sleep_usec>
        probe = sgp30_probe();
 8001548:	e7e8      	b.n	800151c <main+0x28>
            break;
 800154a:	bf00      	nop
    }

	USART2_write_buffer("It works");
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <main+0x78>)
 800154e:	f7ff fa0f 	bl	8000970 <USART2_write_buffer>

	while (1)
	{
		MODBUS_ProcessFrame();
 8001552:	f7ff f855 	bl	8000600 <MODBUS_ProcessFrame>
		delay_ms(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff ff20 	bl	800139c <delay_ms>
		MODBUS_ProcessFrame();
 800155c:	e7f9      	b.n	8001552 <main+0x5e>
 800155e:	bf00      	nop
 8001560:	08002168 	.word	0x08002168
 8001564:	08002170 	.word	0x08002170
 8001568:	000f4240 	.word	0x000f4240
 800156c:	0800217c 	.word	0x0800217c

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001570:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001582:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001596:	f000 f82f 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f000 f909 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff ffa9 	bl	80014f4 <main>
  bx lr
 80015a2:	4770      	bx	lr
  ldr r3, =_sidata
 80015a4:	080023e0 	.word	0x080023e0
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ac:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80015b0:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 80015b4:	20000158 	.word	0x20000158

080015b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_IRQHandler>
	...

080015bc <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <_sbrk+0x34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x16>
		heap_end = & end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x34>)
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <_sbrk+0x38>)
 80015d0:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x34>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_sbrk+0x34>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <_sbrk+0x34>)
 80015e2:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200000c8 	.word	0x200000c8
 80015f4:	20000158 	.word	0x20000158

080015f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80015fc:	4a15      	ldr	r2, [pc, #84]	; (8001654 <SystemInit+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <SystemInit+0x5c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001608:	4912      	ldr	r1, [pc, #72]	; (8001654 <SystemInit+0x5c>)
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <SystemInit+0x5c>)
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <SystemInit+0x60>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001614:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <SystemInit+0x5c>)
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <SystemInit+0x5c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800161e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001622:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001624:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <SystemInit+0x5c>)
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <SystemInit+0x5c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <SystemInit+0x5c>)
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <SystemInit+0x5c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800163a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SystemInit+0x5c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x64>)
 8001644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001648:	609a      	str	r2, [r3, #8]
#endif
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	88ffc00c 	.word	0x88ffc00c
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800167a:	4b48      	ldr	r3, [pc, #288]	; (800179c <SystemCoreClockUpdate+0x13c>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d863      	bhi.n	8001752 <SystemCoreClockUpdate+0xf2>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <SystemCoreClockUpdate+0x30>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016c5 	.word	0x080016c5
 8001694:	08001753 	.word	0x08001753
 8001698:	08001753 	.word	0x08001753
 800169c:	08001753 	.word	0x08001753
 80016a0:	080016e5 	.word	0x080016e5
 80016a4:	08001753 	.word	0x08001753
 80016a8:	08001753 	.word	0x08001753
 80016ac:	08001753 	.word	0x08001753
 80016b0:	080016ed 	.word	0x080016ed
 80016b4:	08001753 	.word	0x08001753
 80016b8:	08001753 	.word	0x08001753
 80016bc:	08001753 	.word	0x08001753
 80016c0:	080016f5 	.word	0x080016f5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <SystemCoreClockUpdate+0x13c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0b5b      	lsrs	r3, r3, #13
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3301      	adds	r3, #1
 80016d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 80016e0:	601a      	str	r2, [r3, #0]
      break;
 80016e2:	e046      	b.n	8001772 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 80016e6:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <SystemCoreClockUpdate+0x144>)
 80016e8:	601a      	str	r2, [r3, #0]
      break;
 80016ea:	e042      	b.n	8001772 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 80016ee:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <SystemCoreClockUpdate+0x144>)
 80016f0:	601a      	str	r2, [r3, #0]
      break;
 80016f2:	e03e      	b.n	8001772 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <SystemCoreClockUpdate+0x13c>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016fc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <SystemCoreClockUpdate+0x13c>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001706:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <SystemCoreClockUpdate+0x148>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0d9b      	lsrs	r3, r3, #22
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <SystemCoreClockUpdate+0x13c>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <SystemCoreClockUpdate+0x144>)
 800172e:	fb02 f203 	mul.w	r2, r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 800173a:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800173c:	e019      	b.n	8001772 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <SystemCoreClockUpdate+0x144>)
 8001742:	fb02 f203 	mul.w	r2, r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 800174e:	6013      	str	r3, [r2, #0]
      break;
 8001750:	e00f      	b.n	8001772 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <SystemCoreClockUpdate+0x13c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0b5b      	lsrs	r3, r3, #13
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	461a      	mov	r2, r3
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 800176e:	601a      	str	r2, [r3, #0]
      break;
 8001770:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <SystemCoreClockUpdate+0x13c>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <SystemCoreClockUpdate+0x14c>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <SystemCoreClockUpdate+0x140>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	20000004 	.word	0x20000004
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	08002388 	.word	0x08002388
 80017ac:	08002394 	.word	0x08002394

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	2500      	movs	r5, #0
 80017b4:	4e0c      	ldr	r6, [pc, #48]	; (80017e8 <__libc_init_array+0x38>)
 80017b6:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b8:	1ba4      	subs	r4, r4, r6
 80017ba:	10a4      	asrs	r4, r4, #2
 80017bc:	42a5      	cmp	r5, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	f000 fc54 	bl	800206c <_init>
 80017c4:	2500      	movs	r5, #0
 80017c6:	4e0a      	ldr	r6, [pc, #40]	; (80017f0 <__libc_init_array+0x40>)
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <__libc_init_array+0x44>)
 80017ca:	1ba4      	subs	r4, r4, r6
 80017cc:	10a4      	asrs	r4, r4, #2
 80017ce:	42a5      	cmp	r5, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d8:	4798      	blx	r3
 80017da:	3501      	adds	r5, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017e2:	4798      	blx	r3
 80017e4:	3501      	adds	r5, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	080023d8 	.word	0x080023d8
 80017ec:	080023d8 	.word	0x080023d8
 80017f0:	080023d8 	.word	0x080023d8
 80017f4:	080023dc 	.word	0x080023dc

080017f8 <sniprintf>:
 80017f8:	b40c      	push	{r2, r3}
 80017fa:	b530      	push	{r4, r5, lr}
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <sniprintf+0x64>)
 80017fe:	1e0c      	subs	r4, r1, #0
 8001800:	b09d      	sub	sp, #116	; 0x74
 8001802:	681d      	ldr	r5, [r3, #0]
 8001804:	da08      	bge.n	8001818 <sniprintf+0x20>
 8001806:	238b      	movs	r3, #139	; 0x8b
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	602b      	str	r3, [r5, #0]
 800180e:	b01d      	add	sp, #116	; 0x74
 8001810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001814:	b002      	add	sp, #8
 8001816:	4770      	bx	lr
 8001818:	f44f 7302 	mov.w	r3, #520	; 0x208
 800181c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001820:	bf0c      	ite	eq
 8001822:	4623      	moveq	r3, r4
 8001824:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001828:	9304      	str	r3, [sp, #16]
 800182a:	9307      	str	r3, [sp, #28]
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9002      	str	r0, [sp, #8]
 8001832:	9006      	str	r0, [sp, #24]
 8001834:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800183a:	ab21      	add	r3, sp, #132	; 0x84
 800183c:	a902      	add	r1, sp, #8
 800183e:	4628      	mov	r0, r5
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	f000 f913 	bl	8001a6c <_svfiprintf_r>
 8001846:	1c43      	adds	r3, r0, #1
 8001848:	bfbc      	itt	lt
 800184a:	238b      	movlt	r3, #139	; 0x8b
 800184c:	602b      	strlt	r3, [r5, #0]
 800184e:	2c00      	cmp	r4, #0
 8001850:	d0dd      	beq.n	800180e <sniprintf+0x16>
 8001852:	2200      	movs	r2, #0
 8001854:	9b02      	ldr	r3, [sp, #8]
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e7d9      	b.n	800180e <sniprintf+0x16>
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <_free_r>:
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	4605      	mov	r5, r0
 8001864:	2900      	cmp	r1, #0
 8001866:	d043      	beq.n	80018f0 <_free_r+0x90>
 8001868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800186c:	1f0c      	subs	r4, r1, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	bfb8      	it	lt
 8001872:	18e4      	addlt	r4, r4, r3
 8001874:	f000 fbc9 	bl	800200a <__malloc_lock>
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <_free_r+0x94>)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	4610      	mov	r0, r2
 800187e:	b933      	cbnz	r3, 800188e <_free_r+0x2e>
 8001880:	6063      	str	r3, [r4, #4]
 8001882:	6014      	str	r4, [r2, #0]
 8001884:	4628      	mov	r0, r5
 8001886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800188a:	f000 bbbf 	b.w	800200c <__malloc_unlock>
 800188e:	42a3      	cmp	r3, r4
 8001890:	d90b      	bls.n	80018aa <_free_r+0x4a>
 8001892:	6821      	ldr	r1, [r4, #0]
 8001894:	1862      	adds	r2, r4, r1
 8001896:	4293      	cmp	r3, r2
 8001898:	bf01      	itttt	eq
 800189a:	681a      	ldreq	r2, [r3, #0]
 800189c:	685b      	ldreq	r3, [r3, #4]
 800189e:	1852      	addeq	r2, r2, r1
 80018a0:	6022      	streq	r2, [r4, #0]
 80018a2:	6063      	str	r3, [r4, #4]
 80018a4:	6004      	str	r4, [r0, #0]
 80018a6:	e7ed      	b.n	8001884 <_free_r+0x24>
 80018a8:	4613      	mov	r3, r2
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	b10a      	cbz	r2, 80018b2 <_free_r+0x52>
 80018ae:	42a2      	cmp	r2, r4
 80018b0:	d9fa      	bls.n	80018a8 <_free_r+0x48>
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	1858      	adds	r0, r3, r1
 80018b6:	42a0      	cmp	r0, r4
 80018b8:	d10b      	bne.n	80018d2 <_free_r+0x72>
 80018ba:	6820      	ldr	r0, [r4, #0]
 80018bc:	4401      	add	r1, r0
 80018be:	1858      	adds	r0, r3, r1
 80018c0:	4282      	cmp	r2, r0
 80018c2:	6019      	str	r1, [r3, #0]
 80018c4:	d1de      	bne.n	8001884 <_free_r+0x24>
 80018c6:	6810      	ldr	r0, [r2, #0]
 80018c8:	6852      	ldr	r2, [r2, #4]
 80018ca:	4401      	add	r1, r0
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	e7d8      	b.n	8001884 <_free_r+0x24>
 80018d2:	d902      	bls.n	80018da <_free_r+0x7a>
 80018d4:	230c      	movs	r3, #12
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	e7d4      	b.n	8001884 <_free_r+0x24>
 80018da:	6820      	ldr	r0, [r4, #0]
 80018dc:	1821      	adds	r1, r4, r0
 80018de:	428a      	cmp	r2, r1
 80018e0:	bf01      	itttt	eq
 80018e2:	6811      	ldreq	r1, [r2, #0]
 80018e4:	6852      	ldreq	r2, [r2, #4]
 80018e6:	1809      	addeq	r1, r1, r0
 80018e8:	6021      	streq	r1, [r4, #0]
 80018ea:	6062      	str	r2, [r4, #4]
 80018ec:	605c      	str	r4, [r3, #4]
 80018ee:	e7c9      	b.n	8001884 <_free_r+0x24>
 80018f0:	bd38      	pop	{r3, r4, r5, pc}
 80018f2:	bf00      	nop
 80018f4:	200000cc 	.word	0x200000cc

080018f8 <_malloc_r>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	1ccd      	adds	r5, r1, #3
 80018fc:	f025 0503 	bic.w	r5, r5, #3
 8001900:	3508      	adds	r5, #8
 8001902:	2d0c      	cmp	r5, #12
 8001904:	bf38      	it	cc
 8001906:	250c      	movcc	r5, #12
 8001908:	2d00      	cmp	r5, #0
 800190a:	4606      	mov	r6, r0
 800190c:	db01      	blt.n	8001912 <_malloc_r+0x1a>
 800190e:	42a9      	cmp	r1, r5
 8001910:	d903      	bls.n	800191a <_malloc_r+0x22>
 8001912:	230c      	movs	r3, #12
 8001914:	6033      	str	r3, [r6, #0]
 8001916:	2000      	movs	r0, #0
 8001918:	bd70      	pop	{r4, r5, r6, pc}
 800191a:	f000 fb76 	bl	800200a <__malloc_lock>
 800191e:	4a23      	ldr	r2, [pc, #140]	; (80019ac <_malloc_r+0xb4>)
 8001920:	6814      	ldr	r4, [r2, #0]
 8001922:	4621      	mov	r1, r4
 8001924:	b991      	cbnz	r1, 800194c <_malloc_r+0x54>
 8001926:	4c22      	ldr	r4, [pc, #136]	; (80019b0 <_malloc_r+0xb8>)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	b91b      	cbnz	r3, 8001934 <_malloc_r+0x3c>
 800192c:	4630      	mov	r0, r6
 800192e:	f000 fb29 	bl	8001f84 <_sbrk_r>
 8001932:	6020      	str	r0, [r4, #0]
 8001934:	4629      	mov	r1, r5
 8001936:	4630      	mov	r0, r6
 8001938:	f000 fb24 	bl	8001f84 <_sbrk_r>
 800193c:	1c43      	adds	r3, r0, #1
 800193e:	d126      	bne.n	800198e <_malloc_r+0x96>
 8001940:	230c      	movs	r3, #12
 8001942:	4630      	mov	r0, r6
 8001944:	6033      	str	r3, [r6, #0]
 8001946:	f000 fb61 	bl	800200c <__malloc_unlock>
 800194a:	e7e4      	b.n	8001916 <_malloc_r+0x1e>
 800194c:	680b      	ldr	r3, [r1, #0]
 800194e:	1b5b      	subs	r3, r3, r5
 8001950:	d41a      	bmi.n	8001988 <_malloc_r+0x90>
 8001952:	2b0b      	cmp	r3, #11
 8001954:	d90f      	bls.n	8001976 <_malloc_r+0x7e>
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	18cc      	adds	r4, r1, r3
 800195a:	50cd      	str	r5, [r1, r3]
 800195c:	4630      	mov	r0, r6
 800195e:	f000 fb55 	bl	800200c <__malloc_unlock>
 8001962:	f104 000b 	add.w	r0, r4, #11
 8001966:	1d23      	adds	r3, r4, #4
 8001968:	f020 0007 	bic.w	r0, r0, #7
 800196c:	1ac3      	subs	r3, r0, r3
 800196e:	d01b      	beq.n	80019a8 <_malloc_r+0xb0>
 8001970:	425a      	negs	r2, r3
 8001972:	50e2      	str	r2, [r4, r3]
 8001974:	bd70      	pop	{r4, r5, r6, pc}
 8001976:	428c      	cmp	r4, r1
 8001978:	bf0b      	itete	eq
 800197a:	6863      	ldreq	r3, [r4, #4]
 800197c:	684b      	ldrne	r3, [r1, #4]
 800197e:	6013      	streq	r3, [r2, #0]
 8001980:	6063      	strne	r3, [r4, #4]
 8001982:	bf18      	it	ne
 8001984:	460c      	movne	r4, r1
 8001986:	e7e9      	b.n	800195c <_malloc_r+0x64>
 8001988:	460c      	mov	r4, r1
 800198a:	6849      	ldr	r1, [r1, #4]
 800198c:	e7ca      	b.n	8001924 <_malloc_r+0x2c>
 800198e:	1cc4      	adds	r4, r0, #3
 8001990:	f024 0403 	bic.w	r4, r4, #3
 8001994:	42a0      	cmp	r0, r4
 8001996:	d005      	beq.n	80019a4 <_malloc_r+0xac>
 8001998:	1a21      	subs	r1, r4, r0
 800199a:	4630      	mov	r0, r6
 800199c:	f000 faf2 	bl	8001f84 <_sbrk_r>
 80019a0:	3001      	adds	r0, #1
 80019a2:	d0cd      	beq.n	8001940 <_malloc_r+0x48>
 80019a4:	6025      	str	r5, [r4, #0]
 80019a6:	e7d9      	b.n	800195c <_malloc_r+0x64>
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	bf00      	nop
 80019ac:	200000cc 	.word	0x200000cc
 80019b0:	200000d0 	.word	0x200000d0

080019b4 <__ssputs_r>:
 80019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	688e      	ldr	r6, [r1, #8]
 80019ba:	4682      	mov	sl, r0
 80019bc:	429e      	cmp	r6, r3
 80019be:	460c      	mov	r4, r1
 80019c0:	4691      	mov	r9, r2
 80019c2:	4698      	mov	r8, r3
 80019c4:	d835      	bhi.n	8001a32 <__ssputs_r+0x7e>
 80019c6:	898a      	ldrh	r2, [r1, #12]
 80019c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80019cc:	d031      	beq.n	8001a32 <__ssputs_r+0x7e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	6825      	ldr	r5, [r4, #0]
 80019d2:	6909      	ldr	r1, [r1, #16]
 80019d4:	1a6f      	subs	r7, r5, r1
 80019d6:	6965      	ldr	r5, [r4, #20]
 80019d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80019e0:	f108 0301 	add.w	r3, r8, #1
 80019e4:	443b      	add	r3, r7
 80019e6:	429d      	cmp	r5, r3
 80019e8:	bf38      	it	cc
 80019ea:	461d      	movcc	r5, r3
 80019ec:	0553      	lsls	r3, r2, #21
 80019ee:	d531      	bpl.n	8001a54 <__ssputs_r+0xa0>
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7ff ff81 	bl	80018f8 <_malloc_r>
 80019f6:	4606      	mov	r6, r0
 80019f8:	b950      	cbnz	r0, 8001a10 <__ssputs_r+0x5c>
 80019fa:	230c      	movs	r3, #12
 80019fc:	f8ca 3000 	str.w	r3, [sl]
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0a:	81a3      	strh	r3, [r4, #12]
 8001a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a10:	463a      	mov	r2, r7
 8001a12:	6921      	ldr	r1, [r4, #16]
 8001a14:	f000 fad4 	bl	8001fc0 <memcpy>
 8001a18:	89a3      	ldrh	r3, [r4, #12]
 8001a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a22:	81a3      	strh	r3, [r4, #12]
 8001a24:	6126      	str	r6, [r4, #16]
 8001a26:	443e      	add	r6, r7
 8001a28:	6026      	str	r6, [r4, #0]
 8001a2a:	4646      	mov	r6, r8
 8001a2c:	6165      	str	r5, [r4, #20]
 8001a2e:	1bed      	subs	r5, r5, r7
 8001a30:	60a5      	str	r5, [r4, #8]
 8001a32:	4546      	cmp	r6, r8
 8001a34:	bf28      	it	cs
 8001a36:	4646      	movcs	r6, r8
 8001a38:	4649      	mov	r1, r9
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	f000 faca 	bl	8001fd6 <memmove>
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	2000      	movs	r0, #0
 8001a46:	1b9b      	subs	r3, r3, r6
 8001a48:	60a3      	str	r3, [r4, #8]
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	441e      	add	r6, r3
 8001a4e:	6026      	str	r6, [r4, #0]
 8001a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a54:	462a      	mov	r2, r5
 8001a56:	f000 fada 	bl	800200e <_realloc_r>
 8001a5a:	4606      	mov	r6, r0
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1e1      	bne.n	8001a24 <__ssputs_r+0x70>
 8001a60:	6921      	ldr	r1, [r4, #16]
 8001a62:	4650      	mov	r0, sl
 8001a64:	f7ff fefc 	bl	8001860 <_free_r>
 8001a68:	e7c7      	b.n	80019fa <__ssputs_r+0x46>
	...

08001a6c <_svfiprintf_r>:
 8001a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a70:	b09d      	sub	sp, #116	; 0x74
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	898b      	ldrh	r3, [r1, #12]
 8001a76:	4680      	mov	r8, r0
 8001a78:	061c      	lsls	r4, r3, #24
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4616      	mov	r6, r2
 8001a7e:	d50f      	bpl.n	8001aa0 <_svfiprintf_r+0x34>
 8001a80:	690b      	ldr	r3, [r1, #16]
 8001a82:	b96b      	cbnz	r3, 8001aa0 <_svfiprintf_r+0x34>
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	f7ff ff37 	bl	80018f8 <_malloc_r>
 8001a8a:	6028      	str	r0, [r5, #0]
 8001a8c:	6128      	str	r0, [r5, #16]
 8001a8e:	b928      	cbnz	r0, 8001a9c <_svfiprintf_r+0x30>
 8001a90:	230c      	movs	r3, #12
 8001a92:	f8c8 3000 	str.w	r3, [r8]
 8001a96:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9a:	e0c4      	b.n	8001c26 <_svfiprintf_r+0x1ba>
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	616b      	str	r3, [r5, #20]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001aaa:	2330      	movs	r3, #48	; 0x30
 8001aac:	f04f 0b01 	mov.w	fp, #1
 8001ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ab4:	4637      	mov	r7, r6
 8001ab6:	463c      	mov	r4, r7
 8001ab8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d13c      	bne.n	8001b3a <_svfiprintf_r+0xce>
 8001ac0:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ac4:	d00b      	beq.n	8001ade <_svfiprintf_r+0x72>
 8001ac6:	4653      	mov	r3, sl
 8001ac8:	4632      	mov	r2, r6
 8001aca:	4629      	mov	r1, r5
 8001acc:	4640      	mov	r0, r8
 8001ace:	f7ff ff71 	bl	80019b4 <__ssputs_r>
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	f000 80a2 	beq.w	8001c1c <_svfiprintf_r+0x1b0>
 8001ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ada:	4453      	add	r3, sl
 8001adc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ade:	783b      	ldrb	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 809b 	beq.w	8001c1c <_svfiprintf_r+0x1b0>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	9304      	str	r3, [sp, #16]
 8001aee:	9307      	str	r3, [sp, #28]
 8001af0:	9205      	str	r2, [sp, #20]
 8001af2:	9306      	str	r3, [sp, #24]
 8001af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001af8:	931a      	str	r3, [sp, #104]	; 0x68
 8001afa:	2205      	movs	r2, #5
 8001afc:	7821      	ldrb	r1, [r4, #0]
 8001afe:	4850      	ldr	r0, [pc, #320]	; (8001c40 <_svfiprintf_r+0x1d4>)
 8001b00:	f000 fa50 	bl	8001fa4 <memchr>
 8001b04:	1c67      	adds	r7, r4, #1
 8001b06:	9b04      	ldr	r3, [sp, #16]
 8001b08:	b9d8      	cbnz	r0, 8001b42 <_svfiprintf_r+0xd6>
 8001b0a:	06d9      	lsls	r1, r3, #27
 8001b0c:	bf44      	itt	mi
 8001b0e:	2220      	movmi	r2, #32
 8001b10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b14:	071a      	lsls	r2, r3, #28
 8001b16:	bf44      	itt	mi
 8001b18:	222b      	movmi	r2, #43	; 0x2b
 8001b1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b1e:	7822      	ldrb	r2, [r4, #0]
 8001b20:	2a2a      	cmp	r2, #42	; 0x2a
 8001b22:	d016      	beq.n	8001b52 <_svfiprintf_r+0xe6>
 8001b24:	2100      	movs	r1, #0
 8001b26:	200a      	movs	r0, #10
 8001b28:	9a07      	ldr	r2, [sp, #28]
 8001b2a:	4627      	mov	r7, r4
 8001b2c:	783b      	ldrb	r3, [r7, #0]
 8001b2e:	3401      	adds	r4, #1
 8001b30:	3b30      	subs	r3, #48	; 0x30
 8001b32:	2b09      	cmp	r3, #9
 8001b34:	d950      	bls.n	8001bd8 <_svfiprintf_r+0x16c>
 8001b36:	b1c9      	cbz	r1, 8001b6c <_svfiprintf_r+0x100>
 8001b38:	e011      	b.n	8001b5e <_svfiprintf_r+0xf2>
 8001b3a:	2b25      	cmp	r3, #37	; 0x25
 8001b3c:	d0c0      	beq.n	8001ac0 <_svfiprintf_r+0x54>
 8001b3e:	4627      	mov	r7, r4
 8001b40:	e7b9      	b.n	8001ab6 <_svfiprintf_r+0x4a>
 8001b42:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <_svfiprintf_r+0x1d4>)
 8001b44:	463c      	mov	r4, r7
 8001b46:	1a80      	subs	r0, r0, r2
 8001b48:	fa0b f000 	lsl.w	r0, fp, r0
 8001b4c:	4318      	orrs	r0, r3
 8001b4e:	9004      	str	r0, [sp, #16]
 8001b50:	e7d3      	b.n	8001afa <_svfiprintf_r+0x8e>
 8001b52:	9a03      	ldr	r2, [sp, #12]
 8001b54:	1d11      	adds	r1, r2, #4
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	9103      	str	r1, [sp, #12]
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	db01      	blt.n	8001b62 <_svfiprintf_r+0xf6>
 8001b5e:	9207      	str	r2, [sp, #28]
 8001b60:	e004      	b.n	8001b6c <_svfiprintf_r+0x100>
 8001b62:	4252      	negs	r2, r2
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	9207      	str	r2, [sp, #28]
 8001b6a:	9304      	str	r3, [sp, #16]
 8001b6c:	783b      	ldrb	r3, [r7, #0]
 8001b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b70:	d10d      	bne.n	8001b8e <_svfiprintf_r+0x122>
 8001b72:	787b      	ldrb	r3, [r7, #1]
 8001b74:	1c79      	adds	r1, r7, #1
 8001b76:	2b2a      	cmp	r3, #42	; 0x2a
 8001b78:	d132      	bne.n	8001be0 <_svfiprintf_r+0x174>
 8001b7a:	9b03      	ldr	r3, [sp, #12]
 8001b7c:	3702      	adds	r7, #2
 8001b7e:	1d1a      	adds	r2, r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	9203      	str	r2, [sp, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bfb8      	it	lt
 8001b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b8c:	9305      	str	r3, [sp, #20]
 8001b8e:	4c2d      	ldr	r4, [pc, #180]	; (8001c44 <_svfiprintf_r+0x1d8>)
 8001b90:	2203      	movs	r2, #3
 8001b92:	7839      	ldrb	r1, [r7, #0]
 8001b94:	4620      	mov	r0, r4
 8001b96:	f000 fa05 	bl	8001fa4 <memchr>
 8001b9a:	b138      	cbz	r0, 8001bac <_svfiprintf_r+0x140>
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	1b00      	subs	r0, r0, r4
 8001ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ba4:	9b04      	ldr	r3, [sp, #16]
 8001ba6:	3701      	adds	r7, #1
 8001ba8:	4303      	orrs	r3, r0
 8001baa:	9304      	str	r3, [sp, #16]
 8001bac:	7839      	ldrb	r1, [r7, #0]
 8001bae:	2206      	movs	r2, #6
 8001bb0:	4825      	ldr	r0, [pc, #148]	; (8001c48 <_svfiprintf_r+0x1dc>)
 8001bb2:	1c7e      	adds	r6, r7, #1
 8001bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bb8:	f000 f9f4 	bl	8001fa4 <memchr>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d035      	beq.n	8001c2c <_svfiprintf_r+0x1c0>
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <_svfiprintf_r+0x1e0>)
 8001bc2:	b9fb      	cbnz	r3, 8001c04 <_svfiprintf_r+0x198>
 8001bc4:	9b03      	ldr	r3, [sp, #12]
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	f023 0307 	bic.w	r3, r3, #7
 8001bcc:	3308      	adds	r3, #8
 8001bce:	9303      	str	r3, [sp, #12]
 8001bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bd2:	444b      	add	r3, r9
 8001bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd6:	e76d      	b.n	8001ab4 <_svfiprintf_r+0x48>
 8001bd8:	fb00 3202 	mla	r2, r0, r2, r3
 8001bdc:	2101      	movs	r1, #1
 8001bde:	e7a4      	b.n	8001b2a <_svfiprintf_r+0xbe>
 8001be0:	2300      	movs	r3, #0
 8001be2:	240a      	movs	r4, #10
 8001be4:	4618      	mov	r0, r3
 8001be6:	9305      	str	r3, [sp, #20]
 8001be8:	460f      	mov	r7, r1
 8001bea:	783a      	ldrb	r2, [r7, #0]
 8001bec:	3101      	adds	r1, #1
 8001bee:	3a30      	subs	r2, #48	; 0x30
 8001bf0:	2a09      	cmp	r2, #9
 8001bf2:	d903      	bls.n	8001bfc <_svfiprintf_r+0x190>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ca      	beq.n	8001b8e <_svfiprintf_r+0x122>
 8001bf8:	9005      	str	r0, [sp, #20]
 8001bfa:	e7c8      	b.n	8001b8e <_svfiprintf_r+0x122>
 8001bfc:	fb04 2000 	mla	r0, r4, r0, r2
 8001c00:	2301      	movs	r3, #1
 8001c02:	e7f1      	b.n	8001be8 <_svfiprintf_r+0x17c>
 8001c04:	ab03      	add	r3, sp, #12
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	462a      	mov	r2, r5
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_svfiprintf_r+0x1e4>)
 8001c0c:	a904      	add	r1, sp, #16
 8001c0e:	4640      	mov	r0, r8
 8001c10:	f3af 8000 	nop.w
 8001c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c18:	4681      	mov	r9, r0
 8001c1a:	d1d9      	bne.n	8001bd0 <_svfiprintf_r+0x164>
 8001c1c:	89ab      	ldrh	r3, [r5, #12]
 8001c1e:	065b      	lsls	r3, r3, #25
 8001c20:	f53f af39 	bmi.w	8001a96 <_svfiprintf_r+0x2a>
 8001c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c26:	b01d      	add	sp, #116	; 0x74
 8001c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c2c:	ab03      	add	r3, sp, #12
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	462a      	mov	r2, r5
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_svfiprintf_r+0x1e4>)
 8001c34:	a904      	add	r1, sp, #16
 8001c36:	4640      	mov	r0, r8
 8001c38:	f000 f884 	bl	8001d44 <_printf_i>
 8001c3c:	e7ea      	b.n	8001c14 <_svfiprintf_r+0x1a8>
 8001c3e:	bf00      	nop
 8001c40:	080023a4 	.word	0x080023a4
 8001c44:	080023aa 	.word	0x080023aa
 8001c48:	080023ae 	.word	0x080023ae
 8001c4c:	00000000 	.word	0x00000000
 8001c50:	080019b5 	.word	0x080019b5

08001c54 <_printf_common>:
 8001c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c58:	4691      	mov	r9, r2
 8001c5a:	461f      	mov	r7, r3
 8001c5c:	688a      	ldr	r2, [r1, #8]
 8001c5e:	690b      	ldr	r3, [r1, #16]
 8001c60:	4606      	mov	r6, r0
 8001c62:	4293      	cmp	r3, r2
 8001c64:	bfb8      	it	lt
 8001c66:	4613      	movlt	r3, r2
 8001c68:	f8c9 3000 	str.w	r3, [r9]
 8001c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c70:	460c      	mov	r4, r1
 8001c72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c76:	b112      	cbz	r2, 8001c7e <_printf_common+0x2a>
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f8c9 3000 	str.w	r3, [r9]
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	0699      	lsls	r1, r3, #26
 8001c82:	bf42      	ittt	mi
 8001c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001c88:	3302      	addmi	r3, #2
 8001c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8001c8e:	6825      	ldr	r5, [r4, #0]
 8001c90:	f015 0506 	ands.w	r5, r5, #6
 8001c94:	d107      	bne.n	8001ca6 <_printf_common+0x52>
 8001c96:	f104 0a19 	add.w	sl, r4, #25
 8001c9a:	68e3      	ldr	r3, [r4, #12]
 8001c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	429d      	cmp	r5, r3
 8001ca4:	db2a      	blt.n	8001cfc <_printf_common+0xa8>
 8001ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	3300      	adds	r3, #0
 8001cae:	bf18      	it	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	0692      	lsls	r2, r2, #26
 8001cb4:	d42f      	bmi.n	8001d16 <_printf_common+0xc2>
 8001cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cba:	4639      	mov	r1, r7
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	47c0      	blx	r8
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d022      	beq.n	8001d0a <_printf_common+0xb6>
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	68e5      	ldr	r5, [r4, #12]
 8001cc8:	f003 0306 	and.w	r3, r3, #6
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	bf18      	it	ne
 8001cd0:	2500      	movne	r5, #0
 8001cd2:	f8d9 2000 	ldr.w	r2, [r9]
 8001cd6:	f04f 0900 	mov.w	r9, #0
 8001cda:	bf08      	it	eq
 8001cdc:	1aad      	subeq	r5, r5, r2
 8001cde:	68a3      	ldr	r3, [r4, #8]
 8001ce0:	6922      	ldr	r2, [r4, #16]
 8001ce2:	bf08      	it	eq
 8001ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	bfc4      	itt	gt
 8001cec:	1a9b      	subgt	r3, r3, r2
 8001cee:	18ed      	addgt	r5, r5, r3
 8001cf0:	341a      	adds	r4, #26
 8001cf2:	454d      	cmp	r5, r9
 8001cf4:	d11b      	bne.n	8001d2e <_printf_common+0xda>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	4652      	mov	r2, sl
 8001d00:	4639      	mov	r1, r7
 8001d02:	4630      	mov	r0, r6
 8001d04:	47c0      	blx	r8
 8001d06:	3001      	adds	r0, #1
 8001d08:	d103      	bne.n	8001d12 <_printf_common+0xbe>
 8001d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d12:	3501      	adds	r5, #1
 8001d14:	e7c1      	b.n	8001c9a <_printf_common+0x46>
 8001d16:	2030      	movs	r0, #48	; 0x30
 8001d18:	18e1      	adds	r1, r4, r3
 8001d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d24:	4422      	add	r2, r4
 8001d26:	3302      	adds	r3, #2
 8001d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d2c:	e7c3      	b.n	8001cb6 <_printf_common+0x62>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4622      	mov	r2, r4
 8001d32:	4639      	mov	r1, r7
 8001d34:	4630      	mov	r0, r6
 8001d36:	47c0      	blx	r8
 8001d38:	3001      	adds	r0, #1
 8001d3a:	d0e6      	beq.n	8001d0a <_printf_common+0xb6>
 8001d3c:	f109 0901 	add.w	r9, r9, #1
 8001d40:	e7d7      	b.n	8001cf2 <_printf_common+0x9e>
	...

08001d44 <_printf_i>:
 8001d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d48:	4617      	mov	r7, r2
 8001d4a:	7e0a      	ldrb	r2, [r1, #24]
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	2a6e      	cmp	r2, #110	; 0x6e
 8001d50:	4698      	mov	r8, r3
 8001d52:	4606      	mov	r6, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d58:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001d5c:	f000 80bc 	beq.w	8001ed8 <_printf_i+0x194>
 8001d60:	d81a      	bhi.n	8001d98 <_printf_i+0x54>
 8001d62:	2a63      	cmp	r2, #99	; 0x63
 8001d64:	d02e      	beq.n	8001dc4 <_printf_i+0x80>
 8001d66:	d80a      	bhi.n	8001d7e <_printf_i+0x3a>
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	f000 80c8 	beq.w	8001efe <_printf_i+0x1ba>
 8001d6e:	2a58      	cmp	r2, #88	; 0x58
 8001d70:	f000 808a 	beq.w	8001e88 <_printf_i+0x144>
 8001d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001d7c:	e02a      	b.n	8001dd4 <_printf_i+0x90>
 8001d7e:	2a64      	cmp	r2, #100	; 0x64
 8001d80:	d001      	beq.n	8001d86 <_printf_i+0x42>
 8001d82:	2a69      	cmp	r2, #105	; 0x69
 8001d84:	d1f6      	bne.n	8001d74 <_printf_i+0x30>
 8001d86:	6821      	ldr	r1, [r4, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d8e:	d023      	beq.n	8001dd8 <_printf_i+0x94>
 8001d90:	1d11      	adds	r1, r2, #4
 8001d92:	6019      	str	r1, [r3, #0]
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	e027      	b.n	8001de8 <_printf_i+0xa4>
 8001d98:	2a73      	cmp	r2, #115	; 0x73
 8001d9a:	f000 80b4 	beq.w	8001f06 <_printf_i+0x1c2>
 8001d9e:	d808      	bhi.n	8001db2 <_printf_i+0x6e>
 8001da0:	2a6f      	cmp	r2, #111	; 0x6f
 8001da2:	d02a      	beq.n	8001dfa <_printf_i+0xb6>
 8001da4:	2a70      	cmp	r2, #112	; 0x70
 8001da6:	d1e5      	bne.n	8001d74 <_printf_i+0x30>
 8001da8:	680a      	ldr	r2, [r1, #0]
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	600a      	str	r2, [r1, #0]
 8001db0:	e003      	b.n	8001dba <_printf_i+0x76>
 8001db2:	2a75      	cmp	r2, #117	; 0x75
 8001db4:	d021      	beq.n	8001dfa <_printf_i+0xb6>
 8001db6:	2a78      	cmp	r2, #120	; 0x78
 8001db8:	d1dc      	bne.n	8001d74 <_printf_i+0x30>
 8001dba:	2278      	movs	r2, #120	; 0x78
 8001dbc:	496f      	ldr	r1, [pc, #444]	; (8001f7c <_printf_i+0x238>)
 8001dbe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001dc2:	e064      	b.n	8001e8e <_printf_i+0x14a>
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001dca:	1d11      	adds	r1, r2, #4
 8001dcc:	6019      	str	r1, [r3, #0]
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0a3      	b.n	8001f20 <_printf_i+0x1dc>
 8001dd8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ddc:	f102 0104 	add.w	r1, r2, #4
 8001de0:	6019      	str	r1, [r3, #0]
 8001de2:	d0d7      	beq.n	8001d94 <_printf_i+0x50>
 8001de4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da03      	bge.n	8001df4 <_printf_i+0xb0>
 8001dec:	222d      	movs	r2, #45	; 0x2d
 8001dee:	425b      	negs	r3, r3
 8001df0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001df4:	4962      	ldr	r1, [pc, #392]	; (8001f80 <_printf_i+0x23c>)
 8001df6:	220a      	movs	r2, #10
 8001df8:	e017      	b.n	8001e2a <_printf_i+0xe6>
 8001dfa:	6820      	ldr	r0, [r4, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e02:	d003      	beq.n	8001e0c <_printf_i+0xc8>
 8001e04:	1d08      	adds	r0, r1, #4
 8001e06:	6018      	str	r0, [r3, #0]
 8001e08:	680b      	ldr	r3, [r1, #0]
 8001e0a:	e006      	b.n	8001e1a <_printf_i+0xd6>
 8001e0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e10:	f101 0004 	add.w	r0, r1, #4
 8001e14:	6018      	str	r0, [r3, #0]
 8001e16:	d0f7      	beq.n	8001e08 <_printf_i+0xc4>
 8001e18:	880b      	ldrh	r3, [r1, #0]
 8001e1a:	2a6f      	cmp	r2, #111	; 0x6f
 8001e1c:	bf14      	ite	ne
 8001e1e:	220a      	movne	r2, #10
 8001e20:	2208      	moveq	r2, #8
 8001e22:	4957      	ldr	r1, [pc, #348]	; (8001f80 <_printf_i+0x23c>)
 8001e24:	2000      	movs	r0, #0
 8001e26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001e2a:	6865      	ldr	r5, [r4, #4]
 8001e2c:	2d00      	cmp	r5, #0
 8001e2e:	60a5      	str	r5, [r4, #8]
 8001e30:	f2c0 809c 	blt.w	8001f6c <_printf_i+0x228>
 8001e34:	6820      	ldr	r0, [r4, #0]
 8001e36:	f020 0004 	bic.w	r0, r0, #4
 8001e3a:	6020      	str	r0, [r4, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d13f      	bne.n	8001ec0 <_printf_i+0x17c>
 8001e40:	2d00      	cmp	r5, #0
 8001e42:	f040 8095 	bne.w	8001f70 <_printf_i+0x22c>
 8001e46:	4675      	mov	r5, lr
 8001e48:	2a08      	cmp	r2, #8
 8001e4a:	d10b      	bne.n	8001e64 <_printf_i+0x120>
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	07da      	lsls	r2, r3, #31
 8001e50:	d508      	bpl.n	8001e64 <_printf_i+0x120>
 8001e52:	6923      	ldr	r3, [r4, #16]
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bfde      	ittt	le
 8001e5a:	2330      	movle	r3, #48	; 0x30
 8001e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e64:	ebae 0305 	sub.w	r3, lr, r5
 8001e68:	6123      	str	r3, [r4, #16]
 8001e6a:	f8cd 8000 	str.w	r8, [sp]
 8001e6e:	463b      	mov	r3, r7
 8001e70:	aa03      	add	r2, sp, #12
 8001e72:	4621      	mov	r1, r4
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7ff feed 	bl	8001c54 <_printf_common>
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	d155      	bne.n	8001f2a <_printf_i+0x1e6>
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e82:	b005      	add	sp, #20
 8001e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e88:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001e8c:	493c      	ldr	r1, [pc, #240]	; (8001f80 <_printf_i+0x23c>)
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e96:	f100 0504 	add.w	r5, r0, #4
 8001e9a:	601d      	str	r5, [r3, #0]
 8001e9c:	d001      	beq.n	8001ea2 <_printf_i+0x15e>
 8001e9e:	6803      	ldr	r3, [r0, #0]
 8001ea0:	e002      	b.n	8001ea8 <_printf_i+0x164>
 8001ea2:	0655      	lsls	r5, r2, #25
 8001ea4:	d5fb      	bpl.n	8001e9e <_printf_i+0x15a>
 8001ea6:	8803      	ldrh	r3, [r0, #0]
 8001ea8:	07d0      	lsls	r0, r2, #31
 8001eaa:	bf44      	itt	mi
 8001eac:	f042 0220 	orrmi.w	r2, r2, #32
 8001eb0:	6022      	strmi	r2, [r4, #0]
 8001eb2:	b91b      	cbnz	r3, 8001ebc <_printf_i+0x178>
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	f022 0220 	bic.w	r2, r2, #32
 8001eba:	6022      	str	r2, [r4, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	e7b1      	b.n	8001e24 <_printf_i+0xe0>
 8001ec0:	4675      	mov	r5, lr
 8001ec2:	fbb3 f0f2 	udiv	r0, r3, r2
 8001ec6:	fb02 3310 	mls	r3, r2, r0, r3
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d1f5      	bne.n	8001ec2 <_printf_i+0x17e>
 8001ed6:	e7b7      	b.n	8001e48 <_printf_i+0x104>
 8001ed8:	6808      	ldr	r0, [r1, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ee0:	6949      	ldr	r1, [r1, #20]
 8001ee2:	d004      	beq.n	8001eee <_printf_i+0x1aa>
 8001ee4:	1d10      	adds	r0, r2, #4
 8001ee6:	6018      	str	r0, [r3, #0]
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	6019      	str	r1, [r3, #0]
 8001eec:	e007      	b.n	8001efe <_printf_i+0x1ba>
 8001eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ef2:	f102 0004 	add.w	r0, r2, #4
 8001ef6:	6018      	str	r0, [r3, #0]
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	d0f6      	beq.n	8001eea <_printf_i+0x1a6>
 8001efc:	8019      	strh	r1, [r3, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	4675      	mov	r5, lr
 8001f02:	6123      	str	r3, [r4, #16]
 8001f04:	e7b1      	b.n	8001e6a <_printf_i+0x126>
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	1d11      	adds	r1, r2, #4
 8001f0a:	6019      	str	r1, [r3, #0]
 8001f0c:	6815      	ldr	r5, [r2, #0]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6862      	ldr	r2, [r4, #4]
 8001f12:	4628      	mov	r0, r5
 8001f14:	f000 f846 	bl	8001fa4 <memchr>
 8001f18:	b108      	cbz	r0, 8001f1e <_printf_i+0x1da>
 8001f1a:	1b40      	subs	r0, r0, r5
 8001f1c:	6060      	str	r0, [r4, #4]
 8001f1e:	6863      	ldr	r3, [r4, #4]
 8001f20:	6123      	str	r3, [r4, #16]
 8001f22:	2300      	movs	r3, #0
 8001f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f28:	e79f      	b.n	8001e6a <_printf_i+0x126>
 8001f2a:	6923      	ldr	r3, [r4, #16]
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	4639      	mov	r1, r7
 8001f30:	4630      	mov	r0, r6
 8001f32:	47c0      	blx	r8
 8001f34:	3001      	adds	r0, #1
 8001f36:	d0a2      	beq.n	8001e7e <_printf_i+0x13a>
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	079b      	lsls	r3, r3, #30
 8001f3c:	d507      	bpl.n	8001f4e <_printf_i+0x20a>
 8001f3e:	2500      	movs	r5, #0
 8001f40:	f104 0919 	add.w	r9, r4, #25
 8001f44:	68e3      	ldr	r3, [r4, #12]
 8001f46:	9a03      	ldr	r2, [sp, #12]
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	429d      	cmp	r5, r3
 8001f4c:	db05      	blt.n	8001f5a <_printf_i+0x216>
 8001f4e:	68e0      	ldr	r0, [r4, #12]
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	4298      	cmp	r0, r3
 8001f54:	bfb8      	it	lt
 8001f56:	4618      	movlt	r0, r3
 8001f58:	e793      	b.n	8001e82 <_printf_i+0x13e>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	4639      	mov	r1, r7
 8001f60:	4630      	mov	r0, r6
 8001f62:	47c0      	blx	r8
 8001f64:	3001      	adds	r0, #1
 8001f66:	d08a      	beq.n	8001e7e <_printf_i+0x13a>
 8001f68:	3501      	adds	r5, #1
 8001f6a:	e7eb      	b.n	8001f44 <_printf_i+0x200>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1a7      	bne.n	8001ec0 <_printf_i+0x17c>
 8001f70:	780b      	ldrb	r3, [r1, #0]
 8001f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f7a:	e765      	b.n	8001e48 <_printf_i+0x104>
 8001f7c:	080023c6 	.word	0x080023c6
 8001f80:	080023b5 	.word	0x080023b5

08001f84 <_sbrk_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	2300      	movs	r3, #0
 8001f88:	4c05      	ldr	r4, [pc, #20]	; (8001fa0 <_sbrk_r+0x1c>)
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	6023      	str	r3, [r4, #0]
 8001f90:	f7ff fb14 	bl	80015bc <_sbrk>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_sbrk_r+0x1a>
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_sbrk_r+0x1a>
 8001f9c:	602b      	str	r3, [r5, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	20000154 	.word	0x20000154

08001fa4 <memchr>:
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	b2c9      	uxtb	r1, r1
 8001fa8:	4402      	add	r2, r0
 8001faa:	4290      	cmp	r0, r2
 8001fac:	4603      	mov	r3, r0
 8001fae:	d101      	bne.n	8001fb4 <memchr+0x10>
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	bd10      	pop	{r4, pc}
 8001fb4:	781c      	ldrb	r4, [r3, #0]
 8001fb6:	3001      	adds	r0, #1
 8001fb8:	428c      	cmp	r4, r1
 8001fba:	d1f6      	bne.n	8001faa <memchr+0x6>
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd10      	pop	{r4, pc}

08001fc0 <memcpy>:
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	1e43      	subs	r3, r0, #1
 8001fc4:	440a      	add	r2, r1
 8001fc6:	4291      	cmp	r1, r2
 8001fc8:	d100      	bne.n	8001fcc <memcpy+0xc>
 8001fca:	bd10      	pop	{r4, pc}
 8001fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fd4:	e7f7      	b.n	8001fc6 <memcpy+0x6>

08001fd6 <memmove>:
 8001fd6:	4288      	cmp	r0, r1
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	eb01 0302 	add.w	r3, r1, r2
 8001fde:	d803      	bhi.n	8001fe8 <memmove+0x12>
 8001fe0:	1e42      	subs	r2, r0, #1
 8001fe2:	4299      	cmp	r1, r3
 8001fe4:	d10c      	bne.n	8002000 <memmove+0x2a>
 8001fe6:	bd10      	pop	{r4, pc}
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	d2f9      	bcs.n	8001fe0 <memmove+0xa>
 8001fec:	1881      	adds	r1, r0, r2
 8001fee:	1ad2      	subs	r2, r2, r3
 8001ff0:	42d3      	cmn	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <memmove+0x20>
 8001ff4:	bd10      	pop	{r4, pc}
 8001ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ffa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001ffe:	e7f7      	b.n	8001ff0 <memmove+0x1a>
 8002000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002004:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002008:	e7eb      	b.n	8001fe2 <memmove+0xc>

0800200a <__malloc_lock>:
 800200a:	4770      	bx	lr

0800200c <__malloc_unlock>:
 800200c:	4770      	bx	lr

0800200e <_realloc_r>:
 800200e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002010:	4607      	mov	r7, r0
 8002012:	4614      	mov	r4, r2
 8002014:	460e      	mov	r6, r1
 8002016:	b921      	cbnz	r1, 8002022 <_realloc_r+0x14>
 8002018:	4611      	mov	r1, r2
 800201a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800201e:	f7ff bc6b 	b.w	80018f8 <_malloc_r>
 8002022:	b922      	cbnz	r2, 800202e <_realloc_r+0x20>
 8002024:	f7ff fc1c 	bl	8001860 <_free_r>
 8002028:	4625      	mov	r5, r4
 800202a:	4628      	mov	r0, r5
 800202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202e:	f000 f814 	bl	800205a <_malloc_usable_size_r>
 8002032:	4284      	cmp	r4, r0
 8002034:	d90f      	bls.n	8002056 <_realloc_r+0x48>
 8002036:	4621      	mov	r1, r4
 8002038:	4638      	mov	r0, r7
 800203a:	f7ff fc5d 	bl	80018f8 <_malloc_r>
 800203e:	4605      	mov	r5, r0
 8002040:	2800      	cmp	r0, #0
 8002042:	d0f2      	beq.n	800202a <_realloc_r+0x1c>
 8002044:	4631      	mov	r1, r6
 8002046:	4622      	mov	r2, r4
 8002048:	f7ff ffba 	bl	8001fc0 <memcpy>
 800204c:	4631      	mov	r1, r6
 800204e:	4638      	mov	r0, r7
 8002050:	f7ff fc06 	bl	8001860 <_free_r>
 8002054:	e7e9      	b.n	800202a <_realloc_r+0x1c>
 8002056:	4635      	mov	r5, r6
 8002058:	e7e7      	b.n	800202a <_realloc_r+0x1c>

0800205a <_malloc_usable_size_r>:
 800205a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800205e:	2800      	cmp	r0, #0
 8002060:	f1a0 0004 	sub.w	r0, r0, #4
 8002064:	bfbc      	itt	lt
 8002066:	580b      	ldrlt	r3, [r1, r0]
 8002068:	18c0      	addlt	r0, r0, r3
 800206a:	4770      	bx	lr

0800206c <_init>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

08002078 <_fini>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr

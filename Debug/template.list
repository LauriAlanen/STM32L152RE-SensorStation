
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000069c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080007f4  080007f4  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080007f8  080007f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080007fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000050  20000008  08000804  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000058  08000804  00020058  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   000034a6  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ace  00000000  00000000  000234d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001b0  00000000  00000000  00023fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001230  00000000  00000000  00024280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eba  00000000  00000000  000254b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002636a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000040c  00000000  00000000  000263e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	080007c0 	.word	0x080007c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	080007c0 	.word	0x080007c0

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 f900 	bl	8000390 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <MODBUS_CheckAdress>:

	return wCRCWord;
}

uint8_t MODBUS_CheckAdress(uint8_t *c)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SLAVE_COUNT; ++i)
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e014      	b.n	80001fc <MODBUS_CheckAdress+0x38>
	{
		if (MODBUS_Slaves[i] == *c)
 80001d2:	4a15      	ldr	r2, [pc, #84]	; (8000228 <MODBUS_CheckAdress+0x64>)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	4413      	add	r3, r2
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d109      	bne.n	80001f6 <MODBUS_CheckAdress+0x32>
		{
			mFlag = 1;
 80001e2:	4b12      	ldr	r3, [pc, #72]	; (800022c <MODBUS_CheckAdress+0x68>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR |= GPIO_ODR_ODR_5; //0010 0000 set bit 5. p186
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f043 0320 	orr.w	r3, r3, #32
 80001f2:	6153      	str	r3, [r2, #20]
			break;
 80001f4:	e005      	b.n	8000202 <MODBUS_CheckAdress+0x3e>
	for (int i = 0; i < SLAVE_COUNT; ++i)
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	2b02      	cmp	r3, #2
 8000200:	dde7      	ble.n	80001d2 <MODBUS_CheckAdress+0xe>
		}
	}

	if (mFlag != 1)
 8000202:	4b0a      	ldr	r3, [pc, #40]	; (800022c <MODBUS_CheckAdress+0x68>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d007      	beq.n	800021a <MODBUS_CheckAdress+0x56>
	{
		GPIOA->ODR &= ~GPIO_ODR_ODR_5; //0000 0000 clear bit 5. p186
 800020a:	4a09      	ldr	r2, [pc, #36]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	f023 0320 	bic.w	r3, r3, #32
 8000214:	6153      	str	r3, [r2, #20]
		return 1;
 8000216:	2301      	movs	r3, #1
 8000218:	e000      	b.n	800021c <MODBUS_CheckAdress+0x58>
	}

	return 0;
 800021a:	2300      	movs	r3, #0
}
 800021c:	4618      	mov	r0, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	20000024 	.word	0x20000024
 8000230:	40020000 	.word	0x40020000

08000234 <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	uint8_t c = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
	uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
	static uint8_t frame_index = 0;

	if(USART2->SR & 0x0020) 		//if data available in DR register. p737
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MODBUS_IRQHandler+0x3c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f003 0320 	and.w	r3, r3, #32
 8000246:	2b00      	cmp	r3, #0
 8000248:	d00e      	beq.n	8000268 <MODBUS_IRQHandler+0x34>
	{
		c = USART2->DR;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MODBUS_IRQHandler+0x3c>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	71fb      	strb	r3, [r7, #7]

		if (frame_index == 0)
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MODBUS_IRQHandler+0x40>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d106      	bne.n	8000268 <MODBUS_IRQHandler+0x34>
		{
			mFlag = 0;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MODBUS_IRQHandler+0x44>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
			MODBUS_CheckAdress(&c);
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffae 	bl	80001c4 <MODBUS_CheckAdress>

		//USART2_write(c);
		//USART2_write('\n');
		//USART2_write('\r');
	}
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400
 8000274:	20000025 	.word	0x20000025
 8000278:	20000024 	.word	0x20000024

0800027c <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <TIM2_Init+0x3c>)
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <TIM2_Init+0x3c>)
 8000284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 800028c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000290:	221f      	movs	r2, #31
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 800029e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800

080002bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4908      	ldr	r1, [pc, #32]	; (80002e8 <NVIC_EnableIRQ+0x2c>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	e000e100 	.word	0xe000e100

080002ec <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 80002f0:	4a21      	ldr	r2, [pc, #132]	; (8000378 <USART2_init+0x8c>)
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <USART2_init+0x8c>)
 80002f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fa:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 80002fc:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <USART2_init+0x8c>)
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <USART2_init+0x8c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <USART2_init+0x90>)
 800030a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800030e:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 8000310:	4a1a      	ldr	r2, [pc, #104]	; (800037c <USART2_init+0x90>)
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <USART2_init+0x90>)
 8000314:	6a1b      	ldr	r3, [r3, #32]
 8000316:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800031a:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <USART2_init+0x90>)
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <USART2_init+0x90>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <USART2_init+0x90>)
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <USART2_init+0x90>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000332:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <USART2_init+0x94>)
 8000336:	f640 5205 	movw	r2, #3333	; 0xd05
 800033a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 800033c:	4a10      	ldr	r2, [pc, #64]	; (8000380 <USART2_init+0x94>)
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <USART2_init+0x94>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <USART2_init+0x94>)
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <USART2_init+0x94>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 8000354:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <USART2_init+0x94>)
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <USART2_init+0x94>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000360:	4a07      	ldr	r2, [pc, #28]	; (8000380 <USART2_init+0x94>)
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <USART2_init+0x94>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 800036c:	2026      	movs	r0, #38	; 0x26
 800036e:	f7ff ffa5 	bl	80002bc <NVIC_EnableIRQ>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800
 800037c:	40020000 	.word	0x40020000
 8000380:	40004400 	.word	0x40004400

08000384 <USART2_IRQHandler>:
	USART2_write('\r');
	USART2_write('\n');
}

void USART2_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 8000388:	f7ff ff54 	bl	8000234 <MODBUS_IRQHandler>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <DHT22_IRQHandler>:
{
	return;
}

void DHT22_IRQHandler()
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 8000396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039c:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <DHT22_IRQHandler+0xa4>)
 80003a0:	2203      	movs	r2, #3
 80003a2:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <DHT22_IRQHandler+0xa8>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d009      	beq.n	80003c4 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <DHT22_IRQHandler+0xac>)
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 80003b6:	4a20      	ldr	r2, [pc, #128]	; (8000438 <DHT22_IRQHandler+0xa8>)
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <DHT22_IRQHandler+0xa8>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f043 0320 	orr.w	r3, r3, #32
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	e025      	b.n	8000410 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <DHT22_IRQHandler+0xac>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	88fa      	ldrh	r2, [r7, #6]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d305      	bcc.n	80003da <DHT22_IRQHandler+0x4a>
 80003ce:	4b1b      	ldr	r3, [pc, #108]	; (800043c <DHT22_IRQHandler+0xac>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	88fa      	ldrh	r2, [r7, #6]
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	e006      	b.n	80003e8 <DHT22_IRQHandler+0x58>
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <DHT22_IRQHandler+0xac>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	88fa      	ldrh	r2, [r7, #6]
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	3b01      	subs	r3, #1
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <DHT22_IRQHandler+0xb0>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	461a      	mov	r2, r3
 80003f0:	88bb      	ldrh	r3, [r7, #4]
 80003f2:	b2d9      	uxtb	r1, r3
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <DHT22_IRQHandler+0xb4>)
 80003f6:	5499      	strb	r1, [r3, r2]
		index++;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <DHT22_IRQHandler+0xb0>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <DHT22_IRQHandler+0xb0>)
 8000402:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000404:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <DHT22_IRQHandler+0xa8>)
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <DHT22_IRQHandler+0xa8>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f023 0320 	bic.w	r3, r3, #32
 800040e:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <DHT22_IRQHandler+0xb0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b28      	cmp	r3, #40	; 0x28
 8000416:	d905      	bls.n	8000424 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <DHT22_IRQHandler+0xb0>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <DHT22_IRQHandler+0xa4>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <DHT22_IRQHandler+0xb8>)
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	615a      	str	r2, [r3, #20]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000051 	.word	0x20000051
 8000438:	40020000 	.word	0x40020000
 800043c:	20000052 	.word	0x20000052
 8000440:	20000054 	.word	0x20000054
 8000444:	20000028 	.word	0x20000028
 8000448:	40010400 	.word	0x40010400

0800044c <SetSysClock>:
void SetSysClock(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000456:	4a3d      	ldr	r2, [pc, #244]	; (800054c <SetSysClock+0x100>)
 8000458:	4b3c      	ldr	r3, [pc, #240]	; (800054c <SetSysClock+0x100>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000462:	bf00      	nop
 8000464:	4b39      	ldr	r3, [pc, #228]	; (800054c <SetSysClock+0x100>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0302 	and.w	r3, r3, #2
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000470:	4b36      	ldr	r3, [pc, #216]	; (800054c <SetSysClock+0x100>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f003 0302 	and.w	r3, r3, #2
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <SetSysClock+0x36>
  {
    status = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	e001      	b.n	8000486 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10b      	bne.n	80004a4 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 800048c:	4a2f      	ldr	r2, [pc, #188]	; (800054c <SetSysClock+0x100>)
 800048e:	4b2f      	ldr	r3, [pc, #188]	; (800054c <SetSysClock+0x100>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000496:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000498:	4a2c      	ldr	r2, [pc, #176]	; (800054c <SetSysClock+0x100>)
 800049a:	4b2c      	ldr	r3, [pc, #176]	; (800054c <SetSysClock+0x100>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 80004a2:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 80004a4:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <SetSysClock+0x104>)
 80004a6:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <SetSysClock+0x104>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 80004b0:	4a27      	ldr	r2, [pc, #156]	; (8000550 <SetSysClock+0x104>)
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <SetSysClock+0x104>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 80004bc:	4a24      	ldr	r2, [pc, #144]	; (8000550 <SetSysClock+0x104>)
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <SetSysClock+0x104>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 80004c8:	4a20      	ldr	r2, [pc, #128]	; (800054c <SetSysClock+0x100>)
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <SetSysClock+0x100>)
 80004cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d2:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <SetSysClock+0x108>)
 80004d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004da:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 80004dc:	bf00      	nop
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <SetSysClock+0x108>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1f9      	bne.n	80004de <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 80004ea:	4a18      	ldr	r2, [pc, #96]	; (800054c <SetSysClock+0x100>)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <SetSysClock+0x100>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f4:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <SetSysClock+0x100>)
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <SetSysClock+0x100>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000500:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <SetSysClock+0x100>)
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <SetSysClock+0x100>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800050c:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <SetSysClock+0x100>)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <SetSysClock+0x100>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000518:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 800051a:	bf00      	nop
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <SetSysClock+0x100>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <SetSysClock+0x100>)
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <SetSysClock+0x100>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	f043 0303 	orr.w	r3, r3, #3
 8000532:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000534:	bf00      	nop
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <SetSysClock+0x100>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f003 030c 	and.w	r3, r3, #12
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <SetSysClock+0xea>
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40023800 	.word	0x40023800
 8000550:	40023c00 	.word	0x40023c00
 8000554:	40007000 	.word	0x40007000

08000558 <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0
	char buffer[BUFFER_SIZE];

	// CMSIS Initializations

	SetSysClock();
 800055e:	f7ff ff75 	bl	800044c <SetSysClock>
	SystemCoreClockUpdate();
 8000562:	f000 f861 	bl	8000628 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8000566:	f7ff fe17 	bl	8000198 <GPIO_init>
	USART2_init();
 800056a:	f7ff febf 	bl	80002ec <USART2_init>
	TIM2_Init();
 800056e:	f7ff fe85 	bl	800027c <TIM2_Init>
	//LMT84LP_init();
	//NSL19M51_init();
	//DHT22_init();
	//ADC_init();

	while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x1a>

08000574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000574:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000586:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059a:	f000 f811 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 f8eb 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff ffd9 	bl	8000558 <main>
  bx lr
 80005a6:	4770      	bx	lr
  ldr r3, =_sidata
 80005a8:	080007fc 	.word	0x080007fc
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b0:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 80005b4:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 80005b8:	20000058 	.word	0x20000058

080005bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_IRQHandler>
	...

080005c0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <SystemInit+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <SystemInit+0x5c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80005d0:	4912      	ldr	r1, [pc, #72]	; (800061c <SystemInit+0x5c>)
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <SystemInit+0x5c>)
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <SystemInit+0x60>)
 80005d8:	4013      	ands	r3, r2
 80005da:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80005dc:	4a0f      	ldr	r2, [pc, #60]	; (800061c <SystemInit+0x5c>)
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <SystemInit+0x5c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80005e6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80005ea:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <SystemInit+0x5c>)
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <SystemInit+0x5c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80005f8:	4a08      	ldr	r2, [pc, #32]	; (800061c <SystemInit+0x5c>)
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <SystemInit+0x5c>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000602:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <SystemInit+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x64>)
 800060c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000610:	609a      	str	r2, [r3, #8]
#endif
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	88ffc00c 	.word	0x88ffc00c
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000628:	b480      	push	{r7}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b0c      	cmp	r3, #12
 8000650:	d863      	bhi.n	800071a <SystemCoreClockUpdate+0xf2>
 8000652:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <SystemCoreClockUpdate+0x30>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	0800068d 	.word	0x0800068d
 800065c:	0800071b 	.word	0x0800071b
 8000660:	0800071b 	.word	0x0800071b
 8000664:	0800071b 	.word	0x0800071b
 8000668:	080006ad 	.word	0x080006ad
 800066c:	0800071b 	.word	0x0800071b
 8000670:	0800071b 	.word	0x0800071b
 8000674:	0800071b 	.word	0x0800071b
 8000678:	080006b5 	.word	0x080006b5
 800067c:	0800071b 	.word	0x0800071b
 8000680:	0800071b 	.word	0x0800071b
 8000684:	0800071b 	.word	0x0800071b
 8000688:	080006bd 	.word	0x080006bd
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800068c:	4b35      	ldr	r3, [pc, #212]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	0b5b      	lsrs	r3, r3, #13
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <SystemCoreClockUpdate+0x140>)
 80006a8:	601a      	str	r2, [r3, #0]
      break;
 80006aa:	e046      	b.n	800073a <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <SystemCoreClockUpdate+0x140>)
 80006ae:	4a2f      	ldr	r2, [pc, #188]	; (800076c <SystemCoreClockUpdate+0x144>)
 80006b0:	601a      	str	r2, [r3, #0]
      break;
 80006b2:	e042      	b.n	800073a <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80006b4:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <SystemCoreClockUpdate+0x140>)
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <SystemCoreClockUpdate+0x144>)
 80006b8:	601a      	str	r2, [r3, #0]
      break;
 80006ba:	e03e      	b.n	800073a <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80006c4:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80006ce:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	0c9b      	lsrs	r3, r3, #18
 80006d4:	4a26      	ldr	r2, [pc, #152]	; (8000770 <SystemCoreClockUpdate+0x148>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	0d9b      	lsrs	r3, r3, #22
 80006de:	3301      	adds	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ea:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <SystemCoreClockUpdate+0x144>)
 80006f6:	fb02 f203 	mul.w	r2, r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <SystemCoreClockUpdate+0x140>)
 8000702:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000704:	e019      	b.n	800073a <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	4a18      	ldr	r2, [pc, #96]	; (800076c <SystemCoreClockUpdate+0x144>)
 800070a:	fb02 f203 	mul.w	r2, r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	fbb2 f3f3 	udiv	r3, r2, r3
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <SystemCoreClockUpdate+0x140>)
 8000716:	6013      	str	r3, [r2, #0]
      break;
 8000718:	e00f      	b.n	800073a <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	0b5b      	lsrs	r3, r3, #13
 8000720:	f003 0307 	and.w	r3, r3, #7
 8000724:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	461a      	mov	r2, r3
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <SystemCoreClockUpdate+0x140>)
 8000736:	601a      	str	r2, [r3, #0]
      break;
 8000738:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <SystemCoreClockUpdate+0x13c>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <SystemCoreClockUpdate+0x14c>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <SystemCoreClockUpdate+0x140>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	fa22 f303 	lsr.w	r3, r2, r3
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <SystemCoreClockUpdate+0x140>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	371c      	adds	r7, #28
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	20000004 	.word	0x20000004
 800076c:	007a1200 	.word	0x007a1200
 8000770:	080007d8 	.word	0x080007d8
 8000774:	080007e4 	.word	0x080007e4

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	2500      	movs	r5, #0
 800077c:	4e0c      	ldr	r6, [pc, #48]	; (80007b0 <__libc_init_array+0x38>)
 800077e:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 8000780:	1ba4      	subs	r4, r4, r6
 8000782:	10a4      	asrs	r4, r4, #2
 8000784:	42a5      	cmp	r5, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	f000 f81a 	bl	80007c0 <_init>
 800078c:	2500      	movs	r5, #0
 800078e:	4e0a      	ldr	r6, [pc, #40]	; (80007b8 <__libc_init_array+0x40>)
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <__libc_init_array+0x44>)
 8000792:	1ba4      	subs	r4, r4, r6
 8000794:	10a4      	asrs	r4, r4, #2
 8000796:	42a5      	cmp	r5, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007a0:	4798      	blx	r3
 80007a2:	3501      	adds	r5, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007aa:	4798      	blx	r3
 80007ac:	3501      	adds	r5, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080007f4 	.word	0x080007f4
 80007b4:	080007f4 	.word	0x080007f4
 80007b8:	080007f4 	.word	0x080007f4
 80007bc:	080007f8 	.word	0x080007f8

080007c0 <_init>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr

080007cc <_fini>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr

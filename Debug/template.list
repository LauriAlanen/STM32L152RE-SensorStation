
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001744  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001be4  08001be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08001bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  2000006c  08001c58  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000158  08001c58  00020158  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005981  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000fec  00000000  00000000  00025a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002e0  00000000  00000000  00026a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00026ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000196f  00000000  00000000  00026f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000131f  00000000  00000000  000288a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00029bc6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c58  00000000  00000000  00029c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001868 	.word	0x08001868

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	08001868 	.word	0x08001868

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 fca8 	bl	8000ae0 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <CRC16>:
volatile uint8_t selected_slave = 0;

//parameter wLenght = how my bytes in your frame?
//*nData = your first element in frame array
uint16_t CRC16(uint8_t *nData, uint16_t wLength)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	460b      	mov	r3, r1
 80001ce:	807b      	strh	r3, [r7, #2]
		0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
		0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
	};

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 80001d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001d4:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80001d6:	e011      	b.n	80001fc <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	1c5a      	adds	r2, r3, #1
 80001dc:	607a      	str	r2, [r7, #4]
 80001de:	781a      	ldrb	r2, [r3, #0]
 80001e0:	89fb      	ldrh	r3, [r7, #14]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	4053      	eors	r3, r2
 80001e6:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 80001e8:	89fb      	ldrh	r3, [r7, #14]
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <CRC16+0x50>)
 80001f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	4053      	eors	r3, r2
 80001fa:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 80001fc:	887b      	ldrh	r3, [r7, #2]
 80001fe:	1e5a      	subs	r2, r3, #1
 8000200:	807a      	strh	r2, [r7, #2]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1e8      	bne.n	80001d8 <CRC16+0x14>
	}

	return wCRCWord;
 8000206:	89fb      	ldrh	r3, [r7, #14]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	08001994 	.word	0x08001994

08000218 <MODBUS_VerifyCRC>:

MODBUS_Status MODBUS_VerifyCRC(uint8_t *MODBUS_Frame)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09c      	sub	sp, #112	; 0x70
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint16_t MODBUS_FrameCRC = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint8_t buffer[100];

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 2); // Exclude the CRC itself
 8000226:	2106      	movs	r1, #6
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffcb 	bl	80001c4 <CRC16>
 800022e:	4603      	mov	r3, r0
 8000230:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	uint8_t CRC_lsb = (MODBUS_FrameCRC >> 8) == MODBUS_Frame[MODBUS_FRAME_SIZE - 1];
 8000234:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000238:	0a1b      	lsrs	r3, r3, #8
 800023a:	b29a      	uxth	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3307      	adds	r3, #7
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	b29b      	uxth	r3, r3
 8000244:	429a      	cmp	r2, r3
 8000246:	bf0c      	ite	eq
 8000248:	2301      	moveq	r3, #1
 800024a:	2300      	movne	r3, #0
 800024c:	b2db      	uxtb	r3, r3
 800024e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	uint8_t CRC_msb = (MODBUS_FrameCRC & 0x00FF) == MODBUS_Frame[MODBUS_FRAME_SIZE - 2];
 8000252:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000256:	b2db      	uxtb	r3, r3
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	3206      	adds	r2, #6
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	4293      	cmp	r3, r2
 8000260:	bf0c      	ite	eq
 8000262:	2301      	moveq	r3, #1
 8000264:	2300      	movne	r3, #0
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (CRC_lsb && CRC_msb)
 800026c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000270:	2b00      	cmp	r3, #0
 8000272:	d005      	beq.n	8000280 <MODBUS_VerifyCRC+0x68>
 8000274:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MODBUS_VerifyCRC+0x68>
	{
		return MODBUS_CRC_VALID;
 800027c:	2302      	movs	r3, #2
 800027e:	e000      	b.n	8000282 <MODBUS_VerifyCRC+0x6a>
	}

	return MODBUS_CRC_INVALID;
 8000280:	2303      	movs	r3, #3
}
 8000282:	4618      	mov	r0, r3
 8000284:	3770      	adds	r7, #112	; 0x70
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MODBUS_CheckAddress>:

MODBUS_Status MODBUS_CheckAddress(uint8_t address)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < SLAVE_COUNT; ++i)
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e011      	b.n	80002c0 <MODBUS_CheckAddress+0x34>
    {
        if (MODBUS_Slaves[i] == address)
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <MODBUS_CheckAddress+0x54>)
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4413      	add	r3, r2
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d107      	bne.n	80002ba <MODBUS_CheckAddress+0x2e>
        {
            GPIOA->ODR |= GPIO_ODR_ODR_5;
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <MODBUS_CheckAddress+0x58>)
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <MODBUS_CheckAddress+0x58>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	6153      	str	r3, [r2, #20]
            return MODBUS_ADDR_VALID;
 80002b6:	2301      	movs	r3, #1
 80002b8:	e00c      	b.n	80002d4 <MODBUS_CheckAddress+0x48>
    for (int i = 0; i < SLAVE_COUNT; ++i)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	ddea      	ble.n	800029c <MODBUS_CheckAddress+0x10>
        }
    }

    GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <MODBUS_CheckAddress+0x58>)
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MODBUS_CheckAddress+0x58>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f023 0320 	bic.w	r3, r3, #32
 80002d0:	6153      	str	r3, [r2, #20]
    return MODBUS_ADDR_INVALID;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000
 80002e4:	40020000 	.word	0x40020000

080002e8 <MODBUS_BuildFrame>:

void MODBUS_BuildFrame(uint8_t *MODBUS_Frame)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	static uint8_t frame_index = 0;
	uint8_t byte;

    while (MODBUS_RingBufferRead(&byte) == 0)
 80002f0:	e014      	b.n	800031c <MODBUS_BuildFrame+0x34>
    {
    	MODBUS_Frame[frame_index++] = byte;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MODBUS_BuildFrame+0x4c>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	b2d1      	uxtb	r1, r2
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <MODBUS_BuildFrame+0x4c>)
 80002fc:	7011      	strb	r1, [r2, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	7bfa      	ldrb	r2, [r7, #15]
 8000306:	701a      	strb	r2, [r3, #0]
    	if (frame_index >= MODBUS_FRAME_SIZE)
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <MODBUS_BuildFrame+0x4c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b07      	cmp	r3, #7
 800030e:	d905      	bls.n	800031c <MODBUS_BuildFrame+0x34>
    	{
    		frame_ready = 1;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MODBUS_BuildFrame+0x50>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
    		frame_index = 0;
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <MODBUS_BuildFrame+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
    while (MODBUS_RingBufferRead(&byte) == 0)
 800031c:	f107 030f 	add.w	r3, r7, #15
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f871 	bl	8000408 <MODBUS_RingBufferRead>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0e2      	beq.n	80002f2 <MODBUS_BuildFrame+0xa>
		}
    }
}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000008e 	.word	0x2000008e
 8000338:	20000088 	.word	0x20000088

0800033c <MODBUS_ReadSensor>:

MODBUS_Status MODBUS_ReadSensor(uint8_t *MODBUS_Frame)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	switch (MODBUS_Frame[0])
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b04      	cmp	r3, #4
 800034a:	d007      	beq.n	800035c <MODBUS_ReadSensor+0x20>
 800034c:	2b06      	cmp	r3, #6
 800034e:	d002      	beq.n	8000356 <MODBUS_ReadSensor+0x1a>
 8000350:	2b01      	cmp	r3, #1
 8000352:	d005      	beq.n	8000360 <MODBUS_ReadSensor+0x24>
		case DHT22_MODBUS_ADDRESS:
			DHT22_ModbusHandler();
			break;

		default:
			break;
 8000354:	e005      	b.n	8000362 <MODBUS_ReadSensor+0x26>
			DHT22_ModbusHandler();
 8000356:	f000 fb89 	bl	8000a6c <DHT22_ModbusHandler>
			break;
 800035a:	e002      	b.n	8000362 <MODBUS_ReadSensor+0x26>
			break;
 800035c:	bf00      	nop
 800035e:	e000      	b.n	8000362 <MODBUS_ReadSensor+0x26>
			break;
 8000360:	bf00      	nop
	}

}
 8000362:	bf00      	nop
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MODBUS_ProcessFrame>:

void MODBUS_ProcessFrame(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	static uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
    MODBUS_BuildFrame(MODBUS_Frame);
 8000372:	480f      	ldr	r0, [pc, #60]	; (80003b0 <MODBUS_ProcessFrame+0x44>)
 8000374:	f7ff ffb8 	bl	80002e8 <MODBUS_BuildFrame>

    if (!frame_ready)
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MODBUS_ProcessFrame+0x48>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d013      	beq.n	80003a8 <MODBUS_ProcessFrame+0x3c>
    {
        return;
    }

    MODBUS_Status status = MODBUS_CheckAddress(MODBUS_Frame[0]);
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MODBUS_ProcessFrame+0x44>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff81 	bl	800028c <MODBUS_CheckAddress>
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]

    if (status == MODBUS_ADDR_VALID)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d103      	bne.n	800039c <MODBUS_ProcessFrame+0x30>
    {
        MODBUS_ProcessValidFrame(MODBUS_Frame);
 8000394:	4806      	ldr	r0, [pc, #24]	; (80003b0 <MODBUS_ProcessFrame+0x44>)
 8000396:	f000 f80f 	bl	80003b8 <MODBUS_ProcessValidFrame>
 800039a:	e001      	b.n	80003a0 <MODBUS_ProcessFrame+0x34>
    }

    else
    {
        MODBUS_ProcessInvalidFrame();
 800039c:	f000 f82e 	bl	80003fc <MODBUS_ProcessInvalidFrame>
    }

    frame_ready = 0;
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <MODBUS_ProcessFrame+0x48>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
 80003a6:	e000      	b.n	80003aa <MODBUS_ProcessFrame+0x3e>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000090 	.word	0x20000090
 80003b4:	20000088 	.word	0x20000088

080003b8 <MODBUS_ProcessValidFrame>:

void MODBUS_ProcessValidFrame(uint8_t *MODBUS_Frame)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b09d      	sub	sp, #116	; 0x74
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	if (MODBUS_VerifyCRC(MODBUS_Frame) == MODBUS_CRC_INVALID)
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff29 	bl	8000218 <MODBUS_VerifyCRC>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d10e      	bne.n	80003ea <MODBUS_ProcessValidFrame+0x32>
	{
#ifdef DEBUG
	    char debugBuffer[100];
		snprintf(debugBuffer, 20, "%s", "Checksum error!");
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <MODBUS_ProcessValidFrame+0x40>)
 80003d2:	461c      	mov	r4, r3
 80003d4:	4613      	mov	r3, r2
 80003d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		USART2_write_buffer(debugBuffer);
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f919 	bl	8000618 <USART2_write_buffer>
#endif
		return;
 80003e6:	bf00      	nop
 80003e8:	e002      	b.n	80003f0 <MODBUS_ProcessValidFrame+0x38>
	}

    MODBUS_ReadSensor(MODBUS_Frame);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ffa6 	bl	800033c <MODBUS_ReadSensor>
    {
        snprintf(debugBuffer, sizeof(debugBuffer), "%.2x ", MODBUS_Frame[i]);
        USART2_write_buffer(debugBuffer);
    }
#endif
}
 80003f0:	3774      	adds	r7, #116	; 0x74
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd90      	pop	{r4, r7, pc}
 80003f6:	bf00      	nop
 80003f8:	08001880 	.word	0x08001880

080003fc <MODBUS_ProcessInvalidFrame>:

void MODBUS_ProcessInvalidFrame(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
#if DEBUG == 1
    char debugBuffer[100];
    snprintf(debugBuffer, sizeof(debugBuffer), "Invalid address!");
    USART2_write_buffer(debugBuffer);
#endif
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <MODBUS_RingBufferRead>:

uint8_t MODBUS_RingBufferRead(uint8_t *data)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
    if (rx_tail == rx_head)
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MODBUS_RingBufferRead+0x58>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	b29a      	uxth	r2, r3
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MODBUS_RingBufferRead+0x5c>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	b29b      	uxth	r3, r3
 800041c:	429a      	cmp	r2, r3
 800041e:	d101      	bne.n	8000424 <MODBUS_RingBufferRead+0x1c>
    {
        return -1;
 8000420:	23ff      	movs	r3, #255	; 0xff
 8000422:	e017      	b.n	8000454 <MODBUS_RingBufferRead+0x4c>
    }

    *data = rx_buffer[rx_tail];
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MODBUS_RingBufferRead+0x58>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	b29b      	uxth	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MODBUS_RingBufferRead+0x60>)
 800042e:	5c9b      	ldrb	r3, [r3, r2]
 8000430:	b2da      	uxtb	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	701a      	strb	r2, [r3, #0]
    rx_tail = (rx_tail + 1) % RX_BUFFER_SIZE;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MODBUS_RingBufferRead+0x58>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	b29b      	uxth	r3, r3
 800043c:	3301      	adds	r3, #1
 800043e:	425a      	negs	r2, r3
 8000440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000448:	bf58      	it	pl
 800044a:	4253      	negpl	r3, r2
 800044c:	b29a      	uxth	r2, r3
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <MODBUS_RingBufferRead+0x58>)
 8000450:	801a      	strh	r2, [r3, #0]
    return 0;
 8000452:	2300      	movs	r3, #0
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	2000008c 	.word	0x2000008c
 8000464:	2000008a 	.word	0x2000008a
 8000468:	200000d4 	.word	0x200000d4

0800046c <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE)
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MODBUS_IRQHandler+0x64>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 0320 	and.w	r3, r3, #32
 800047a:	2b00      	cmp	r3, #0
 800047c:	d022      	beq.n	80004c4 <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART2->DR;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MODBUS_IRQHandler+0x64>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MODBUS_IRQHandler+0x68>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	b29b      	uxth	r3, r3
 800048a:	3301      	adds	r3, #1
 800048c:	425a      	negs	r2, r3
 800048e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000496:	bf58      	it	pl
 8000498:	4253      	negpl	r3, r2
 800049a:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MODBUS_IRQHandler+0x6c>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	88ba      	ldrh	r2, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d00a      	beq.n	80004be <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MODBUS_IRQHandler+0x68>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <MODBUS_IRQHandler+0x70>)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 80004b6:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <MODBUS_IRQHandler+0x68>)
 80004b8:	88bb      	ldrh	r3, [r7, #4]
 80004ba:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 80004bc:	e002      	b.n	80004c4 <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MODBUS_IRQHandler+0x74>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40004400 	.word	0x40004400
 80004d4:	2000008a 	.word	0x2000008a
 80004d8:	2000008c 	.word	0x2000008c
 80004dc:	200000d4 	.word	0x200000d4
 80004e0:	20000089 	.word	0x20000089

080004e4 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <TIM2_Init+0x3c>)
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <TIM2_Init+0x3c>)
 80004ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	221f      	movs	r2, #31
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <NVIC_EnableIRQ+0x2c>)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	095b      	lsrs	r3, r3, #5
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	f002 021f 	and.w	r2, r2, #31
 800053c:	2001      	movs	r0, #1
 800053e:	fa00 f202 	lsl.w	r2, r0, r2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <USART2_init+0x8c>)
 800055a:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <USART2_init+0x8c>)
 800055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000562:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <USART2_init+0x8c>)
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <USART2_init+0x8c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <USART2_init+0x90>)
 8000572:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000576:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 8000578:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <USART2_init+0x90>)
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <USART2_init+0x90>)
 800057c:	6a1b      	ldr	r3, [r3, #32]
 800057e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000582:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <USART2_init+0x90>)
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <USART2_init+0x90>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <USART2_init+0x90>)
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <USART2_init+0x90>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059a:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <USART2_init+0x94>)
 800059e:	f640 5205 	movw	r2, #3333	; 0xd05
 80005a2:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <USART2_init+0x94>)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <USART2_init+0x94>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <USART2_init+0x94>)
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <USART2_init+0x94>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <USART2_init+0x94>)
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <USART2_init+0x94>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <USART2_init+0x94>)
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <USART2_init+0x94>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 80005d4:	2026      	movs	r0, #38	; 0x26
 80005d6:	f7ff ffa5 	bl	8000524 <NVIC_EnableIRQ>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40004400 	.word	0x40004400

080005ec <USART2_write>:
		data=USART2->DR;			//p739
		return data;
}

void USART2_write(char data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 80005f6:	bf00      	nop
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <USART2_write+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f9      	beq.n	80005f8 <USART2_write+0xc>
	USART2->DR = (data);		//p739
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <USART2_write+0x28>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	6053      	str	r3, [r2, #4]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40004400 	.word	0x40004400

08000618 <USART2_write_buffer>:

void USART2_write_buffer(char* buffer)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 8000620:	e007      	b.n	8000632 <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffe0 	bl	80005ec <USART2_write>
		buffer++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f3      	bne.n	8000622 <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 800063a:	200d      	movs	r0, #13
 800063c:	f7ff ffd6 	bl	80005ec <USART2_write>
	USART2_write('\n');
 8000640:	200a      	movs	r0, #10
 8000642:	f7ff ffd3 	bl	80005ec <USART2_write>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 8000652:	f7ff ff0b 	bl	800046c <MODBUS_IRQHandler>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <NVIC_EnableIRQ>:
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <NVIC_EnableIRQ+0x2c>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	e000e100 	.word	0xe000e100

0800068c <DHT22_SWITCH_MODE_OUTPUT>:
static volatile uint8_t pulses[BIT_COUNT];
static volatile uint8_t dht_status = 0;
static uint8_t skip_bits = 0;

void DHT22_SWITCH_MODE_OUTPUT()
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40020000 	.word	0x40020000

080006b4 <DHT22_SWITCH_MODE_INPUT>:

void DHT22_SWITCH_MODE_INPUT()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <DHT22_SWITCH_MODE_INPUT+0x18>)
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <DHT22_SWITCH_MODE_INPUT+0x18>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40020000 	.word	0x40020000

080006d0 <DHT22_init>:

void DHT22_init()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <DHT22_init+0x50>)
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <DHT22_init+0x50>)
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6213      	str	r3, [r2, #32]
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI7_PA;
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <DHT22_init+0x54>)
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <DHT22_init+0x54>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PA;
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <DHT22_init+0x54>)
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <DHT22_init+0x54>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= EXTI_IMR_MR7;
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <DHT22_init+0x58>)
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <DHT22_init+0x58>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fa:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_FT7;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <DHT22_init+0x58>)
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <DHT22_init+0x58>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000706:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR |= EXTI_RTSR_RT7;
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <DHT22_init+0x58>)
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <DHT22_init+0x58>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000712:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000714:	2017      	movs	r0, #23
 8000716:	f7ff ffa1 	bl	800065c <NVIC_EnableIRQ>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40010000 	.word	0x40010000
 8000728:	40010400 	.word	0x40010400

0800072c <DHT22_read>:

int DHT22_read(DHT22_Reading *reading)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a2      	sub	sp, #136	; 0x88
 8000730:	af02      	add	r7, sp, #8
 8000732:	6078      	str	r0, [r7, #4]
    uint8_t byte_list[5] = {0};
 8000734:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	711a      	strb	r2, [r3, #4]
    uint8_t buffer[100];

    DHT22_start();
 800073e:	f000 f8e1 	bl	8000904 <DHT22_start>

    if (DHT22_wait_response())
 8000742:	f000 f903 	bl	800094c <DHT22_wait_response>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d004      	beq.n	8000756 <DHT22_read+0x2a>
    {
        USART2_write_buffer("DHT22 Not ready to send data!");
 800074c:	4864      	ldr	r0, [pc, #400]	; (80008e0 <DHT22_read+0x1b4>)
 800074e:	f7ff ff63 	bl	8000618 <USART2_write_buffer>
        return DHT_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e0bf      	b.n	80008d6 <DHT22_read+0x1aa>
    }

    SysTick->LOAD = TIMEOUT_20_MS - 1; // Set maximum allowable wait time
 8000756:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <DHT22_read+0x1b8>)
 8000758:	4a63      	ldr	r2, [pc, #396]	; (80008e8 <DHT22_read+0x1bc>)
 800075a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800075c:	4b61      	ldr	r3, [pc, #388]	; (80008e4 <DHT22_read+0x1b8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000762:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <DHT22_read+0x1b8>)
 8000764:	2205      	movs	r2, #5
 8000766:	601a      	str	r2, [r3, #0]

    // Wait for data
    while(dht_status == DHT_MEASURING)
 8000768:	e00a      	b.n	8000780 <DHT22_read+0x54>
    {
        if ((SysTick->CTRL) & 0x10000)
 800076a:	4b5e      	ldr	r3, [pc, #376]	; (80008e4 <DHT22_read+0x1b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <DHT22_read+0x54>
        {
    		USART2_write_buffer("DHT22 measurement error :/");
 8000776:	485d      	ldr	r0, [pc, #372]	; (80008ec <DHT22_read+0x1c0>)
 8000778:	f7ff ff4e 	bl	8000618 <USART2_write_buffer>
            return DHT_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e0aa      	b.n	80008d6 <DHT22_read+0x1aa>
    while(dht_status == DHT_MEASURING)
 8000780:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <DHT22_read+0x1c4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b03      	cmp	r3, #3
 8000788:	d0ef      	beq.n	800076a <DHT22_read+0x3e>
        }
    }

	SysTick->CTRL = 0;
 800078a:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <DHT22_read+0x1b8>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]

    if (dht_status == DHT_READY)
 8000790:	4b57      	ldr	r3, [pc, #348]	; (80008f0 <DHT22_read+0x1c4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 809c 	bne.w	80008d4 <DHT22_read+0x1a8>
    {
	    EXTI->IMR &= ~EXTI_IMR_MR7;
 800079c:	4a55      	ldr	r2, [pc, #340]	; (80008f4 <DHT22_read+0x1c8>)
 800079e:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <DHT22_read+0x1c8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007a6:	6013      	str	r3, [r2, #0]
    	dht_status = DHT_NOT_READY;
 80007a8:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <DHT22_read+0x1c4>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]

    	DHT22_decode_pulses(pulses, byte_list);
 80007ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007b2:	4619      	mov	r1, r3
 80007b4:	4850      	ldr	r0, [pc, #320]	; (80008f8 <DHT22_read+0x1cc>)
 80007b6:	f000 f919 	bl	80009ec <DHT22_decode_pulses>

		uint8_t humidity_int = byte_list[0];
 80007ba:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80007be:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		uint8_t humidity_dec = byte_list[1];
 80007c2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80007c6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		uint8_t temperature_int = byte_list[2];
 80007ca:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80007ce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint8_t temperature_dec = byte_list[3];
 80007d2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80007d6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		uint8_t checksum = byte_list[4];
 80007da:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80007de:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

		uint16_t humidity = (humidity_int << 8) | humidity_dec;
 80007e2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		uint16_t temperature = (temperature_int << 8) | temperature_dec;
 80007f8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	    if (temperature_int & 0x80) temperature = -temperature;
 800080e:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8000812:	2b00      	cmp	r3, #0
 8000814:	da04      	bge.n	8000820 <DHT22_read+0xf4>
 8000816:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800081a:	425b      	negs	r3, r3
 800081c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		uint8_t expected_checksum = humidity_int + humidity_dec + temperature_int + temperature_dec;
 8000820:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8000824:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000828:	4413      	add	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000830:	4413      	add	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000838:	4413      	add	r3, r2
 800083a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		if (expected_checksum != checksum)
 800083e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000842:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000846:	429a      	cmp	r2, r3
 8000848:	d010      	beq.n	800086c <DHT22_read+0x140>
		{
			snprintf(buffer, 100, "Invalid checksum expected %.2X got %.2X", expected_checksum, checksum);
 800084a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800084e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000852:	f107 000c 	add.w	r0, r7, #12
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <DHT22_read+0x1d0>)
 800085c:	2164      	movs	r1, #100	; 0x64
 800085e:	f000 fbc9 	bl	8000ff4 <sniprintf>
			USART2_write_buffer(buffer);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fed6 	bl	8000618 <USART2_write_buffer>
		}

		reading->humidity_int = humidity / 10;
 800086c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000870:	4a23      	ldr	r2, [pc, #140]	; (8000900 <DHT22_read+0x1d4>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	701a      	strb	r2, [r3, #0]
		reading->humidity_dec = humidity % 10;
 8000880:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <DHT22_read+0x1d4>)
 8000886:	fba3 1302 	umull	r1, r3, r3, r2
 800088a:	08d9      	lsrs	r1, r3, #3
 800088c:	460b      	mov	r3, r1
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	440b      	add	r3, r1
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	705a      	strb	r2, [r3, #1]
		reading->temperature_int = temperature / 10;
 800089e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <DHT22_read+0x1d4>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	709a      	strb	r2, [r3, #2]
		reading->temperature_dec = temperature % 10;
 80008b2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <DHT22_read+0x1d4>)
 80008b8:	fba3 1302 	umull	r1, r3, r3, r2
 80008bc:	08d9      	lsrs	r1, r3, #3
 80008be:	460b      	mov	r3, r1
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	70da      	strb	r2, [r3, #3]

		return DHT_READY;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e000      	b.n	80008d6 <DHT22_read+0x1aa>
    }

    return DHT_ERROR;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3780      	adds	r7, #128	; 0x80
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	08001890 	.word	0x08001890
 80008e4:	e000e010 	.word	0xe000e010
 80008e8:	0009c3ff 	.word	0x0009c3ff
 80008ec:	080018b0 	.word	0x080018b0
 80008f0:	200000c1 	.word	0x200000c1
 80008f4:	40010400 	.word	0x40010400
 80008f8:	20000098 	.word	0x20000098
 80008fc:	080018cc 	.word	0x080018cc
 8000900:	cccccccd 	.word	0xcccccccd

08000904 <DHT22_start>:

void DHT22_start()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    EXTI->IMR &= ~EXTI_IMR_MR7;
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <DHT22_start+0x40>)
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <DHT22_start+0x40>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000912:	6013      	str	r3, [r2, #0]
    // MCU PULL LOW ~20ms
    DHT22_SWITCH_MODE_OUTPUT();
 8000914:	f7ff feba 	bl	800068c <DHT22_SWITCH_MODE_OUTPUT>
    GPIOA->ODR &= ~GPIO_ODR_ODR_7;
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <DHT22_start+0x44>)
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <DHT22_start+0x44>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000922:	6153      	str	r3, [r2, #20]
    delay_ms(20);
 8000924:	2014      	movs	r0, #20
 8000926:	f000 f95f 	bl	8000be8 <delay_ms>

    // MCU RELEASE LINE 20-40us
    GPIOA->ODR |= GPIO_ODR_ODR_7;
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <DHT22_start+0x44>)
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <DHT22_start+0x44>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6153      	str	r3, [r2, #20]
    DHT22_SWITCH_MODE_INPUT();
 8000936:	f7ff febd 	bl	80006b4 <DHT22_SWITCH_MODE_INPUT>
	delay_us(20);
 800093a:	2014      	movs	r0, #20
 800093c:	f000 f92e 	bl	8000b9c <delay_us>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40010400 	.word	0x40010400
 8000948:	40020000 	.word	0x40020000

0800094c <DHT22_wait_response>:

int DHT22_wait_response()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <DHT22_wait_response+0x8c>)
 8000952:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000956:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <DHT22_wait_response+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <DHT22_wait_response+0x8c>)
 8000960:	2205      	movs	r2, #5
 8000962:	601a      	str	r2, [r3, #0]

    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 8000964:	e00a      	b.n	800097c <DHT22_wait_response+0x30>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <DHT22_wait_response+0x8c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <DHT22_wait_response+0x30>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response PULL LOW");
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <DHT22_wait_response+0x90>)
 8000974:	f7ff fe50 	bl	8000618 <USART2_write_buffer>
            return DHT_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e02b      	b.n	80009d4 <DHT22_wait_response+0x88>
    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <DHT22_wait_response+0x94>)
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0ee      	beq.n	8000966 <DHT22_wait_response+0x1a>
        }
    }

    EXTI->IMR |= EXTI_IMR_MR7;
 8000988:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <DHT22_wait_response+0x98>)
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <DHT22_wait_response+0x98>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	6013      	str	r3, [r2, #0]

    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time 85µs
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <DHT22_wait_response+0x8c>)
 8000996:	f640 323f 	movw	r2, #2879	; 0xb3f
 800099a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <DHT22_wait_response+0x8c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <DHT22_wait_response+0x8c>)
 80009a4:	2205      	movs	r2, #5
 80009a6:	601a      	str	r2, [r3, #0]
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 80009a8:	e00a      	b.n	80009c0 <DHT22_wait_response+0x74>
    {
        if ((SysTick->CTRL) & 0x10000)
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <DHT22_wait_response+0x8c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d004      	beq.n	80009c0 <DHT22_wait_response+0x74>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response GET READY");
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <DHT22_wait_response+0x9c>)
 80009b8:	f7ff fe2e 	bl	8000618 <USART2_write_buffer>
            return DHT_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e009      	b.n	80009d4 <DHT22_wait_response+0x88>
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <DHT22_wait_response+0x94>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ee      	bne.n	80009aa <DHT22_wait_response+0x5e>
        }
    }

    SysTick->CTRL = 0;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <DHT22_wait_response+0x8c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]

    return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	e000e010 	.word	0xe000e010
 80009dc:	080018f4 	.word	0x080018f4
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40010400 	.word	0x40010400
 80009e8:	0800192c 	.word	0x0800192c

080009ec <DHT22_decode_pulses>:

void DHT22_decode_pulses(volatile uint8_t *pulses, uint8_t *byte_list)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    uint8_t current_byte = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]

    for (int bit = 1; bit <= BIT_COUNT; bit++)
 80009fa:	2301      	movs	r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e02c      	b.n	8000a5a <DHT22_decode_pulses+0x6e>
    {
        if (pulses[bit] > 20 && pulses[bit] < 32)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b14      	cmp	r3, #20
 8000a0c:	d90a      	bls.n	8000a24 <DHT22_decode_pulses+0x38>
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b1f      	cmp	r3, #31
 8000a1a:	d803      	bhi.n	8000a24 <DHT22_decode_pulses+0x38>
        {
            current_byte = (current_byte << 1) | 0;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
 8000a22:	e006      	b.n	8000a32 <DHT22_decode_pulses+0x46>
        }
        else
        {
            current_byte = (current_byte << 1) | 1;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
        }

        if ((bit % 8) == 0)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10b      	bne.n	8000a54 <DHT22_decode_pulses+0x68>
        {
            byte_list[(bit / 8) - 1] = current_byte;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da00      	bge.n	8000a44 <DHT22_decode_pulses+0x58>
 8000a42:	3307      	adds	r3, #7
 8000a44:	10db      	asrs	r3, r3, #3
 8000a46:	3b01      	subs	r3, #1
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	701a      	strb	r2, [r3, #0]
            current_byte = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
    for (int bit = 1; bit <= BIT_COUNT; bit++)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b29      	cmp	r3, #41	; 0x29
 8000a5e:	ddcf      	ble.n	8000a00 <DHT22_decode_pulses+0x14>
        }
    }
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
	...

08000a6c <DHT22_ModbusHandler>:

void DHT22_ModbusHandler(DHT22_)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09e      	sub	sp, #120	; 0x78
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]
	DHT22_Reading dht22_reading;
	uint8_t buffer[100];

	if(!(DHT22_read(&dht22_reading)))
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe57 	bl	800072c <DHT22_read>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d124      	bne.n	8000ace <DHT22_ModbusHandler+0x62>
	{
	    snprintf(buffer, 100, "DHT22 Humidity %d.%d", dht22_reading.humidity_int, dht22_reading.humidity_dec);
 8000a84:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000a8e:	f107 0008 	add.w	r0, r7, #8
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	4613      	mov	r3, r2
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <DHT22_ModbusHandler+0x6c>)
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	f000 faab 	bl	8000ff4 <sniprintf>
		USART2_write_buffer(buffer);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fdb8 	bl	8000618 <USART2_write_buffer>
		snprintf(buffer, 100, "DHT22 Temperature %d.%d", dht22_reading.temperature_int, dht22_reading.temperature_dec);
 8000aa8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000aac:	461a      	mov	r2, r3
 8000aae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ab2:	f107 0008 	add.w	r0, r7, #8
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <DHT22_ModbusHandler+0x70>)
 8000abc:	2164      	movs	r1, #100	; 0x64
 8000abe:	f000 fa99 	bl	8000ff4 <sniprintf>
		USART2_write_buffer(buffer);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fda6 	bl	8000618 <USART2_write_buffer>
	}

	return;
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
}
 8000ad0:	3770      	adds	r7, #112	; 0x70
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08001964 	.word	0x08001964
 8000adc:	0800197c 	.word	0x0800197c

08000ae0 <DHT22_IRQHandler>:

void DHT22_IRQHandler()
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 8000ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <DHT22_IRQHandler+0xa4>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <DHT22_IRQHandler+0xa8>)
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d009      	beq.n	8000b14 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <DHT22_IRQHandler+0xac>)
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <DHT22_IRQHandler+0xa8>)
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <DHT22_IRQHandler+0xa8>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	e025      	b.n	8000b60 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <DHT22_IRQHandler+0xac>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d305      	bcc.n	8000b2a <DHT22_IRQHandler+0x4a>
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <DHT22_IRQHandler+0xac>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	e006      	b.n	8000b38 <DHT22_IRQHandler+0x58>
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <DHT22_IRQHandler+0xac>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <DHT22_IRQHandler+0xb0>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	b2d9      	uxtb	r1, r3
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <DHT22_IRQHandler+0xb4>)
 8000b46:	5499      	strb	r1, [r3, r2]
		index++;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <DHT22_IRQHandler+0xb0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <DHT22_IRQHandler+0xb0>)
 8000b52:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <DHT22_IRQHandler+0xa8>)
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <DHT22_IRQHandler+0xa8>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f023 0320 	bic.w	r3, r3, #32
 8000b5e:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <DHT22_IRQHandler+0xb0>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b28      	cmp	r3, #40	; 0x28
 8000b66:	d905      	bls.n	8000b74 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <DHT22_IRQHandler+0xb0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <DHT22_IRQHandler+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <DHT22_IRQHandler+0xb8>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	615a      	str	r2, [r3, #20]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	200000c1 	.word	0x200000c1
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	200000c2 	.word	0x200000c2
 8000b90:	200000c4 	.word	0x200000c4
 8000b94:	20000098 	.word	0x20000098
 8000b98:	40010400 	.word	0x40010400

08000b9c <delay_us>:
#include "timing.h"
#include "stm32l1xx.h"

void delay_us(unsigned long delay)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32 - 1; //32 000 000 = 1s so 32 = 1 us
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <delay_us+0x48>)
 8000baa:	221f      	movs	r2, #31
 8000bac:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <delay_us+0x48>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <delay_us+0x48>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]

	  while(i < delay)
 8000bba:	e009      	b.n	8000bd0 <delay_us+0x34>
	  {
		  while(!((SysTick->CTRL) & 0x10000)){}
 8000bbc:	bf00      	nop
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <delay_us+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f9      	beq.n	8000bbe <delay_us+0x22>
		  i++;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
	  while(i < delay)
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3f1      	bcc.n	8000bbc <delay_us+0x20>
	  }
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <delay_ms>:

void delay_ms(unsigned long delay)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <delay_ms+0x48>)
 8000bf6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000bfa:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <delay_ms+0x48>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <delay_ms+0x48>)
 8000c04:	2205      	movs	r2, #5
 8000c06:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 8000c08:	e009      	b.n	8000c1e <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 8000c0a:	bf00      	nop
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <delay_ms+0x48>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f9      	beq.n	8000c0c <delay_ms+0x24>
		i++;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3f1      	bcc.n	8000c0a <delay_ms+0x22>
	}
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <SetSysClock>:
void SetSysClock(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <SetSysClock+0x100>)
 8000c40:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <SetSysClock+0x100>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000c4a:	bf00      	nop
 8000c4c:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <SetSysClock+0x100>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f9      	beq.n	8000c4c <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000c58:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <SetSysClock+0x100>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <SetSysClock+0x36>
  {
    status = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	e001      	b.n	8000c6e <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000c74:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <SetSysClock+0x100>)
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <SetSysClock+0x100>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c7e:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000c80:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <SetSysClock+0x100>)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <SetSysClock+0x100>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000c8a:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000c8c:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <SetSysClock+0x104>)
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <SetSysClock+0x104>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <SetSysClock+0x104>)
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <SetSysClock+0x104>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <SetSysClock+0x104>)
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <SetSysClock+0x104>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <SetSysClock+0x100>)
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <SetSysClock+0x100>)
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <SetSysClock+0x108>)
 8000cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc2:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000cc4:	bf00      	nop
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <SetSysClock+0x108>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f9      	bne.n	8000cc6 <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000cd2:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <SetSysClock+0x100>)
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <SetSysClock+0x100>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cdc:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <SetSysClock+0x100>)
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <SetSysClock+0x100>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ce8:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <SetSysClock+0x100>)
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <SetSysClock+0x100>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cf4:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <SetSysClock+0x100>)
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <SetSysClock+0x100>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d00:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000d02:	bf00      	nop
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <SetSysClock+0x100>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f9      	beq.n	8000d04 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <SetSysClock+0x100>)
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SetSysClock+0x100>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f043 0303 	orr.w	r3, r3, #3
 8000d1a:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000d1c:	bf00      	nop
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SetSysClock+0x100>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <SetSysClock+0xea>
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40023c00 	.word	0x40023c00
 8000d3c:	40007000 	.word	0x40007000

08000d40 <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
	char buffer[BUFFER_SIZE];

	// CMSIS Initializations

	SetSysClock();
 8000d46:	f7ff ff75 	bl	8000c34 <SetSysClock>
	SystemCoreClockUpdate();
 8000d4a:	f000 f887 	bl	8000e5c <SystemCoreClockUpdate>

	// Utils Initializationsd

	// Peripheral Initializations
	GPIO_init();
 8000d4e:	f7ff fa23 	bl	8000198 <GPIO_init>
	USART2_init();
 8000d52:	f7ff fbff 	bl	8000554 <USART2_init>
	TIM2_Init();
 8000d56:	f7ff fbc5 	bl	80004e4 <TIM2_Init>

	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	DHT22_init();
 8000d5a:	f7ff fcb9 	bl	80006d0 <DHT22_init>
	//ADC_init();

	while (1)
	{
		MODBUS_ProcessFrame();
 8000d5e:	f7ff fb05 	bl	800036c <MODBUS_ProcessFrame>
		delay_ms(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff ff40 	bl	8000be8 <delay_ms>
		MODBUS_ProcessFrame();
 8000d68:	e7f9      	b.n	8000d5e <main+0x1e>
	...

08000d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d92:	f000 f82f 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f000 f909 	bl	8000fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff ffd1 	bl	8000d40 <main>
  bx lr
 8000d9e:	4770      	bx	lr
  ldr r3, =_sidata
 8000da0:	08001bec 	.word	0x08001bec
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000da8:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000dac:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000db0:	20000158 	.word	0x20000158

08000db4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_IRQHandler>
	...

08000db8 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <_sbrk+0x34>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x16>
		heap_end = & end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x34>)
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <_sbrk+0x38>)
 8000dcc:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x34>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <_sbrk+0x34>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a03      	ldr	r2, [pc, #12]	; (8000dec <_sbrk+0x34>)
 8000dde:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000de0:	68fb      	ldr	r3, [r7, #12]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	200000c8 	.word	0x200000c8
 8000df0:	20000158 	.word	0x20000158

08000df4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <SystemInit+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <SystemInit+0x5c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000e04:	4912      	ldr	r1, [pc, #72]	; (8000e50 <SystemInit+0x5c>)
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <SystemInit+0x5c>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <SystemInit+0x60>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <SystemInit+0x5c>)
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <SystemInit+0x5c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000e1a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000e1e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <SystemInit+0x5c>)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <SystemInit+0x5c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <SystemInit+0x5c>)
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SystemInit+0x5c>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000e36:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SystemInit+0x5c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x64>)
 8000e40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e44:	609a      	str	r2, [r3, #8]
#endif
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	88ffc00c 	.word	0x88ffc00c
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e76:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	d863      	bhi.n	8000f4e <SystemCoreClockUpdate+0xf2>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <SystemCoreClockUpdate+0x30>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000ec1 	.word	0x08000ec1
 8000e90:	08000f4f 	.word	0x08000f4f
 8000e94:	08000f4f 	.word	0x08000f4f
 8000e98:	08000f4f 	.word	0x08000f4f
 8000e9c:	08000ee1 	.word	0x08000ee1
 8000ea0:	08000f4f 	.word	0x08000f4f
 8000ea4:	08000f4f 	.word	0x08000f4f
 8000ea8:	08000f4f 	.word	0x08000f4f
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	08000f4f 	.word	0x08000f4f
 8000eb4:	08000f4f 	.word	0x08000f4f
 8000eb8:	08000f4f 	.word	0x08000f4f
 8000ebc:	08000ef1 	.word	0x08000ef1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	0b5b      	lsrs	r3, r3, #13
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000edc:	601a      	str	r2, [r3, #0]
      break;
 8000ede:	e046      	b.n	8000f6e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <SystemCoreClockUpdate+0x144>)
 8000ee4:	601a      	str	r2, [r3, #0]
      break;
 8000ee6:	e042      	b.n	8000f6e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <SystemCoreClockUpdate+0x144>)
 8000eec:	601a      	str	r2, [r3, #0]
      break;
 8000eee:	e03e      	b.n	8000f6e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ef8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000f02:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <SystemCoreClockUpdate+0x148>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	0d9b      	lsrs	r3, r3, #22
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <SystemCoreClockUpdate+0x144>)
 8000f2a:	fb02 f203 	mul.w	r2, r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000f36:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000f38:	e019      	b.n	8000f6e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <SystemCoreClockUpdate+0x144>)
 8000f3e:	fb02 f203 	mul.w	r2, r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000f4a:	6013      	str	r3, [r2, #0]
      break;
 8000f4c:	e00f      	b.n	8000f6e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	0b5b      	lsrs	r3, r3, #13
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000f6a:	601a      	str	r2, [r3, #0]
      break;
 8000f6c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <SystemCoreClockUpdate+0x13c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <SystemCoreClockUpdate+0x14c>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <SystemCoreClockUpdate+0x140>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	007a1200 	.word	0x007a1200
 8000fa4:	08001b94 	.word	0x08001b94
 8000fa8:	08001ba0 	.word	0x08001ba0

08000fac <__libc_init_array>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	2500      	movs	r5, #0
 8000fb0:	4e0c      	ldr	r6, [pc, #48]	; (8000fe4 <__libc_init_array+0x38>)
 8000fb2:	4c0d      	ldr	r4, [pc, #52]	; (8000fe8 <__libc_init_array+0x3c>)
 8000fb4:	1ba4      	subs	r4, r4, r6
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	42a5      	cmp	r5, r4
 8000fba:	d109      	bne.n	8000fd0 <__libc_init_array+0x24>
 8000fbc:	f000 fc54 	bl	8001868 <_init>
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	4e0a      	ldr	r6, [pc, #40]	; (8000fec <__libc_init_array+0x40>)
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <__libc_init_array+0x44>)
 8000fc6:	1ba4      	subs	r4, r4, r6
 8000fc8:	10a4      	asrs	r4, r4, #2
 8000fca:	42a5      	cmp	r5, r4
 8000fcc:	d105      	bne.n	8000fda <__libc_init_array+0x2e>
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd4:	4798      	blx	r3
 8000fd6:	3501      	adds	r5, #1
 8000fd8:	e7ee      	b.n	8000fb8 <__libc_init_array+0xc>
 8000fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fde:	4798      	blx	r3
 8000fe0:	3501      	adds	r5, #1
 8000fe2:	e7f2      	b.n	8000fca <__libc_init_array+0x1e>
 8000fe4:	08001be4 	.word	0x08001be4
 8000fe8:	08001be4 	.word	0x08001be4
 8000fec:	08001be4 	.word	0x08001be4
 8000ff0:	08001be8 	.word	0x08001be8

08000ff4 <sniprintf>:
 8000ff4:	b40c      	push	{r2, r3}
 8000ff6:	b530      	push	{r4, r5, lr}
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <sniprintf+0x64>)
 8000ffa:	1e0c      	subs	r4, r1, #0
 8000ffc:	b09d      	sub	sp, #116	; 0x74
 8000ffe:	681d      	ldr	r5, [r3, #0]
 8001000:	da08      	bge.n	8001014 <sniprintf+0x20>
 8001002:	238b      	movs	r3, #139	; 0x8b
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	602b      	str	r3, [r5, #0]
 800100a:	b01d      	add	sp, #116	; 0x74
 800100c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001010:	b002      	add	sp, #8
 8001012:	4770      	bx	lr
 8001014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001018:	f8ad 3014 	strh.w	r3, [sp, #20]
 800101c:	bf0c      	ite	eq
 800101e:	4623      	moveq	r3, r4
 8001020:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001024:	9304      	str	r3, [sp, #16]
 8001026:	9307      	str	r3, [sp, #28]
 8001028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102c:	9002      	str	r0, [sp, #8]
 800102e:	9006      	str	r0, [sp, #24]
 8001030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001036:	ab21      	add	r3, sp, #132	; 0x84
 8001038:	a902      	add	r1, sp, #8
 800103a:	4628      	mov	r0, r5
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f000 f913 	bl	8001268 <_svfiprintf_r>
 8001042:	1c43      	adds	r3, r0, #1
 8001044:	bfbc      	itt	lt
 8001046:	238b      	movlt	r3, #139	; 0x8b
 8001048:	602b      	strlt	r3, [r5, #0]
 800104a:	2c00      	cmp	r4, #0
 800104c:	d0dd      	beq.n	800100a <sniprintf+0x16>
 800104e:	2200      	movs	r2, #0
 8001050:	9b02      	ldr	r3, [sp, #8]
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e7d9      	b.n	800100a <sniprintf+0x16>
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <_free_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4605      	mov	r5, r0
 8001060:	2900      	cmp	r1, #0
 8001062:	d043      	beq.n	80010ec <_free_r+0x90>
 8001064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001068:	1f0c      	subs	r4, r1, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	bfb8      	it	lt
 800106e:	18e4      	addlt	r4, r4, r3
 8001070:	f000 fbc9 	bl	8001806 <__malloc_lock>
 8001074:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <_free_r+0x94>)
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	4610      	mov	r0, r2
 800107a:	b933      	cbnz	r3, 800108a <_free_r+0x2e>
 800107c:	6063      	str	r3, [r4, #4]
 800107e:	6014      	str	r4, [r2, #0]
 8001080:	4628      	mov	r0, r5
 8001082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001086:	f000 bbbf 	b.w	8001808 <__malloc_unlock>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d90b      	bls.n	80010a6 <_free_r+0x4a>
 800108e:	6821      	ldr	r1, [r4, #0]
 8001090:	1862      	adds	r2, r4, r1
 8001092:	4293      	cmp	r3, r2
 8001094:	bf01      	itttt	eq
 8001096:	681a      	ldreq	r2, [r3, #0]
 8001098:	685b      	ldreq	r3, [r3, #4]
 800109a:	1852      	addeq	r2, r2, r1
 800109c:	6022      	streq	r2, [r4, #0]
 800109e:	6063      	str	r3, [r4, #4]
 80010a0:	6004      	str	r4, [r0, #0]
 80010a2:	e7ed      	b.n	8001080 <_free_r+0x24>
 80010a4:	4613      	mov	r3, r2
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	b10a      	cbz	r2, 80010ae <_free_r+0x52>
 80010aa:	42a2      	cmp	r2, r4
 80010ac:	d9fa      	bls.n	80010a4 <_free_r+0x48>
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	1858      	adds	r0, r3, r1
 80010b2:	42a0      	cmp	r0, r4
 80010b4:	d10b      	bne.n	80010ce <_free_r+0x72>
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	4401      	add	r1, r0
 80010ba:	1858      	adds	r0, r3, r1
 80010bc:	4282      	cmp	r2, r0
 80010be:	6019      	str	r1, [r3, #0]
 80010c0:	d1de      	bne.n	8001080 <_free_r+0x24>
 80010c2:	6810      	ldr	r0, [r2, #0]
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	4401      	add	r1, r0
 80010c8:	6019      	str	r1, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	e7d8      	b.n	8001080 <_free_r+0x24>
 80010ce:	d902      	bls.n	80010d6 <_free_r+0x7a>
 80010d0:	230c      	movs	r3, #12
 80010d2:	602b      	str	r3, [r5, #0]
 80010d4:	e7d4      	b.n	8001080 <_free_r+0x24>
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	1821      	adds	r1, r4, r0
 80010da:	428a      	cmp	r2, r1
 80010dc:	bf01      	itttt	eq
 80010de:	6811      	ldreq	r1, [r2, #0]
 80010e0:	6852      	ldreq	r2, [r2, #4]
 80010e2:	1809      	addeq	r1, r1, r0
 80010e4:	6021      	streq	r1, [r4, #0]
 80010e6:	6062      	str	r2, [r4, #4]
 80010e8:	605c      	str	r4, [r3, #4]
 80010ea:	e7c9      	b.n	8001080 <_free_r+0x24>
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	200000cc 	.word	0x200000cc

080010f4 <_malloc_r>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	1ccd      	adds	r5, r1, #3
 80010f8:	f025 0503 	bic.w	r5, r5, #3
 80010fc:	3508      	adds	r5, #8
 80010fe:	2d0c      	cmp	r5, #12
 8001100:	bf38      	it	cc
 8001102:	250c      	movcc	r5, #12
 8001104:	2d00      	cmp	r5, #0
 8001106:	4606      	mov	r6, r0
 8001108:	db01      	blt.n	800110e <_malloc_r+0x1a>
 800110a:	42a9      	cmp	r1, r5
 800110c:	d903      	bls.n	8001116 <_malloc_r+0x22>
 800110e:	230c      	movs	r3, #12
 8001110:	6033      	str	r3, [r6, #0]
 8001112:	2000      	movs	r0, #0
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	f000 fb76 	bl	8001806 <__malloc_lock>
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <_malloc_r+0xb4>)
 800111c:	6814      	ldr	r4, [r2, #0]
 800111e:	4621      	mov	r1, r4
 8001120:	b991      	cbnz	r1, 8001148 <_malloc_r+0x54>
 8001122:	4c22      	ldr	r4, [pc, #136]	; (80011ac <_malloc_r+0xb8>)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	b91b      	cbnz	r3, 8001130 <_malloc_r+0x3c>
 8001128:	4630      	mov	r0, r6
 800112a:	f000 fb29 	bl	8001780 <_sbrk_r>
 800112e:	6020      	str	r0, [r4, #0]
 8001130:	4629      	mov	r1, r5
 8001132:	4630      	mov	r0, r6
 8001134:	f000 fb24 	bl	8001780 <_sbrk_r>
 8001138:	1c43      	adds	r3, r0, #1
 800113a:	d126      	bne.n	800118a <_malloc_r+0x96>
 800113c:	230c      	movs	r3, #12
 800113e:	4630      	mov	r0, r6
 8001140:	6033      	str	r3, [r6, #0]
 8001142:	f000 fb61 	bl	8001808 <__malloc_unlock>
 8001146:	e7e4      	b.n	8001112 <_malloc_r+0x1e>
 8001148:	680b      	ldr	r3, [r1, #0]
 800114a:	1b5b      	subs	r3, r3, r5
 800114c:	d41a      	bmi.n	8001184 <_malloc_r+0x90>
 800114e:	2b0b      	cmp	r3, #11
 8001150:	d90f      	bls.n	8001172 <_malloc_r+0x7e>
 8001152:	600b      	str	r3, [r1, #0]
 8001154:	18cc      	adds	r4, r1, r3
 8001156:	50cd      	str	r5, [r1, r3]
 8001158:	4630      	mov	r0, r6
 800115a:	f000 fb55 	bl	8001808 <__malloc_unlock>
 800115e:	f104 000b 	add.w	r0, r4, #11
 8001162:	1d23      	adds	r3, r4, #4
 8001164:	f020 0007 	bic.w	r0, r0, #7
 8001168:	1ac3      	subs	r3, r0, r3
 800116a:	d01b      	beq.n	80011a4 <_malloc_r+0xb0>
 800116c:	425a      	negs	r2, r3
 800116e:	50e2      	str	r2, [r4, r3]
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	428c      	cmp	r4, r1
 8001174:	bf0b      	itete	eq
 8001176:	6863      	ldreq	r3, [r4, #4]
 8001178:	684b      	ldrne	r3, [r1, #4]
 800117a:	6013      	streq	r3, [r2, #0]
 800117c:	6063      	strne	r3, [r4, #4]
 800117e:	bf18      	it	ne
 8001180:	460c      	movne	r4, r1
 8001182:	e7e9      	b.n	8001158 <_malloc_r+0x64>
 8001184:	460c      	mov	r4, r1
 8001186:	6849      	ldr	r1, [r1, #4]
 8001188:	e7ca      	b.n	8001120 <_malloc_r+0x2c>
 800118a:	1cc4      	adds	r4, r0, #3
 800118c:	f024 0403 	bic.w	r4, r4, #3
 8001190:	42a0      	cmp	r0, r4
 8001192:	d005      	beq.n	80011a0 <_malloc_r+0xac>
 8001194:	1a21      	subs	r1, r4, r0
 8001196:	4630      	mov	r0, r6
 8001198:	f000 faf2 	bl	8001780 <_sbrk_r>
 800119c:	3001      	adds	r0, #1
 800119e:	d0cd      	beq.n	800113c <_malloc_r+0x48>
 80011a0:	6025      	str	r5, [r4, #0]
 80011a2:	e7d9      	b.n	8001158 <_malloc_r+0x64>
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	bf00      	nop
 80011a8:	200000cc 	.word	0x200000cc
 80011ac:	200000d0 	.word	0x200000d0

080011b0 <__ssputs_r>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	688e      	ldr	r6, [r1, #8]
 80011b6:	4682      	mov	sl, r0
 80011b8:	429e      	cmp	r6, r3
 80011ba:	460c      	mov	r4, r1
 80011bc:	4691      	mov	r9, r2
 80011be:	4698      	mov	r8, r3
 80011c0:	d835      	bhi.n	800122e <__ssputs_r+0x7e>
 80011c2:	898a      	ldrh	r2, [r1, #12]
 80011c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80011c8:	d031      	beq.n	800122e <__ssputs_r+0x7e>
 80011ca:	2302      	movs	r3, #2
 80011cc:	6825      	ldr	r5, [r4, #0]
 80011ce:	6909      	ldr	r1, [r1, #16]
 80011d0:	1a6f      	subs	r7, r5, r1
 80011d2:	6965      	ldr	r5, [r4, #20]
 80011d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80011dc:	f108 0301 	add.w	r3, r8, #1
 80011e0:	443b      	add	r3, r7
 80011e2:	429d      	cmp	r5, r3
 80011e4:	bf38      	it	cc
 80011e6:	461d      	movcc	r5, r3
 80011e8:	0553      	lsls	r3, r2, #21
 80011ea:	d531      	bpl.n	8001250 <__ssputs_r+0xa0>
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff ff81 	bl	80010f4 <_malloc_r>
 80011f2:	4606      	mov	r6, r0
 80011f4:	b950      	cbnz	r0, 800120c <__ssputs_r+0x5c>
 80011f6:	230c      	movs	r3, #12
 80011f8:	f8ca 3000 	str.w	r3, [sl]
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001206:	81a3      	strh	r3, [r4, #12]
 8001208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120c:	463a      	mov	r2, r7
 800120e:	6921      	ldr	r1, [r4, #16]
 8001210:	f000 fad4 	bl	80017bc <memcpy>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800121a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	6126      	str	r6, [r4, #16]
 8001222:	443e      	add	r6, r7
 8001224:	6026      	str	r6, [r4, #0]
 8001226:	4646      	mov	r6, r8
 8001228:	6165      	str	r5, [r4, #20]
 800122a:	1bed      	subs	r5, r5, r7
 800122c:	60a5      	str	r5, [r4, #8]
 800122e:	4546      	cmp	r6, r8
 8001230:	bf28      	it	cs
 8001232:	4646      	movcs	r6, r8
 8001234:	4649      	mov	r1, r9
 8001236:	4632      	mov	r2, r6
 8001238:	6820      	ldr	r0, [r4, #0]
 800123a:	f000 faca 	bl	80017d2 <memmove>
 800123e:	68a3      	ldr	r3, [r4, #8]
 8001240:	2000      	movs	r0, #0
 8001242:	1b9b      	subs	r3, r3, r6
 8001244:	60a3      	str	r3, [r4, #8]
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	441e      	add	r6, r3
 800124a:	6026      	str	r6, [r4, #0]
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001250:	462a      	mov	r2, r5
 8001252:	f000 fada 	bl	800180a <_realloc_r>
 8001256:	4606      	mov	r6, r0
 8001258:	2800      	cmp	r0, #0
 800125a:	d1e1      	bne.n	8001220 <__ssputs_r+0x70>
 800125c:	6921      	ldr	r1, [r4, #16]
 800125e:	4650      	mov	r0, sl
 8001260:	f7ff fefc 	bl	800105c <_free_r>
 8001264:	e7c7      	b.n	80011f6 <__ssputs_r+0x46>
	...

08001268 <_svfiprintf_r>:
 8001268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126c:	b09d      	sub	sp, #116	; 0x74
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	898b      	ldrh	r3, [r1, #12]
 8001272:	4680      	mov	r8, r0
 8001274:	061c      	lsls	r4, r3, #24
 8001276:	460d      	mov	r5, r1
 8001278:	4616      	mov	r6, r2
 800127a:	d50f      	bpl.n	800129c <_svfiprintf_r+0x34>
 800127c:	690b      	ldr	r3, [r1, #16]
 800127e:	b96b      	cbnz	r3, 800129c <_svfiprintf_r+0x34>
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	f7ff ff37 	bl	80010f4 <_malloc_r>
 8001286:	6028      	str	r0, [r5, #0]
 8001288:	6128      	str	r0, [r5, #16]
 800128a:	b928      	cbnz	r0, 8001298 <_svfiprintf_r+0x30>
 800128c:	230c      	movs	r3, #12
 800128e:	f8c8 3000 	str.w	r3, [r8]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	e0c4      	b.n	8001422 <_svfiprintf_r+0x1ba>
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	616b      	str	r3, [r5, #20]
 800129c:	2300      	movs	r3, #0
 800129e:	9309      	str	r3, [sp, #36]	; 0x24
 80012a0:	2320      	movs	r3, #32
 80012a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012a6:	2330      	movs	r3, #48	; 0x30
 80012a8:	f04f 0b01 	mov.w	fp, #1
 80012ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012b0:	4637      	mov	r7, r6
 80012b2:	463c      	mov	r4, r7
 80012b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d13c      	bne.n	8001336 <_svfiprintf_r+0xce>
 80012bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80012c0:	d00b      	beq.n	80012da <_svfiprintf_r+0x72>
 80012c2:	4653      	mov	r3, sl
 80012c4:	4632      	mov	r2, r6
 80012c6:	4629      	mov	r1, r5
 80012c8:	4640      	mov	r0, r8
 80012ca:	f7ff ff71 	bl	80011b0 <__ssputs_r>
 80012ce:	3001      	adds	r0, #1
 80012d0:	f000 80a2 	beq.w	8001418 <_svfiprintf_r+0x1b0>
 80012d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012d6:	4453      	add	r3, sl
 80012d8:	9309      	str	r3, [sp, #36]	; 0x24
 80012da:	783b      	ldrb	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 809b 	beq.w	8001418 <_svfiprintf_r+0x1b0>
 80012e2:	2300      	movs	r3, #0
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	9304      	str	r3, [sp, #16]
 80012ea:	9307      	str	r3, [sp, #28]
 80012ec:	9205      	str	r2, [sp, #20]
 80012ee:	9306      	str	r3, [sp, #24]
 80012f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012f4:	931a      	str	r3, [sp, #104]	; 0x68
 80012f6:	2205      	movs	r2, #5
 80012f8:	7821      	ldrb	r1, [r4, #0]
 80012fa:	4850      	ldr	r0, [pc, #320]	; (800143c <_svfiprintf_r+0x1d4>)
 80012fc:	f000 fa50 	bl	80017a0 <memchr>
 8001300:	1c67      	adds	r7, r4, #1
 8001302:	9b04      	ldr	r3, [sp, #16]
 8001304:	b9d8      	cbnz	r0, 800133e <_svfiprintf_r+0xd6>
 8001306:	06d9      	lsls	r1, r3, #27
 8001308:	bf44      	itt	mi
 800130a:	2220      	movmi	r2, #32
 800130c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001310:	071a      	lsls	r2, r3, #28
 8001312:	bf44      	itt	mi
 8001314:	222b      	movmi	r2, #43	; 0x2b
 8001316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800131a:	7822      	ldrb	r2, [r4, #0]
 800131c:	2a2a      	cmp	r2, #42	; 0x2a
 800131e:	d016      	beq.n	800134e <_svfiprintf_r+0xe6>
 8001320:	2100      	movs	r1, #0
 8001322:	200a      	movs	r0, #10
 8001324:	9a07      	ldr	r2, [sp, #28]
 8001326:	4627      	mov	r7, r4
 8001328:	783b      	ldrb	r3, [r7, #0]
 800132a:	3401      	adds	r4, #1
 800132c:	3b30      	subs	r3, #48	; 0x30
 800132e:	2b09      	cmp	r3, #9
 8001330:	d950      	bls.n	80013d4 <_svfiprintf_r+0x16c>
 8001332:	b1c9      	cbz	r1, 8001368 <_svfiprintf_r+0x100>
 8001334:	e011      	b.n	800135a <_svfiprintf_r+0xf2>
 8001336:	2b25      	cmp	r3, #37	; 0x25
 8001338:	d0c0      	beq.n	80012bc <_svfiprintf_r+0x54>
 800133a:	4627      	mov	r7, r4
 800133c:	e7b9      	b.n	80012b2 <_svfiprintf_r+0x4a>
 800133e:	4a3f      	ldr	r2, [pc, #252]	; (800143c <_svfiprintf_r+0x1d4>)
 8001340:	463c      	mov	r4, r7
 8001342:	1a80      	subs	r0, r0, r2
 8001344:	fa0b f000 	lsl.w	r0, fp, r0
 8001348:	4318      	orrs	r0, r3
 800134a:	9004      	str	r0, [sp, #16]
 800134c:	e7d3      	b.n	80012f6 <_svfiprintf_r+0x8e>
 800134e:	9a03      	ldr	r2, [sp, #12]
 8001350:	1d11      	adds	r1, r2, #4
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	9103      	str	r1, [sp, #12]
 8001356:	2a00      	cmp	r2, #0
 8001358:	db01      	blt.n	800135e <_svfiprintf_r+0xf6>
 800135a:	9207      	str	r2, [sp, #28]
 800135c:	e004      	b.n	8001368 <_svfiprintf_r+0x100>
 800135e:	4252      	negs	r2, r2
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	9207      	str	r2, [sp, #28]
 8001366:	9304      	str	r3, [sp, #16]
 8001368:	783b      	ldrb	r3, [r7, #0]
 800136a:	2b2e      	cmp	r3, #46	; 0x2e
 800136c:	d10d      	bne.n	800138a <_svfiprintf_r+0x122>
 800136e:	787b      	ldrb	r3, [r7, #1]
 8001370:	1c79      	adds	r1, r7, #1
 8001372:	2b2a      	cmp	r3, #42	; 0x2a
 8001374:	d132      	bne.n	80013dc <_svfiprintf_r+0x174>
 8001376:	9b03      	ldr	r3, [sp, #12]
 8001378:	3702      	adds	r7, #2
 800137a:	1d1a      	adds	r2, r3, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	9203      	str	r2, [sp, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	bfb8      	it	lt
 8001384:	f04f 33ff 	movlt.w	r3, #4294967295
 8001388:	9305      	str	r3, [sp, #20]
 800138a:	4c2d      	ldr	r4, [pc, #180]	; (8001440 <_svfiprintf_r+0x1d8>)
 800138c:	2203      	movs	r2, #3
 800138e:	7839      	ldrb	r1, [r7, #0]
 8001390:	4620      	mov	r0, r4
 8001392:	f000 fa05 	bl	80017a0 <memchr>
 8001396:	b138      	cbz	r0, 80013a8 <_svfiprintf_r+0x140>
 8001398:	2340      	movs	r3, #64	; 0x40
 800139a:	1b00      	subs	r0, r0, r4
 800139c:	fa03 f000 	lsl.w	r0, r3, r0
 80013a0:	9b04      	ldr	r3, [sp, #16]
 80013a2:	3701      	adds	r7, #1
 80013a4:	4303      	orrs	r3, r0
 80013a6:	9304      	str	r3, [sp, #16]
 80013a8:	7839      	ldrb	r1, [r7, #0]
 80013aa:	2206      	movs	r2, #6
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <_svfiprintf_r+0x1dc>)
 80013ae:	1c7e      	adds	r6, r7, #1
 80013b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013b4:	f000 f9f4 	bl	80017a0 <memchr>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d035      	beq.n	8001428 <_svfiprintf_r+0x1c0>
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <_svfiprintf_r+0x1e0>)
 80013be:	b9fb      	cbnz	r3, 8001400 <_svfiprintf_r+0x198>
 80013c0:	9b03      	ldr	r3, [sp, #12]
 80013c2:	3307      	adds	r3, #7
 80013c4:	f023 0307 	bic.w	r3, r3, #7
 80013c8:	3308      	adds	r3, #8
 80013ca:	9303      	str	r3, [sp, #12]
 80013cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ce:	444b      	add	r3, r9
 80013d0:	9309      	str	r3, [sp, #36]	; 0x24
 80013d2:	e76d      	b.n	80012b0 <_svfiprintf_r+0x48>
 80013d4:	fb00 3202 	mla	r2, r0, r2, r3
 80013d8:	2101      	movs	r1, #1
 80013da:	e7a4      	b.n	8001326 <_svfiprintf_r+0xbe>
 80013dc:	2300      	movs	r3, #0
 80013de:	240a      	movs	r4, #10
 80013e0:	4618      	mov	r0, r3
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	460f      	mov	r7, r1
 80013e6:	783a      	ldrb	r2, [r7, #0]
 80013e8:	3101      	adds	r1, #1
 80013ea:	3a30      	subs	r2, #48	; 0x30
 80013ec:	2a09      	cmp	r2, #9
 80013ee:	d903      	bls.n	80013f8 <_svfiprintf_r+0x190>
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ca      	beq.n	800138a <_svfiprintf_r+0x122>
 80013f4:	9005      	str	r0, [sp, #20]
 80013f6:	e7c8      	b.n	800138a <_svfiprintf_r+0x122>
 80013f8:	fb04 2000 	mla	r0, r4, r0, r2
 80013fc:	2301      	movs	r3, #1
 80013fe:	e7f1      	b.n	80013e4 <_svfiprintf_r+0x17c>
 8001400:	ab03      	add	r3, sp, #12
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	462a      	mov	r2, r5
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <_svfiprintf_r+0x1e4>)
 8001408:	a904      	add	r1, sp, #16
 800140a:	4640      	mov	r0, r8
 800140c:	f3af 8000 	nop.w
 8001410:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001414:	4681      	mov	r9, r0
 8001416:	d1d9      	bne.n	80013cc <_svfiprintf_r+0x164>
 8001418:	89ab      	ldrh	r3, [r5, #12]
 800141a:	065b      	lsls	r3, r3, #25
 800141c:	f53f af39 	bmi.w	8001292 <_svfiprintf_r+0x2a>
 8001420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001422:	b01d      	add	sp, #116	; 0x74
 8001424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001428:	ab03      	add	r3, sp, #12
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	462a      	mov	r2, r5
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_svfiprintf_r+0x1e4>)
 8001430:	a904      	add	r1, sp, #16
 8001432:	4640      	mov	r0, r8
 8001434:	f000 f884 	bl	8001540 <_printf_i>
 8001438:	e7ea      	b.n	8001410 <_svfiprintf_r+0x1a8>
 800143a:	bf00      	nop
 800143c:	08001bb0 	.word	0x08001bb0
 8001440:	08001bb6 	.word	0x08001bb6
 8001444:	08001bba 	.word	0x08001bba
 8001448:	00000000 	.word	0x00000000
 800144c:	080011b1 	.word	0x080011b1

08001450 <_printf_common>:
 8001450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001454:	4691      	mov	r9, r2
 8001456:	461f      	mov	r7, r3
 8001458:	688a      	ldr	r2, [r1, #8]
 800145a:	690b      	ldr	r3, [r1, #16]
 800145c:	4606      	mov	r6, r0
 800145e:	4293      	cmp	r3, r2
 8001460:	bfb8      	it	lt
 8001462:	4613      	movlt	r3, r2
 8001464:	f8c9 3000 	str.w	r3, [r9]
 8001468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800146c:	460c      	mov	r4, r1
 800146e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001472:	b112      	cbz	r2, 800147a <_printf_common+0x2a>
 8001474:	3301      	adds	r3, #1
 8001476:	f8c9 3000 	str.w	r3, [r9]
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	0699      	lsls	r1, r3, #26
 800147e:	bf42      	ittt	mi
 8001480:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001484:	3302      	addmi	r3, #2
 8001486:	f8c9 3000 	strmi.w	r3, [r9]
 800148a:	6825      	ldr	r5, [r4, #0]
 800148c:	f015 0506 	ands.w	r5, r5, #6
 8001490:	d107      	bne.n	80014a2 <_printf_common+0x52>
 8001492:	f104 0a19 	add.w	sl, r4, #25
 8001496:	68e3      	ldr	r3, [r4, #12]
 8001498:	f8d9 2000 	ldr.w	r2, [r9]
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	429d      	cmp	r5, r3
 80014a0:	db2a      	blt.n	80014f8 <_printf_common+0xa8>
 80014a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	3300      	adds	r3, #0
 80014aa:	bf18      	it	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	0692      	lsls	r2, r2, #26
 80014b0:	d42f      	bmi.n	8001512 <_printf_common+0xc2>
 80014b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014b6:	4639      	mov	r1, r7
 80014b8:	4630      	mov	r0, r6
 80014ba:	47c0      	blx	r8
 80014bc:	3001      	adds	r0, #1
 80014be:	d022      	beq.n	8001506 <_printf_common+0xb6>
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	68e5      	ldr	r5, [r4, #12]
 80014c4:	f003 0306 	and.w	r3, r3, #6
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	bf18      	it	ne
 80014cc:	2500      	movne	r5, #0
 80014ce:	f8d9 2000 	ldr.w	r2, [r9]
 80014d2:	f04f 0900 	mov.w	r9, #0
 80014d6:	bf08      	it	eq
 80014d8:	1aad      	subeq	r5, r5, r2
 80014da:	68a3      	ldr	r3, [r4, #8]
 80014dc:	6922      	ldr	r2, [r4, #16]
 80014de:	bf08      	it	eq
 80014e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014e4:	4293      	cmp	r3, r2
 80014e6:	bfc4      	itt	gt
 80014e8:	1a9b      	subgt	r3, r3, r2
 80014ea:	18ed      	addgt	r5, r5, r3
 80014ec:	341a      	adds	r4, #26
 80014ee:	454d      	cmp	r5, r9
 80014f0:	d11b      	bne.n	800152a <_printf_common+0xda>
 80014f2:	2000      	movs	r0, #0
 80014f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014f8:	2301      	movs	r3, #1
 80014fa:	4652      	mov	r2, sl
 80014fc:	4639      	mov	r1, r7
 80014fe:	4630      	mov	r0, r6
 8001500:	47c0      	blx	r8
 8001502:	3001      	adds	r0, #1
 8001504:	d103      	bne.n	800150e <_printf_common+0xbe>
 8001506:	f04f 30ff 	mov.w	r0, #4294967295
 800150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150e:	3501      	adds	r5, #1
 8001510:	e7c1      	b.n	8001496 <_printf_common+0x46>
 8001512:	2030      	movs	r0, #48	; 0x30
 8001514:	18e1      	adds	r1, r4, r3
 8001516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001520:	4422      	add	r2, r4
 8001522:	3302      	adds	r3, #2
 8001524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001528:	e7c3      	b.n	80014b2 <_printf_common+0x62>
 800152a:	2301      	movs	r3, #1
 800152c:	4622      	mov	r2, r4
 800152e:	4639      	mov	r1, r7
 8001530:	4630      	mov	r0, r6
 8001532:	47c0      	blx	r8
 8001534:	3001      	adds	r0, #1
 8001536:	d0e6      	beq.n	8001506 <_printf_common+0xb6>
 8001538:	f109 0901 	add.w	r9, r9, #1
 800153c:	e7d7      	b.n	80014ee <_printf_common+0x9e>
	...

08001540 <_printf_i>:
 8001540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001544:	4617      	mov	r7, r2
 8001546:	7e0a      	ldrb	r2, [r1, #24]
 8001548:	b085      	sub	sp, #20
 800154a:	2a6e      	cmp	r2, #110	; 0x6e
 800154c:	4698      	mov	r8, r3
 800154e:	4606      	mov	r6, r0
 8001550:	460c      	mov	r4, r1
 8001552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001554:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001558:	f000 80bc 	beq.w	80016d4 <_printf_i+0x194>
 800155c:	d81a      	bhi.n	8001594 <_printf_i+0x54>
 800155e:	2a63      	cmp	r2, #99	; 0x63
 8001560:	d02e      	beq.n	80015c0 <_printf_i+0x80>
 8001562:	d80a      	bhi.n	800157a <_printf_i+0x3a>
 8001564:	2a00      	cmp	r2, #0
 8001566:	f000 80c8 	beq.w	80016fa <_printf_i+0x1ba>
 800156a:	2a58      	cmp	r2, #88	; 0x58
 800156c:	f000 808a 	beq.w	8001684 <_printf_i+0x144>
 8001570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001574:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001578:	e02a      	b.n	80015d0 <_printf_i+0x90>
 800157a:	2a64      	cmp	r2, #100	; 0x64
 800157c:	d001      	beq.n	8001582 <_printf_i+0x42>
 800157e:	2a69      	cmp	r2, #105	; 0x69
 8001580:	d1f6      	bne.n	8001570 <_printf_i+0x30>
 8001582:	6821      	ldr	r1, [r4, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f011 0f80 	tst.w	r1, #128	; 0x80
 800158a:	d023      	beq.n	80015d4 <_printf_i+0x94>
 800158c:	1d11      	adds	r1, r2, #4
 800158e:	6019      	str	r1, [r3, #0]
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	e027      	b.n	80015e4 <_printf_i+0xa4>
 8001594:	2a73      	cmp	r2, #115	; 0x73
 8001596:	f000 80b4 	beq.w	8001702 <_printf_i+0x1c2>
 800159a:	d808      	bhi.n	80015ae <_printf_i+0x6e>
 800159c:	2a6f      	cmp	r2, #111	; 0x6f
 800159e:	d02a      	beq.n	80015f6 <_printf_i+0xb6>
 80015a0:	2a70      	cmp	r2, #112	; 0x70
 80015a2:	d1e5      	bne.n	8001570 <_printf_i+0x30>
 80015a4:	680a      	ldr	r2, [r1, #0]
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	600a      	str	r2, [r1, #0]
 80015ac:	e003      	b.n	80015b6 <_printf_i+0x76>
 80015ae:	2a75      	cmp	r2, #117	; 0x75
 80015b0:	d021      	beq.n	80015f6 <_printf_i+0xb6>
 80015b2:	2a78      	cmp	r2, #120	; 0x78
 80015b4:	d1dc      	bne.n	8001570 <_printf_i+0x30>
 80015b6:	2278      	movs	r2, #120	; 0x78
 80015b8:	496f      	ldr	r1, [pc, #444]	; (8001778 <_printf_i+0x238>)
 80015ba:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015be:	e064      	b.n	800168a <_printf_i+0x14a>
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015c6:	1d11      	adds	r1, r2, #4
 80015c8:	6019      	str	r1, [r3, #0]
 80015ca:	6813      	ldr	r3, [r2, #0]
 80015cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0a3      	b.n	800171c <_printf_i+0x1dc>
 80015d4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015d8:	f102 0104 	add.w	r1, r2, #4
 80015dc:	6019      	str	r1, [r3, #0]
 80015de:	d0d7      	beq.n	8001590 <_printf_i+0x50>
 80015e0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da03      	bge.n	80015f0 <_printf_i+0xb0>
 80015e8:	222d      	movs	r2, #45	; 0x2d
 80015ea:	425b      	negs	r3, r3
 80015ec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80015f0:	4962      	ldr	r1, [pc, #392]	; (800177c <_printf_i+0x23c>)
 80015f2:	220a      	movs	r2, #10
 80015f4:	e017      	b.n	8001626 <_printf_i+0xe6>
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80015fe:	d003      	beq.n	8001608 <_printf_i+0xc8>
 8001600:	1d08      	adds	r0, r1, #4
 8001602:	6018      	str	r0, [r3, #0]
 8001604:	680b      	ldr	r3, [r1, #0]
 8001606:	e006      	b.n	8001616 <_printf_i+0xd6>
 8001608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800160c:	f101 0004 	add.w	r0, r1, #4
 8001610:	6018      	str	r0, [r3, #0]
 8001612:	d0f7      	beq.n	8001604 <_printf_i+0xc4>
 8001614:	880b      	ldrh	r3, [r1, #0]
 8001616:	2a6f      	cmp	r2, #111	; 0x6f
 8001618:	bf14      	ite	ne
 800161a:	220a      	movne	r2, #10
 800161c:	2208      	moveq	r2, #8
 800161e:	4957      	ldr	r1, [pc, #348]	; (800177c <_printf_i+0x23c>)
 8001620:	2000      	movs	r0, #0
 8001622:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001626:	6865      	ldr	r5, [r4, #4]
 8001628:	2d00      	cmp	r5, #0
 800162a:	60a5      	str	r5, [r4, #8]
 800162c:	f2c0 809c 	blt.w	8001768 <_printf_i+0x228>
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	f020 0004 	bic.w	r0, r0, #4
 8001636:	6020      	str	r0, [r4, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d13f      	bne.n	80016bc <_printf_i+0x17c>
 800163c:	2d00      	cmp	r5, #0
 800163e:	f040 8095 	bne.w	800176c <_printf_i+0x22c>
 8001642:	4675      	mov	r5, lr
 8001644:	2a08      	cmp	r2, #8
 8001646:	d10b      	bne.n	8001660 <_printf_i+0x120>
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	07da      	lsls	r2, r3, #31
 800164c:	d508      	bpl.n	8001660 <_printf_i+0x120>
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	6862      	ldr	r2, [r4, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	bfde      	ittt	le
 8001656:	2330      	movle	r3, #48	; 0x30
 8001658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800165c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001660:	ebae 0305 	sub.w	r3, lr, r5
 8001664:	6123      	str	r3, [r4, #16]
 8001666:	f8cd 8000 	str.w	r8, [sp]
 800166a:	463b      	mov	r3, r7
 800166c:	aa03      	add	r2, sp, #12
 800166e:	4621      	mov	r1, r4
 8001670:	4630      	mov	r0, r6
 8001672:	f7ff feed 	bl	8001450 <_printf_common>
 8001676:	3001      	adds	r0, #1
 8001678:	d155      	bne.n	8001726 <_printf_i+0x1e6>
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	b005      	add	sp, #20
 8001680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001684:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001688:	493c      	ldr	r1, [pc, #240]	; (800177c <_printf_i+0x23c>)
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001692:	f100 0504 	add.w	r5, r0, #4
 8001696:	601d      	str	r5, [r3, #0]
 8001698:	d001      	beq.n	800169e <_printf_i+0x15e>
 800169a:	6803      	ldr	r3, [r0, #0]
 800169c:	e002      	b.n	80016a4 <_printf_i+0x164>
 800169e:	0655      	lsls	r5, r2, #25
 80016a0:	d5fb      	bpl.n	800169a <_printf_i+0x15a>
 80016a2:	8803      	ldrh	r3, [r0, #0]
 80016a4:	07d0      	lsls	r0, r2, #31
 80016a6:	bf44      	itt	mi
 80016a8:	f042 0220 	orrmi.w	r2, r2, #32
 80016ac:	6022      	strmi	r2, [r4, #0]
 80016ae:	b91b      	cbnz	r3, 80016b8 <_printf_i+0x178>
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	f022 0220 	bic.w	r2, r2, #32
 80016b6:	6022      	str	r2, [r4, #0]
 80016b8:	2210      	movs	r2, #16
 80016ba:	e7b1      	b.n	8001620 <_printf_i+0xe0>
 80016bc:	4675      	mov	r5, lr
 80016be:	fbb3 f0f2 	udiv	r0, r3, r2
 80016c2:	fb02 3310 	mls	r3, r2, r0, r3
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016cc:	4603      	mov	r3, r0
 80016ce:	2800      	cmp	r0, #0
 80016d0:	d1f5      	bne.n	80016be <_printf_i+0x17e>
 80016d2:	e7b7      	b.n	8001644 <_printf_i+0x104>
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016dc:	6949      	ldr	r1, [r1, #20]
 80016de:	d004      	beq.n	80016ea <_printf_i+0x1aa>
 80016e0:	1d10      	adds	r0, r2, #4
 80016e2:	6018      	str	r0, [r3, #0]
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	6019      	str	r1, [r3, #0]
 80016e8:	e007      	b.n	80016fa <_printf_i+0x1ba>
 80016ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016ee:	f102 0004 	add.w	r0, r2, #4
 80016f2:	6018      	str	r0, [r3, #0]
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	d0f6      	beq.n	80016e6 <_printf_i+0x1a6>
 80016f8:	8019      	strh	r1, [r3, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	4675      	mov	r5, lr
 80016fe:	6123      	str	r3, [r4, #16]
 8001700:	e7b1      	b.n	8001666 <_printf_i+0x126>
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	1d11      	adds	r1, r2, #4
 8001706:	6019      	str	r1, [r3, #0]
 8001708:	6815      	ldr	r5, [r2, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	4628      	mov	r0, r5
 8001710:	f000 f846 	bl	80017a0 <memchr>
 8001714:	b108      	cbz	r0, 800171a <_printf_i+0x1da>
 8001716:	1b40      	subs	r0, r0, r5
 8001718:	6060      	str	r0, [r4, #4]
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	6123      	str	r3, [r4, #16]
 800171e:	2300      	movs	r3, #0
 8001720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001724:	e79f      	b.n	8001666 <_printf_i+0x126>
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	462a      	mov	r2, r5
 800172a:	4639      	mov	r1, r7
 800172c:	4630      	mov	r0, r6
 800172e:	47c0      	blx	r8
 8001730:	3001      	adds	r0, #1
 8001732:	d0a2      	beq.n	800167a <_printf_i+0x13a>
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	079b      	lsls	r3, r3, #30
 8001738:	d507      	bpl.n	800174a <_printf_i+0x20a>
 800173a:	2500      	movs	r5, #0
 800173c:	f104 0919 	add.w	r9, r4, #25
 8001740:	68e3      	ldr	r3, [r4, #12]
 8001742:	9a03      	ldr	r2, [sp, #12]
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	429d      	cmp	r5, r3
 8001748:	db05      	blt.n	8001756 <_printf_i+0x216>
 800174a:	68e0      	ldr	r0, [r4, #12]
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	4298      	cmp	r0, r3
 8001750:	bfb8      	it	lt
 8001752:	4618      	movlt	r0, r3
 8001754:	e793      	b.n	800167e <_printf_i+0x13e>
 8001756:	2301      	movs	r3, #1
 8001758:	464a      	mov	r2, r9
 800175a:	4639      	mov	r1, r7
 800175c:	4630      	mov	r0, r6
 800175e:	47c0      	blx	r8
 8001760:	3001      	adds	r0, #1
 8001762:	d08a      	beq.n	800167a <_printf_i+0x13a>
 8001764:	3501      	adds	r5, #1
 8001766:	e7eb      	b.n	8001740 <_printf_i+0x200>
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1a7      	bne.n	80016bc <_printf_i+0x17c>
 800176c:	780b      	ldrb	r3, [r1, #0]
 800176e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001776:	e765      	b.n	8001644 <_printf_i+0x104>
 8001778:	08001bd2 	.word	0x08001bd2
 800177c:	08001bc1 	.word	0x08001bc1

08001780 <_sbrk_r>:
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	2300      	movs	r3, #0
 8001784:	4c05      	ldr	r4, [pc, #20]	; (800179c <_sbrk_r+0x1c>)
 8001786:	4605      	mov	r5, r0
 8001788:	4608      	mov	r0, r1
 800178a:	6023      	str	r3, [r4, #0]
 800178c:	f7ff fb14 	bl	8000db8 <_sbrk>
 8001790:	1c43      	adds	r3, r0, #1
 8001792:	d102      	bne.n	800179a <_sbrk_r+0x1a>
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	b103      	cbz	r3, 800179a <_sbrk_r+0x1a>
 8001798:	602b      	str	r3, [r5, #0]
 800179a:	bd38      	pop	{r3, r4, r5, pc}
 800179c:	20000154 	.word	0x20000154

080017a0 <memchr>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	b2c9      	uxtb	r1, r1
 80017a4:	4402      	add	r2, r0
 80017a6:	4290      	cmp	r0, r2
 80017a8:	4603      	mov	r3, r0
 80017aa:	d101      	bne.n	80017b0 <memchr+0x10>
 80017ac:	2000      	movs	r0, #0
 80017ae:	bd10      	pop	{r4, pc}
 80017b0:	781c      	ldrb	r4, [r3, #0]
 80017b2:	3001      	adds	r0, #1
 80017b4:	428c      	cmp	r4, r1
 80017b6:	d1f6      	bne.n	80017a6 <memchr+0x6>
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd10      	pop	{r4, pc}

080017bc <memcpy>:
 80017bc:	b510      	push	{r4, lr}
 80017be:	1e43      	subs	r3, r0, #1
 80017c0:	440a      	add	r2, r1
 80017c2:	4291      	cmp	r1, r2
 80017c4:	d100      	bne.n	80017c8 <memcpy+0xc>
 80017c6:	bd10      	pop	{r4, pc}
 80017c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017d0:	e7f7      	b.n	80017c2 <memcpy+0x6>

080017d2 <memmove>:
 80017d2:	4288      	cmp	r0, r1
 80017d4:	b510      	push	{r4, lr}
 80017d6:	eb01 0302 	add.w	r3, r1, r2
 80017da:	d803      	bhi.n	80017e4 <memmove+0x12>
 80017dc:	1e42      	subs	r2, r0, #1
 80017de:	4299      	cmp	r1, r3
 80017e0:	d10c      	bne.n	80017fc <memmove+0x2a>
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	4298      	cmp	r0, r3
 80017e6:	d2f9      	bcs.n	80017dc <memmove+0xa>
 80017e8:	1881      	adds	r1, r0, r2
 80017ea:	1ad2      	subs	r2, r2, r3
 80017ec:	42d3      	cmn	r3, r2
 80017ee:	d100      	bne.n	80017f2 <memmove+0x20>
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80017fa:	e7f7      	b.n	80017ec <memmove+0x1a>
 80017fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001800:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001804:	e7eb      	b.n	80017de <memmove+0xc>

08001806 <__malloc_lock>:
 8001806:	4770      	bx	lr

08001808 <__malloc_unlock>:
 8001808:	4770      	bx	lr

0800180a <_realloc_r>:
 800180a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180c:	4607      	mov	r7, r0
 800180e:	4614      	mov	r4, r2
 8001810:	460e      	mov	r6, r1
 8001812:	b921      	cbnz	r1, 800181e <_realloc_r+0x14>
 8001814:	4611      	mov	r1, r2
 8001816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800181a:	f7ff bc6b 	b.w	80010f4 <_malloc_r>
 800181e:	b922      	cbnz	r2, 800182a <_realloc_r+0x20>
 8001820:	f7ff fc1c 	bl	800105c <_free_r>
 8001824:	4625      	mov	r5, r4
 8001826:	4628      	mov	r0, r5
 8001828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800182a:	f000 f814 	bl	8001856 <_malloc_usable_size_r>
 800182e:	4284      	cmp	r4, r0
 8001830:	d90f      	bls.n	8001852 <_realloc_r+0x48>
 8001832:	4621      	mov	r1, r4
 8001834:	4638      	mov	r0, r7
 8001836:	f7ff fc5d 	bl	80010f4 <_malloc_r>
 800183a:	4605      	mov	r5, r0
 800183c:	2800      	cmp	r0, #0
 800183e:	d0f2      	beq.n	8001826 <_realloc_r+0x1c>
 8001840:	4631      	mov	r1, r6
 8001842:	4622      	mov	r2, r4
 8001844:	f7ff ffba 	bl	80017bc <memcpy>
 8001848:	4631      	mov	r1, r6
 800184a:	4638      	mov	r0, r7
 800184c:	f7ff fc06 	bl	800105c <_free_r>
 8001850:	e7e9      	b.n	8001826 <_realloc_r+0x1c>
 8001852:	4635      	mov	r5, r6
 8001854:	e7e7      	b.n	8001826 <_realloc_r+0x1c>

08001856 <_malloc_usable_size_r>:
 8001856:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800185a:	2800      	cmp	r0, #0
 800185c:	f1a0 0004 	sub.w	r0, r0, #4
 8001860:	bfbc      	itt	lt
 8001862:	580b      	ldrlt	r3, [r1, r0]
 8001864:	18c0      	addlt	r0, r0, r3
 8001866:	4770      	bx	lr

08001868 <_init>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr

08001874 <_fini>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr


template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002108  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08002244  08002244  00012244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  2000006c  080025dc  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000158  080025dc  00020158  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009000  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001884  00000000  00000000  00029095  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000520  00000000  00000000  0002a920  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b09  00000000  00000000  0002b290  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a89  00000000  00000000  0002dd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f822  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000014dc  00000000  00000000  0002f8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800222c 	.word	0x0800222c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	0800222c 	.word	0x0800222c

0800017c <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000188:	23ff      	movs	r3, #255	; 0xff
 800018a:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800018c:	2300      	movs	r3, #0
 800018e:	81fb      	strh	r3, [r7, #14]
 8000190:	e021      	b.n	80001d6 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000192:	89fb      	ldrh	r3, [r7, #14]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	4413      	add	r3, r2
 8000198:	781a      	ldrb	r2, [r3, #0]
 800019a:	7b7b      	ldrb	r3, [r7, #13]
 800019c:	4053      	eors	r3, r2
 800019e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80001a0:	2308      	movs	r3, #8
 80001a2:	733b      	strb	r3, [r7, #12]
 80001a4:	e011      	b.n	80001ca <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 80001a6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	da07      	bge.n	80001be <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80001ae:	7b7b      	ldrb	r3, [r7, #13]
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80001b8:	b25b      	sxtb	r3, r3
 80001ba:	737b      	strb	r3, [r7, #13]
 80001bc:	e002      	b.n	80001c4 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80001be:	7b7b      	ldrb	r3, [r7, #13]
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80001c4:	7b3b      	ldrb	r3, [r7, #12]
 80001c6:	3b01      	subs	r3, #1
 80001c8:	733b      	strb	r3, [r7, #12]
 80001ca:	7b3b      	ldrb	r3, [r7, #12]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d1ea      	bne.n	80001a6 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80001d0:	89fb      	ldrh	r3, [r7, #14]
 80001d2:	3301      	adds	r3, #1
 80001d4:	81fb      	strh	r3, [r7, #14]
 80001d6:	89fa      	ldrh	r2, [r7, #14]
 80001d8:	887b      	ldrh	r3, [r7, #2]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d3d9      	bcc.n	8000192 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80001de:	7b7b      	ldrb	r3, [r7, #13]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3714      	adds	r7, #20
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr

080001ea <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b082      	sub	sp, #8
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	6078      	str	r0, [r7, #4]
 80001f2:	460b      	mov	r3, r1
 80001f4:	807b      	strh	r3, [r7, #2]
 80001f6:	4613      	mov	r3, r2
 80001f8:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80001fa:	887b      	ldrh	r3, [r7, #2]
 80001fc:	4619      	mov	r1, r3
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f7ff ffbc 	bl	800017c <sensirion_common_generate_crc>
 8000204:	4603      	mov	r3, r0
 8000206:	461a      	mov	r2, r3
 8000208:	787b      	ldrb	r3, [r7, #1]
 800020a:	4293      	cmp	r3, r2
 800020c:	d002      	beq.n	8000214 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 800020e:	f04f 33ff 	mov.w	r3, #4294967295
 8000212:	e000      	b.n	8000216 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8000214:	2300      	movs	r3, #0
}
 8000216:	4618      	mov	r0, r3
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}

0800021e <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 800021e:	b580      	push	{r7, lr}
 8000220:	b086      	sub	sp, #24
 8000222:	af00      	add	r7, sp, #0
 8000224:	60f8      	str	r0, [r7, #12]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	461a      	mov	r2, r3
 800022a:	460b      	mov	r3, r1
 800022c:	817b      	strh	r3, [r7, #10]
 800022e:	4613      	mov	r3, r2
 8000230:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8000236:	8abb      	ldrh	r3, [r7, #20]
 8000238:	1c5a      	adds	r2, r3, #1
 800023a:	82ba      	strh	r2, [r7, #20]
 800023c:	461a      	mov	r2, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	4413      	add	r3, r2
 8000242:	897a      	ldrh	r2, [r7, #10]
 8000244:	0a12      	lsrs	r2, r2, #8
 8000246:	b292      	uxth	r2, r2
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800024c:	8abb      	ldrh	r3, [r7, #20]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	82ba      	strh	r2, [r7, #20]
 8000252:	461a      	mov	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4413      	add	r3, r2
 8000258:	897a      	ldrh	r2, [r7, #10]
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 800025e:	2300      	movs	r3, #0
 8000260:	75fb      	strb	r3, [r7, #23]
 8000262:	e030      	b.n	80002c6 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8000264:	8abb      	ldrh	r3, [r7, #20]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	82ba      	strh	r2, [r7, #20]
 800026a:	461a      	mov	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	4413      	add	r3, r2
 8000270:	7dfa      	ldrb	r2, [r7, #23]
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	6879      	ldr	r1, [r7, #4]
 8000276:	440a      	add	r2, r1
 8000278:	8812      	ldrh	r2, [r2, #0]
 800027a:	0a12      	lsrs	r2, r2, #8
 800027c:	b292      	uxth	r2, r2
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8000282:	8abb      	ldrh	r3, [r7, #20]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	82ba      	strh	r2, [r7, #20]
 8000288:	461a      	mov	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	4413      	add	r3, r2
 800028e:	7dfa      	ldrb	r2, [r7, #23]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	6879      	ldr	r1, [r7, #4]
 8000294:	440a      	add	r2, r1
 8000296:	8812      	ldrh	r2, [r2, #0]
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 800029c:	8abb      	ldrh	r3, [r7, #20]
 800029e:	3b02      	subs	r3, #2
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	4413      	add	r3, r2
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ff68 	bl	800017c <sensirion_common_generate_crc>
 80002ac:	4603      	mov	r3, r0
 80002ae:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 80002b0:	8abb      	ldrh	r3, [r7, #20]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	82ba      	strh	r2, [r7, #20]
 80002b6:	461a      	mov	r2, r3
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	4413      	add	r3, r2
 80002bc:	7cfa      	ldrb	r2, [r7, #19]
 80002be:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
 80002c2:	3301      	adds	r3, #1
 80002c4:	75fb      	strb	r3, [r7, #23]
 80002c6:	7dfa      	ldrb	r2, [r7, #23]
 80002c8:	7a7b      	ldrb	r3, [r7, #9]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d3ca      	bcc.n	8000264 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 80002ce:	8abb      	ldrh	r3, [r7, #20]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	; 0x58
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	4613      	mov	r3, r2
 80002e6:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 80002e8:	88bb      	ldrh	r3, [r7, #4]
 80002ea:	461a      	mov	r2, r3
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 80002fa:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f90c 	bl	8000520 <sensirion_i2c_read>
 8000308:	4603      	mov	r3, r0
 800030a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 800030e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 8000316:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800031a:	e047      	b.n	80003ac <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800031c:	2300      	movs	r3, #0
 800031e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000322:	2300      	movs	r3, #0
 8000324:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000328:	e039      	b.n	800039e <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800032a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800032e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000330:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8000332:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000336:	3302      	adds	r3, #2
 8000338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800033a:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	2102      	movs	r1, #2
 8000342:	f7ff ff52 	bl	80001ea <sensirion_common_check_crc>
 8000346:	4603      	mov	r3, r0
 8000348:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 800034c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 8000354:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000358:	e028      	b.n	80003ac <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800035a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000364:	461a      	mov	r2, r3
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	4413      	add	r3, r2
 800036a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800036e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000370:	440a      	add	r2, r1
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8000376:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 8000380:	461a      	mov	r2, r3
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	4413      	add	r3, r2
 8000386:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800038a:	3201      	adds	r2, #1
 800038c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800038e:	440a      	add	r2, r1
 8000390:	7812      	ldrb	r2, [r2, #0]
 8000392:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000394:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000398:	3303      	adds	r3, #3
 800039a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800039e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80003a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d3bf      	bcc.n	800032a <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3758      	adds	r7, #88	; 0x58
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	6039      	str	r1, [r7, #0]
 80003be:	71fb      	strb	r3, [r7, #7]
 80003c0:	4613      	mov	r3, r2
 80003c2:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80003c4:	88ba      	ldrh	r2, [r7, #4]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	6839      	ldr	r1, [r7, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff84 	bl	80002d8 <sensirion_i2c_read_words_as_bytes>
 80003d0:	4603      	mov	r3, r0
 80003d2:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 80003d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <sensirion_i2c_read_words+0x2e>
        return ret;
 80003dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003e0:	e020      	b.n	8000424 <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	73fb      	strb	r3, [r7, #15]
 80003e6:	e017      	b.n	8000418 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	4413      	add	r3, r2
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	7812      	ldrb	r2, [r2, #0]
 80003fe:	0212      	lsls	r2, r2, #8
 8000400:	b211      	sxth	r1, r2
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	3201      	adds	r2, #1
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	b212      	sxth	r2, r2
 800040a:	430a      	orrs	r2, r1
 800040c:	b212      	sxth	r2, r2
 800040e:	b292      	uxth	r2, r2
 8000410:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8000412:	7bfb      	ldrb	r3, [r7, #15]
 8000414:	3301      	adds	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	b29b      	uxth	r3, r3
 800041c:	88ba      	ldrh	r2, [r7, #4]
 800041e:	429a      	cmp	r2, r3
 8000420:	d8e2      	bhi.n	80003e8 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 8000422:	2300      	movs	r3, #0
}
 8000424:	4618      	mov	r0, r3
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 800043c:	88b9      	ldrh	r1, [r7, #4]
 800043e:	f107 000c 	add.w	r0, r7, #12
 8000442:	2300      	movs	r3, #0
 8000444:	2200      	movs	r2, #0
 8000446:	f7ff feea 	bl	800021e <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 800044a:	f107 010c 	add.w	r1, r7, #12
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2202      	movs	r2, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f877 	bl	8000546 <sensirion_i2c_write>
 8000458:	4603      	mov	r3, r0
 800045a:	b21b      	sxth	r3, r3
}
 800045c:	4618      	mov	r0, r3
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <sensirion_i2c_delayed_read_cmd>:
    return sensirion_i2c_write(address, buf, buf_size);
}

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60ba      	str	r2, [r7, #8]
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	4603      	mov	r3, r0
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	460b      	mov	r3, r1
 8000474:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8000476:	89b9      	ldrh	r1, [r7, #12]
 8000478:	f107 0014 	add.w	r0, r7, #20
 800047c:	2300      	movs	r3, #0
 800047e:	2200      	movs	r2, #0
 8000480:	f7ff fecd 	bl	800021e <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8000484:	f107 0114 	add.w	r1, r7, #20
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	2202      	movs	r2, #2
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f85a 	bl	8000546 <sensirion_i2c_write>
 8000492:	4603      	mov	r3, r0
 8000494:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 8000496:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 800049e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004a2:	e00c      	b.n	80004be <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 80004aa:	68b8      	ldr	r0, [r7, #8]
 80004ac:	f000 f85e 	bl	800056c <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 80004b0:	8c3a      	ldrh	r2, [r7, #32]
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	6879      	ldr	r1, [r7, #4]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff7c 	bl	80003b4 <sensirion_i2c_read_words>
 80004bc:	4603      	mov	r3, r0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <sensirion_i2c_init>:
{
    return 1;
}

uint8_t sensirion_i2c_init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
    int16_t probe;
    uint8_t init_status = 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]

    I2C1_Init();
 80004d2:	f000 f8a1 	bl	8000618 <I2C1_Init>

    for (int i = 0; i < SGP30_CONN_RETRIES; ++i)
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	e010      	b.n	80004fe <sensirion_i2c_init+0x36>
    {
        probe = sgp30_probe();
 80004dc:	f001 f80f 	bl	80014fe <sgp30_probe>
 80004e0:	4603      	mov	r3, r0
 80004e2:	80fb      	strh	r3, [r7, #6]

        if (probe == STATUS_OK)
 80004e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d102      	bne.n	80004f2 <sensirion_i2c_init+0x2a>
        {
        	init_status = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
        	break;
 80004f0:	e008      	b.n	8000504 <sensirion_i2c_init+0x3c>
        }

        sensirion_sleep_usec(1000000);
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <sensirion_i2c_init+0x54>)
 80004f4:	f000 f83a 	bl	800056c <sensirion_sleep_usec>
    for (int i = 0; i < SGP30_CONN_RETRIES; ++i)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	2b04      	cmp	r3, #4
 8000502:	ddeb      	ble.n	80004dc <sensirion_i2c_init+0x14>
    }

    if(init_status)
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <sensirion_i2c_init+0x46>
    {
    	return 1;
 800050a:	2301      	movs	r3, #1
 800050c:	e002      	b.n	8000514 <sensirion_i2c_init+0x4c>
    }

    sgp30_iaq_init();
 800050e:	f000 ffe1 	bl	80014d4 <sgp30_iaq_init>

    return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	000f4240 	.word	0x000f4240

08000520 <sensirion_i2c_read>:
{
    // TODO: Implement function
}

int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	80bb      	strh	r3, [r7, #4]
    I2C1_Read(address, count, data);
 8000530:	88b9      	ldrh	r1, [r7, #4]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f926 	bl	8000788 <I2C1_Read>
    return 0;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <sensirion_i2c_write>:

int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	4603      	mov	r3, r0
 800054e:	6039      	str	r1, [r7, #0]
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	4613      	mov	r3, r2
 8000554:	80bb      	strh	r3, [r7, #4]
    I2C1_Write(address, count, data);
 8000556:	88b9      	ldrh	r1, [r7, #4]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f8b1 	bl	80006c4 <I2C1_Write>
    return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <sensirion_sleep_usec>:

void sensirion_sleep_usec(uint32_t useconds)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	delay_us(useconds);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 fff3 	bl	8001560 <delay_us>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <EXTI9_5_IRQHandler+0x18>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 8000594:	f000 feac 	bl	80012f0 <DHT22_IRQHandler>
	}
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010400 	.word	0x40010400

080005a0 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	  RCC->AHBENR = RCC_AHBENR_GPIOAEN;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <GPIO_init+0x38>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	61da      	str	r2, [r3, #28]
	  GPIOA->MODER |= 0x400;
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <GPIO_init+0x3c>)
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <GPIO_init+0x3c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b4:	6013      	str	r3, [r2, #0]

	  GPIOA->MODER &= ~GPIO_MODER_MODER5; // RE_TE
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <GPIO_init+0x3c>)
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <GPIO_init+0x3c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005c0:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= GPIO_MODER_MODER5_0;
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <GPIO_init+0x3c>)
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <GPIO_init+0x3c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000

080005e0 <MODBUS_RE_TE_HIGH>:

void MODBUS_RE_TE_HIGH()
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_ODR_ODR_5;
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <MODBUS_RE_TE_HIGH+0x18>)
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <MODBUS_RE_TE_HIGH+0x18>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6153      	str	r3, [r2, #20]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40020000 	.word	0x40020000

080005fc <MODBUS_RE_TE_LOW>:

void MODBUS_RE_TE_LOW()
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <MODBUS_RE_TE_LOW+0x18>)
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <MODBUS_RE_TE_LOW+0x18>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f023 0320 	bic.w	r3, r3, #32
 800060a:	6153      	str	r3, [r2, #20]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40020000 	.word	0x40020000

08000618 <I2C1_Init>:
 */

#include "i2c.h"

void I2C1_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 2;			//Enable GPIOB clock PB8(D15)=SCL,PB9(D14)=SDA.
 800061c:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <I2C1_Init+0xa0>)
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <I2C1_Init+0xa0>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= (1<<21);	//Enable I2C1_EN clock
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <I2C1_Init+0xa0>)
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <I2C1_Init+0xa0>)
 800062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000632:	6253      	str	r3, [r2, #36]	; 0x24

	//configures PB8,PB9 to I2C1_EN
	GPIOB->AFR[1] &= ~0x000000FF;	//PB8,PB9 I2C1 SCL, SDA. AFRH8 and AFRH9. clear
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <I2C1_Init+0xa4>)
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <I2C1_Init+0xa4>)
 8000638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800063e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;	//GPIOx_AFRL p.189,AF4=I2C1(0100 BIN) p.177
 8000640:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <I2C1_Init+0xa4>)
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <I2C1_Init+0xa4>)
 8000644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000646:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800064a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~0x000F0000;	//PB8 and PB9 clear
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <I2C1_Init+0xa4>)
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <I2C1_Init+0xa4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000656:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;		//Alternate function mode PB8,PB9
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <I2C1_Init+0xa4>)
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <I2C1_Init+0xa4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000662:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 0x00000300;	//output open-drain. p.184
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <I2C1_Init+0xa4>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <I2C1_Init+0xa4>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800066e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~0x000F0000;	//no pull-up resistors for PB8 and PB9 p.185
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <I2C1_Init+0xa4>)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <I2C1_Init+0xa4>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800067a:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000;				//software reset I2C1 SWRST p.682
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <I2C1_Init+0xa8>)
 800067e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000682:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;			//stop reset
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <I2C1_Init+0xa8>)
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <I2C1_Init+0xa8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0020;				//peripheral clock 32 MHz
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <I2C1_Init+0xa8>)
 8000692:	2220      	movs	r2, #32
 8000694:	605a      	str	r2, [r3, #4]
	TPCLK1=1/32MHz=31,25ns
	tI2C_bus=1/100kHz=10us=10000ns
	tI2C_bus_div2=10000ns/2=5000ns
	CCR value=tI2C_bus_div2/TPCLK1=5000ns/31,25ns=160
	p. 692*/
	I2C1->CCR = 160;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <I2C1_Init+0xa8>)
 8000698:	22a0      	movs	r2, #160	; 0xa0
 800069a:	61da      	str	r2, [r3, #28]

	//maximum rise time in sm mode = 1000ns. Equation 1000 ns/TPCK1
	I2C1->TRISE = 33;				//1000ns/31,25ns=32+1=33, p.693
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <I2C1_Init+0xa8>)
 800069e:	2221      	movs	r2, #33	; 0x21
 80006a0:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;			//peripheral enable (I2C1)
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <I2C1_Init+0xa8>)
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <I2C1_Init+0xa8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40005400 	.word	0x40005400

080006c4 <I2C1_Write>:

void I2C1_Write(uint8_t address, int n, uint8_t* data)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;
	int i;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 80006d2:	bf00      	nop
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <I2C1_Write+0xc0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f9      	bne.n	80006d4 <I2C1_Write+0x10>

	I2C1->CR1 &= ~0x800;			//disable POS p.682
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <I2C1_Write+0xc0>)
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <I2C1_Write+0xc0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006ea:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= 0x100;				//generate start p.694
 80006ec:	4a25      	ldr	r2, [pc, #148]	; (8000784 <I2C1_Write+0xc0>)
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <I2C1_Write+0xc0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f6:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80006f8:	bf00      	nop
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <I2C1_Write+0xc0>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f9      	beq.n	80006fa <I2C1_Write+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <I2C1_Write+0xc0>)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 800070e:	bf00      	nop
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <I2C1_Write+0xc0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f9      	beq.n	8000710 <I2C1_Write+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <I2C1_Write+0xc0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	613b      	str	r3, [r7, #16]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 8000722:	bf00      	nop
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <I2C1_Write+0xc0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f9      	beq.n	8000724 <I2C1_Write+0x60>

	//write data
	for(i=0;i<n;i++)
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e00f      	b.n	8000756 <I2C1_Write+0x92>
	{
		while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 8000736:	bf00      	nop
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <I2C1_Write+0xc0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f9      	beq.n	8000738 <I2C1_Write+0x74>
		I2C1->DR=*data++;				//send command
 8000744:	490f      	ldr	r1, [pc, #60]	; (8000784 <I2C1_Write+0xc0>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	610b      	str	r3, [r1, #16]
	for(i=0;i<n;i++)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	429a      	cmp	r2, r3
 800075c:	dbeb      	blt.n	8000736 <I2C1_Write+0x72>
	}

	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
 800075e:	bf00      	nop
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <I2C1_Write+0xc0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f9      	beq.n	8000760 <I2C1_Write+0x9c>
	I2C1->CR1 |= (1<<9);			//generate stop
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <I2C1_Write+0xc0>)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <I2C1_Write+0xc0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	371c      	adds	r7, #28
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40005400 	.word	0x40005400

08000788 <I2C1_Read>:
	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
	I2C1->CR1 |= (1<<9);			//generate stop
}

void I2C1_Read(uint8_t address, int n, uint8_t* data)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 8000796:	bf00      	nop
 8000798:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <I2C1_Read+0x100>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f9      	bne.n	8000798 <I2C1_Read+0x10>
	I2C1->CR1 &= ~0x800;			//Acknowledge clear p.682
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <I2C1_Read+0x100>)
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <I2C1_Read+0x100>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ae:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= 0x100;				//generate start p.694
 80007b0:	4a35      	ldr	r2, [pc, #212]	; (8000888 <I2C1_Read+0x100>)
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <I2C1_Read+0x100>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80007bc:	bf00      	nop
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <I2C1_Read+0x100>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f9      	beq.n	80007be <I2C1_Read+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <I2C1_Read+0x100>)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80007d2:	bf00      	nop
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <I2C1_Read+0x100>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f9      	beq.n	80007d4 <I2C1_Read+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <I2C1_Read+0x100>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	617b      	str	r3, [r7, #20]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80007e6:	bf00      	nop
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <I2C1_Read+0x100>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f9      	beq.n	80007e8 <I2C1_Read+0x60>

	I2C1->CR1 |= 0x100;				//generate repeated start p.694
 80007f4:	4a24      	ldr	r2, [pc, #144]	; (8000888 <I2C1_Read+0x100>)
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <I2C1_Read+0x100>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fe:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 8000800:	bf00      	nop
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <I2C1_Read+0x100>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <I2C1_Read+0x7a>

	I2C1->DR=address << 1|1;		//transmit slave address
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <I2C1_Read+0x100>)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 800081a:	bf00      	nop
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <I2C1_Read+0x100>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <I2C1_Read+0x94>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <I2C1_Read+0x100>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	617b      	str	r3, [r7, #20]
	I2C1->CR1 |= (1<<10);			//Enable acknowledge p.683
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <I2C1_Read+0x100>)
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <I2C1_Read+0x100>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000838:	6013      	str	r3, [r2, #0]

	while(n > 0)					//read data from chip
 800083a:	e010      	b.n	800085e <I2C1_Read+0xd6>
	{
		while(!(I2C1->SR1 & 0x40)){}	//wait until RXNE flag is set
 800083c:	bf00      	nop
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <I2C1_Read+0x100>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <I2C1_Read+0xb6>
		(*data++) = I2C1->DR;			//read data from DR
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <I2C1_Read+0x100>)
 8000852:	6912      	ldr	r2, [r2, #16]
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	701a      	strb	r2, [r3, #0]
		n--;
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	3b01      	subs	r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
	while(n > 0)					//read data from chip
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dceb      	bgt.n	800083c <I2C1_Read+0xb4>
	}
	I2C1->CR1 |= (1<<9);			//generate stop p.682
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <I2C1_Read+0x100>)
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <I2C1_Read+0x100>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<10);			//disable acknowledge p.682
 8000870:	4a05      	ldr	r2, [pc, #20]	; (8000888 <I2C1_Read+0x100>)
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <I2C1_Read+0x100>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	371c      	adds	r7, #28
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40005400 	.word	0x40005400

0800088c <CRC16>:
uint8_t MODBUS_Slaves[SLAVE_COUNT] = {LMT84LP_MODBUS_ADDRESS, NSL19M51_MODBUS_ADDRESS, SGP30_MODBUS_ADDRESS, DHT22_MODBUS_ADDRESS};

//parameter wLenght = how my bytes in your frame?
//*nData = your first element in frame array
uint16_t CRC16(uint8_t *nData, uint16_t wLength)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
		0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
		0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
	};

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 8000898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089c:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 800089e:	e011      	b.n	80008c4 <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4053      	eors	r3, r2
 80008ae:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 80008b0:	89fb      	ldrh	r3, [r7, #14]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 80008b6:	7b7b      	ldrb	r3, [r7, #13]
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <CRC16+0x50>)
 80008ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	4053      	eors	r3, r2
 80008c2:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	807a      	strh	r2, [r7, #2]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e8      	bne.n	80008a0 <CRC16+0x14>
	}

	return wCRCWord;
 80008ce:	89fb      	ldrh	r3, [r7, #14]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08002318 	.word	0x08002318

080008e0 <MODBUS_VerifyCRC>:

MODBUS_Status MODBUS_VerifyCRC(uint8_t *MODBUS_Frame)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint16_t MODBUS_FrameCRC = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	81fb      	strh	r3, [r7, #14]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 2); // Exclude the CRC itself
 80008ec:	2106      	movs	r1, #6
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffcc 	bl	800088c <CRC16>
 80008f4:	4603      	mov	r3, r0
 80008f6:	81fb      	strh	r3, [r7, #14]

	uint8_t CRC_lsb = (MODBUS_FrameCRC >> 8) == MODBUS_Frame[MODBUS_FRAME_SIZE - 2];
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3306      	adds	r3, #6
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	429a      	cmp	r2, r3
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_msb = (MODBUS_FrameCRC & 0x00FF) == MODBUS_Frame[MODBUS_FRAME_SIZE - 1];
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	3207      	adds	r2, #7
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	4293      	cmp	r3, r2
 800091e:	bf0c      	ite	eq
 8000920:	2301      	moveq	r3, #1
 8000922:	2300      	movne	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	733b      	strb	r3, [r7, #12]
	if (CRC_lsb && CRC_msb)
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <MODBUS_VerifyCRC+0x58>
 800092e:	7b3b      	ldrb	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MODBUS_VerifyCRC+0x58>
	{
		return MODBUS_CRC_VALID;
 8000934:	2302      	movs	r3, #2
 8000936:	e000      	b.n	800093a <MODBUS_VerifyCRC+0x5a>
	}

	return MODBUS_CRC_INVALID;
 8000938:	2303      	movs	r3, #3
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MODBUS_CheckAddress>:

MODBUS_Status MODBUS_CheckAddress(uint8_t address)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < SLAVE_COUNT; ++i)
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e010      	b.n	8000976 <MODBUS_CheckAddress+0x32>
    {
        if (MODBUS_Slaves[i] == address)
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <MODBUS_CheckAddress+0x44>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	429a      	cmp	r2, r3
 8000960:	d101      	bne.n	8000966 <MODBUS_CheckAddress+0x22>
        {
            return MODBUS_ADDR_VALID;
 8000962:	2301      	movs	r3, #1
 8000964:	e00b      	b.n	800097e <MODBUS_CheckAddress+0x3a>
        }

        else if (address == MODBUS_CLEAR_BUFFER_REG)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2bff      	cmp	r3, #255	; 0xff
 800096a:	d101      	bne.n	8000970 <MODBUS_CheckAddress+0x2c>
        {
        	return MODBUS_RINGBUFFER_CLEAR;
 800096c:	230a      	movs	r3, #10
 800096e:	e006      	b.n	800097e <MODBUS_CheckAddress+0x3a>
    for (int i = 0; i < SLAVE_COUNT; ++i)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b03      	cmp	r3, #3
 800097a:	ddeb      	ble.n	8000954 <MODBUS_CheckAddress+0x10>
        }
    }

	return MODBUS_ADDR_INVALID;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000

0800098c <MODBUS_ReadFrame>:

MODBUS_Status MODBUS_ReadFrame(uint8_t *MODBUS_Frame)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	static uint8_t frame_index = 0;
	uint8_t data;

    while (MODBUS_RingBufferRead(&data) == MODBUS_RINGBUFFER_NOT_EMPTY)
 8000994:	e029      	b.n	80009ea <MODBUS_ReadFrame+0x5e>
    	uint8_t buffer[100];
        snprintf(buffer, sizeof(buffer), "%.2x ", data);
        USART2_write_buffer(buffer);
#endif

		if (frame_index == 0)
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MODBUS_ReadFrame+0x78>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10e      	bne.n	80009bc <MODBUS_ReadFrame+0x30>
        {
			MODBUS_Status status = MODBUS_CheckAddress(data);
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ffcf 	bl	8000944 <MODBUS_CheckAddress>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
            if (status == MODBUS_RINGBUFFER_CLEAR)
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	d101      	bne.n	80009b4 <MODBUS_ReadFrame+0x28>
            {
        		return MODBUS_RINGBUFFER_CLEAR;
 80009b0:	230a      	movs	r3, #10
 80009b2:	e023      	b.n	80009fc <MODBUS_ReadFrame+0x70>
            }

            else if (status == MODBUS_ADDR_INVALID)
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d100      	bne.n	80009bc <MODBUS_ReadFrame+0x30>
            {
#if DEBUG > 0
                USART2_write_buffer("Invalid start byte, skipping\n");
#endif
                continue;
 80009ba:	e016      	b.n	80009ea <MODBUS_ReadFrame+0x5e>
            }
        }

    	MODBUS_Frame[frame_index++] = data;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MODBUS_ReadFrame+0x78>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	b2d1      	uxtb	r1, r2
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <MODBUS_ReadFrame+0x78>)
 80009c6:	7011      	strb	r1, [r2, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	7bba      	ldrb	r2, [r7, #14]
 80009d0:	701a      	strb	r2, [r3, #0]

    	if (frame_index == MODBUS_FRAME_SIZE)
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MODBUS_ReadFrame+0x78>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d107      	bne.n	80009ea <MODBUS_ReadFrame+0x5e>
    	{
    		frame_ready = 1;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MODBUS_ReadFrame+0x7c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    		frame_index = 0;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MODBUS_ReadFrame+0x78>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
    		return MODBUS_ADDR_VALID;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e008      	b.n	80009fc <MODBUS_ReadFrame+0x70>
    while (MODBUS_RingBufferRead(&data) == MODBUS_RINGBUFFER_NOT_EMPTY)
 80009ea:	f107 030e 	add.w	r3, r7, #14
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f8ca 	bl	8000b88 <MODBUS_RingBufferRead>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b09      	cmp	r3, #9
 80009f8:	d0cd      	beq.n	8000996 <MODBUS_ReadFrame+0xa>
		}
    }

    return MODBUS_FRAME_NOT_READY;
 80009fa:	230c      	movs	r3, #12
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000008e 	.word	0x2000008e
 8000a08:	20000088 	.word	0x20000088

08000a0c <MODBUS_ReadSensor>:

MODBUS_Status MODBUS_ReadSensor(uint8_t *MODBUS_Frame, uint8_t *MODBUS_ResponseFrame)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	MODBUS_Reading reading;

	switch (MODBUS_Frame[0])
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	d843      	bhi.n	8000aa8 <MODBUS_ReadSensor+0x9c>
 8000a20:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <MODBUS_ReadSensor+0x1c>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000aa9 	.word	0x08000aa9
 8000a2c:	08000aa9 	.word	0x08000aa9
 8000a30:	08000aa9 	.word	0x08000aa9
 8000a34:	08000aa9 	.word	0x08000aa9
 8000a38:	08000a41 	.word	0x08000a41
 8000a3c:	08000a75 	.word	0x08000a75

		case NSL19M51_MODBUS_ADDRESS:
			break;

		case SGP30_MODBUS_ADDRESS:
			sgp30_modbus_read(&reading);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fd70 	bl	800152a <sgp30_modbus_read>
            USART2_write_buffer(buffer);
            sprintf(buffer, "CO2eq Concentration: %dppm\r\n", reading.co2_eq_ppm);
            USART2_write_buffer(buffer);
#endif

			if (MODBUS_Frame[3] == 0x01)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3303      	adds	r3, #3
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d107      	bne.n	8000a64 <MODBUS_ReadSensor+0x58>
			{
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.co2_eq_ppm);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	8aba      	ldrh	r2, [r7, #20]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6838      	ldr	r0, [r7, #0]
 8000a5e:	f000 f8df 	bl	8000c20 <MODBUS_Build_ResponseFrame>
			else
			{
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.tvoc_ppb);
			}

			break;
 8000a62:	e022      	b.n	8000aaa <MODBUS_ReadSensor+0x9e>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.tvoc_ppb);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	8a7a      	ldrh	r2, [r7, #18]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6838      	ldr	r0, [r7, #0]
 8000a6e:	f000 f8d7 	bl	8000c20 <MODBUS_Build_ResponseFrame>
			break;
 8000a72:	e01a      	b.n	8000aaa <MODBUS_ReadSensor+0x9e>

		case DHT22_MODBUS_ADDRESS:
			DHT22_ModbusHandler(&reading); // Example request frame for temperature 0x06 0x04 0x00 0x01 0x00 0x01 0x61 0xBD humidity 0x06 0x04 0x00 0x02 0x00 0x01 0x91 0xBD
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fc2e 	bl	80012da <DHT22_ModbusHandler>

			if (MODBUS_Frame[3] == 0x01)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3303      	adds	r3, #3
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d107      	bne.n	8000a98 <MODBUS_ReadSensor+0x8c>
			{
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.humidity);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	89fa      	ldrh	r2, [r7, #14]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6838      	ldr	r0, [r7, #0]
 8000a92:	f000 f8c5 	bl	8000c20 <MODBUS_Build_ResponseFrame>
			else
			{
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.temperature);
			}

			break;
 8000a96:	e008      	b.n	8000aaa <MODBUS_ReadSensor+0x9e>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.temperature);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	89ba      	ldrh	r2, [r7, #12]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f000 f8bd 	bl	8000c20 <MODBUS_Build_ResponseFrame>
			break;
 8000aa6:	e000      	b.n	8000aaa <MODBUS_ReadSensor+0x9e>

		default:
			break;
 8000aa8:	bf00      	nop
	}

	return MODBUS_SENSOR_READ_OK;
 8000aaa:	2304      	movs	r3, #4
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MODBUS_ProcessFrame>:

void MODBUS_ProcessFrame(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	static uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
	MODBUS_Status status = MODBUS_ReadFrame(MODBUS_Frame);
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MODBUS_ProcessFrame+0x50>)
 8000abc:	f7ff ff66 	bl	800098c <MODBUS_ReadFrame>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]

    if (!frame_ready)
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MODBUS_ProcessFrame+0x54>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d105      	bne.n	8000ada <MODBUS_ProcessFrame+0x26>
    {
        if (status == MODBUS_RINGBUFFER_CLEAR)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	d113      	bne.n	8000afc <MODBUS_ProcessFrame+0x48>
        {
    #if DEBUG > 1
            	USART2_write_buffer("Clearing Ring Buffer");
    #endif
                	MODBUS_ClearRingBuffer();
 8000ad4:	f000 f88a 	bl	8000bec <MODBUS_ClearRingBuffer>
 8000ad8:	e011      	b.n	8000afe <MODBUS_ProcessFrame+0x4a>
	uint8_t buffer[100];
    sprintf(buffer, "Tail at %d", rx_tail);
    USART2_write_buffer(buffer);
#endif

    if (status == MODBUS_ADDR_VALID)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d103      	bne.n	8000ae8 <MODBUS_ProcessFrame+0x34>
    {
        MODBUS_ProcessValidFrame(MODBUS_Frame);
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MODBUS_ProcessFrame+0x50>)
 8000ae2:	f000 f830 	bl	8000b46 <MODBUS_ProcessValidFrame>
 8000ae6:	e001      	b.n	8000aec <MODBUS_ProcessFrame+0x38>
    }

    else
    {
        MODBUS_ProcessInvalidFrame();
 8000ae8:	f000 f847 	bl	8000b7a <MODBUS_ProcessInvalidFrame>
    }

    uint8_t purge_byte;
    MODBUS_RingBufferRead(&purge_byte);
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f84a 	bl	8000b88 <MODBUS_RingBufferRead>

    frame_ready = 0;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <MODBUS_ProcessFrame+0x54>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e000      	b.n	8000afe <MODBUS_ProcessFrame+0x4a>
        return;
 8000afc:	bf00      	nop
}
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000090 	.word	0x20000090
 8000b08:	20000088 	.word	0x20000088

08000b0c <MODBUS_TransmitResponse>:

MODBUS_Status MODBUS_TransmitResponse(uint8_t* MODBUS_ResponseFrame)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	MODBUS_RE_TE_HIGH();
 8000b14:	f7ff fd64 	bl	80005e0 <MODBUS_RE_TE_HIGH>
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e009      	b.n	8000b32 <MODBUS_TransmitResponse+0x26>
	{
		USART1_write(MODBUS_ResponseFrame[i]);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f980 	bl	8000e2c <USART1_write>
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2b06      	cmp	r3, #6
 8000b36:	ddf2      	ble.n	8000b1e <MODBUS_TransmitResponse+0x12>
	}
	MODBUS_RE_TE_LOW();
 8000b38:	f7ff fd60 	bl	80005fc <MODBUS_RE_TE_LOW>

	return MODBUS_FRAME_OK;
 8000b3c:	2306      	movs	r3, #6
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <MODBUS_ProcessValidFrame>:

void MODBUS_ProcessValidFrame(uint8_t *MODBUS_Frame)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	if (MODBUS_VerifyCRC(MODBUS_Frame) == MODBUS_CRC_INVALID)
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fec6 	bl	80008e0 <MODBUS_VerifyCRC>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d00b      	beq.n	8000b72 <MODBUS_ProcessValidFrame+0x2c>
#endif
		return;
	}

	uint8_t MODBUS_ResponseFrame[MODBUS_FRAME_SIZE];
    MODBUS_ReadSensor(MODBUS_Frame, MODBUS_ResponseFrame);
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff53 	bl	8000a0c <MODBUS_ReadSensor>
    MODBUS_TransmitResponse(MODBUS_ResponseFrame);
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffce 	bl	8000b0c <MODBUS_TransmitResponse>
 8000b70:	e000      	b.n	8000b74 <MODBUS_ProcessValidFrame+0x2e>
		return;
 8000b72:	bf00      	nop
    {
        snprintf(debugBuffer, sizeof(debugBuffer), "%.2x ", MODBUS_Frame[i]);
        USART2_write_buffer(debugBuffer);
    }
#endif
}
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <MODBUS_ProcessInvalidFrame>:

void MODBUS_ProcessInvalidFrame(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
    char debugBuffer[100];
    snprintf(debugBuffer, sizeof(debugBuffer), "Invalid address!");
    USART2_write_buffer(debugBuffer);
#endif

	MODBUS_ClearRingBuffer();
 8000b7e:	f000 f835 	bl	8000bec <MODBUS_ClearRingBuffer>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <MODBUS_RingBufferRead>:

MODBUS_Status MODBUS_RingBufferRead(uint8_t *data)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    if (rx_tail == rx_head)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MODBUS_RingBufferRead+0x58>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MODBUS_RingBufferRead+0x5c>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d101      	bne.n	8000ba4 <MODBUS_RingBufferRead+0x1c>
    {
        return MODBUS_RINGBUFFER_EMPTY;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	e017      	b.n	8000bd4 <MODBUS_RingBufferRead+0x4c>
    }

    *data = rx_buffer[rx_tail];
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MODBUS_RingBufferRead+0x58>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MODBUS_RingBufferRead+0x60>)
 8000bae:	5c9b      	ldrb	r3, [r3, r2]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	701a      	strb	r2, [r3, #0]
    rx_tail = (rx_tail + 1) % RX_BUFFER_SIZE;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MODBUS_RingBufferRead+0x58>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	425a      	negs	r2, r3
 8000bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000bc8:	bf58      	it	pl
 8000bca:	4253      	negpl	r3, r2
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <MODBUS_RingBufferRead+0x58>)
 8000bd0:	801a      	strh	r2, [r3, #0]
    return MODBUS_RINGBUFFER_NOT_EMPTY;
 8000bd2:	2309      	movs	r3, #9
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	2000008a 	.word	0x2000008a
 8000be8:	200000d4 	.word	0x200000d4

08000bec <MODBUS_ClearRingBuffer>:

MODBUS_Status MODBUS_ClearRingBuffer()
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
    rx_tail = rx_head;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MODBUS_ClearRingBuffer+0x28>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MODBUS_ClearRingBuffer+0x2c>)
 8000bf8:	801a      	strh	r2, [r3, #0]

	if (buffer_OVF)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MODBUS_ClearRingBuffer+0x30>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <MODBUS_ClearRingBuffer+0x1e>
	{
		//MODBUS_HandleOverflow();
		buffer_OVF = 0;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <MODBUS_ClearRingBuffer+0x30>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	}

	return MODBUS_FRAME_OK;
 8000c0a:	2306      	movs	r3, #6
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000008a 	.word	0x2000008a
 8000c18:	2000008c 	.word	0x2000008c
 8000c1c:	20000089 	.word	0x20000089

08000c20 <MODBUS_Build_ResponseFrame>:

MODBUS_Status MODBUS_Build_ResponseFrame(uint8_t* MODBUS_Frame, uint8_t slave_addr, uint16_t reading)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	803b      	strh	r3, [r7, #0]
	uint16_t MODBUS_FrameCRC = 0x0000;
 8000c30:	2300      	movs	r3, #0
 8000c32:	81fb      	strh	r3, [r7, #14]

	MODBUS_Frame[0] = slave_addr;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	78fa      	ldrb	r2, [r7, #3]
 8000c38:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[1] = MODBUS_READ_INPUT_REG;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[2] = 0x02;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3302      	adds	r3, #2
 8000c46:	2202      	movs	r2, #2
 8000c48:	701a      	strb	r2, [r3, #0]

	MODBUS_Frame[3] = reading >> 8;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3303      	adds	r3, #3
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	0a12      	lsrs	r2, r2, #8
 8000c52:	b292      	uxth	r2, r2
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[4] = reading & 0x00FF;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	883a      	ldrh	r2, [r7, #0]
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	701a      	strb	r2, [r3, #0]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 3);
 8000c62:	2105      	movs	r1, #5
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fe11 	bl	800088c <CRC16>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	81fb      	strh	r3, [r7, #14]
	MODBUS_Frame[5] = MODBUS_FrameCRC & 0x00FF;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3305      	adds	r3, #5
 8000c72:	89fa      	ldrh	r2, [r7, #14]
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[6] = MODBUS_FrameCRC >> 8;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3306      	adds	r3, #6
 8000c7c:	89fa      	ldrh	r2, [r7, #14]
 8000c7e:	0a12      	lsrs	r2, r2, #8
 8000c80:	b292      	uxth	r2, r2
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	701a      	strb	r2, [r3, #0]

	return MODBUS_FRAME_OK;
 8000c86:	2306      	movs	r3, #6
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE)
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MODBUS_IRQHandler+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d022      	beq.n	8000ce8 <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART1->DR;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MODBUS_IRQHandler+0x64>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MODBUS_IRQHandler+0x68>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	425a      	negs	r2, r3
 8000cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cba:	bf58      	it	pl
 8000cbc:	4253      	negpl	r3, r2
 8000cbe:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MODBUS_IRQHandler+0x6c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	88ba      	ldrh	r2, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d00a      	beq.n	8000ce2 <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MODBUS_IRQHandler+0x68>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <MODBUS_IRQHandler+0x70>)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <MODBUS_IRQHandler+0x68>)
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 8000ce0:	e002      	b.n	8000ce8 <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MODBUS_IRQHandler+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	2000008a 	.word	0x2000008a
 8000cfc:	2000008c 	.word	0x2000008c
 8000d00:	200000d4 	.word	0x200000d4
 8000d04:	20000089 	.word	0x20000089

08000d08 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <TIM2_Init+0x3c>)
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <TIM2_Init+0x3c>)
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	221f      	movs	r2, #31
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 8000d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <NVIC_EnableIRQ+0x2c>)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <USART1_init>:
 */

#include "usart.h"

void USART1_init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=(1<<14);	 	//set bit 14 (USART1 EN) p.156
 8000d7c:	4a28      	ldr	r2, [pc, #160]	; (8000e20 <USART1_init+0xa8>)
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <USART1_init+0xa8>)
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	6213      	str	r3, [r2, #32]
	RCC->AHBENR|=0x00000001; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <USART1_init+0xa8>)
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <USART1_init+0xa8>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[1]=0x00000700;	//GPIOx_AFRL p.189,AF7 p.177 (AFRH10[3:0])
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <USART1_init+0xac>)
 8000d96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1]|=0x00000070;	//GPIOx_AFRL p.189,AF7 p.177 (AFRH9[3:0])
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <USART1_init+0xac>)
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <USART1_init+0xac>)
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000da6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER|=0x00080000; 	//MODER2=PA9(TX)D8 to mode 10=alternate function mode. p184
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <USART1_init+0xac>)
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <USART1_init+0xac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=0x00200000; 	//MODER2=PA10(RX)D2 to mode 10=alternate function mode. p184
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <USART1_init+0xac>)
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <USART1_init+0xac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dbe:	6013      	str	r3, [r2, #0]

	USART1->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, D05
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <USART1_init+0xb0>)
 8000dc2:	f640 5205 	movw	r2, #3333	; 0xd05
 8000dc6:	609a      	str	r2, [r3, #8]
	USART1->CR1 = 0x00000008;	//TE bit. p739-740. Enable transmit
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <USART1_init+0xb0>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= 0x00000004;	//RE bit. p739-740. Enable receiver
 8000dce:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <USART1_init+0xb0>)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <USART1_init+0xb0>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 0x00002000;	//UE bit. p739-740. Uart enable
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <USART1_init+0xb0>)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <USART1_init+0xb0>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de4:	60d3      	str	r3, [r2, #12]

	USART1->CR1 |= USART_CR1_SBK; // SBK bit. Send break enabled
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <USART1_init+0xb0>)
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <USART1_init+0xb0>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	60d3      	str	r3, [r2, #12]

	USART1->CR2 = 0x00; // reset
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <USART1_init+0xb0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]

	USART1->CR3 = 0;   // Set to default state
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <USART1_init+0xb0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
	USART1->CR3 |= 1;  // Enable error interrupt,  p744
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <USART1_init+0xb0>)
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <USART1_init+0xb0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6153      	str	r3, [r2, #20]
	/* Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing
	error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USART_SR register) in
	case of Multi Buffer Communication (DMAR=1 in the USART_CR3 register).*/
	USART1->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <USART1_init+0xb0>)
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <USART1_init+0xb0>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn); 	//enable interrupt in NVIC
 8000e16:	2025      	movs	r0, #37	; 0x25
 8000e18:	f7ff ff96 	bl	8000d48 <NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40013800 	.word	0x40013800

08000e2c <USART1_write>:
		data=USART1->DR;			//p739
		return data;
}

void USART1_write(uint8_t data)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 8000e36:	bf00      	nop
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <USART1_write+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f9      	beq.n	8000e38 <USART1_write+0xc>
	USART1->DR = (data);		//p739
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <USART1_write+0x28>)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	6053      	str	r3, [r2, #4]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40013800 	.word	0x40013800

08000e58 <USART1_IRQHandler>:
	USART1_write('\r');
	USART1_write('\n');
}

void USART1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    //if (USART1->SR & USART_SR_RXNE)
    //{
    //    uint8_t data = USART1->DR;
    //	USART2_write(data);
    //}
	MODBUS_IRQHandler();
 8000e5c:	f7ff ff18 	bl	8000c90 <MODBUS_IRQHandler>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <USART2_init>:

void USART2_init()
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <USART2_init+0x7c>)
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <USART2_init+0x7c>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e72:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000e74:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <USART2_init+0x7c>)
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <USART2_init+0x7c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <USART2_init+0x80>)
 8000e82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e86:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <USART2_init+0x80>)
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <USART2_init+0x80>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000e92:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <USART2_init+0x80>)
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <USART2_init+0x80>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <USART2_init+0x80>)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <USART2_init+0x80>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eaa:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <USART2_init+0x84>)
 8000eae:	f640 5205 	movw	r2, #3333	; 0xd05
 8000eb2:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <USART2_init+0x84>)
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <USART2_init+0x84>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <USART2_init+0x84>)
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <USART2_init+0x84>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <USART2_init+0x84>)
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <USART2_init+0x84>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ed6:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
	//NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40004400 	.word	0x40004400

08000eec <USART2_write>:
		data=USART2->DR;			//p739
		return data;
}

void USART2_write(char data)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 8000ef6:	bf00      	nop
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <USART2_write+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <USART2_write+0xc>
	USART2->DR = (data);		//p739
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <USART2_write+0x28>)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	6053      	str	r3, [r2, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40004400 	.word	0x40004400

08000f18 <USART2_write_buffer>:

void USART2_write_buffer(uint8_t* buffer)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 8000f20:	e007      	b.n	8000f32 <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffe0 	bl	8000eec <USART2_write>
		buffer++;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f3      	bne.n	8000f22 <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 8000f3a:	200d      	movs	r0, #13
 8000f3c:	f7ff ffd6 	bl	8000eec <USART2_write>
	USART2_write('\n');
 8000f40:	200a      	movs	r0, #10
 8000f42:	f7ff ffd3 	bl	8000eec <USART2_write>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <DHT22_SWITCH_MODE_OUTPUT>:

static volatile uint8_t pulses[BIT_COUNT];
static volatile uint8_t dht_status = 0;

void DHT22_SWITCH_MODE_OUTPUT()
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f5e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40020000 	.word	0x40020000

08000f78 <DHT22_SWITCH_MODE_INPUT>:

void DHT22_SWITCH_MODE_INPUT()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <DHT22_SWITCH_MODE_INPUT+0x18>)
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <DHT22_SWITCH_MODE_INPUT+0x18>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40020000 	.word	0x40020000

08000f94 <DHT22_read>:

    NVIC_EnableIRQ(EXTI9_5_IRQn);
}

uint8_t DHT22_read(MODBUS_Reading *reading)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0a2      	sub	sp, #136	; 0x88
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
    uint8_t byte_list[5] = {0};
 8000f9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	711a      	strb	r2, [r3, #4]
    uint8_t buffer[100];

    DHT22_start();
 8000fa6:	f000 f8e5 	bl	8001174 <DHT22_start>

    if (DHT22_wait_response())
 8000faa:	f000 f907 	bl	80011bc <DHT22_wait_response>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <DHT22_read+0x2a>
    {
        USART2_write_buffer("DHT22 Not ready to send data!");
 8000fb4:	4866      	ldr	r0, [pc, #408]	; (8001150 <DHT22_read+0x1bc>)
 8000fb6:	f7ff ffaf 	bl	8000f18 <USART2_write_buffer>
        return DHT_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0c3      	b.n	8001146 <DHT22_read+0x1b2>
    }

    SysTick->LOAD = TIMEOUT_20_MS - 1; // Set maximum allowable wait time
 8000fbe:	4b65      	ldr	r3, [pc, #404]	; (8001154 <DHT22_read+0x1c0>)
 8000fc0:	4a65      	ldr	r2, [pc, #404]	; (8001158 <DHT22_read+0x1c4>)
 8000fc2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <DHT22_read+0x1c0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000fca:	4b62      	ldr	r3, [pc, #392]	; (8001154 <DHT22_read+0x1c0>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	601a      	str	r2, [r3, #0]

    // Wait for data
    while(dht_status == DHT_MEASURING)
 8000fd0:	e00a      	b.n	8000fe8 <DHT22_read+0x54>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000fd2:	4b60      	ldr	r3, [pc, #384]	; (8001154 <DHT22_read+0x1c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <DHT22_read+0x54>
        {
    		USART2_write_buffer("DHT22 measurement error :/");
 8000fde:	485f      	ldr	r0, [pc, #380]	; (800115c <DHT22_read+0x1c8>)
 8000fe0:	f7ff ff9a 	bl	8000f18 <USART2_write_buffer>
            return DHT_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0ae      	b.n	8001146 <DHT22_read+0x1b2>
    while(dht_status == DHT_MEASURING)
 8000fe8:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <DHT22_read+0x1cc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d0ef      	beq.n	8000fd2 <DHT22_read+0x3e>
        }
    }

	SysTick->CTRL = 0;
 8000ff2:	4b58      	ldr	r3, [pc, #352]	; (8001154 <DHT22_read+0x1c0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

    if (dht_status == DHT_READY)
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <DHT22_read+0x1cc>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 80a0 	bne.w	8001144 <DHT22_read+0x1b0>
    {
	    EXTI->IMR &= ~EXTI_IMR_MR7;
 8001004:	4a57      	ldr	r2, [pc, #348]	; (8001164 <DHT22_read+0x1d0>)
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <DHT22_read+0x1d0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800100e:	6013      	str	r3, [r2, #0]
    	dht_status = DHT_NOT_READY;
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <DHT22_read+0x1cc>)
 8001012:	2202      	movs	r2, #2
 8001014:	701a      	strb	r2, [r3, #0]

    	DHT22_decode_pulses(pulses, byte_list);
 8001016:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101a:	4619      	mov	r1, r3
 800101c:	4852      	ldr	r0, [pc, #328]	; (8001168 <DHT22_read+0x1d4>)
 800101e:	f000 f91d 	bl	800125c <DHT22_decode_pulses>

		uint8_t humidity_int = byte_list[0];
 8001022:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001026:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		uint8_t humidity_dec = byte_list[1];
 800102a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800102e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		uint8_t temperature_int = byte_list[2];
 8001032:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001036:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint8_t temperature_dec = byte_list[3];
 800103a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800103e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		uint8_t checksum = byte_list[4];
 8001042:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001046:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

		uint16_t humidity = (humidity_int << 8) | humidity_dec;
 800104a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21b      	sxth	r3, r3
 800105c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		uint16_t temperature = (temperature_int << 8) | temperature_dec;
 8001060:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	    if (temperature_int & 0x80) temperature = -temperature;
 8001076:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 800107a:	2b00      	cmp	r3, #0
 800107c:	da04      	bge.n	8001088 <DHT22_read+0xf4>
 800107e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001082:	425b      	negs	r3, r3
 8001084:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		uint8_t expected_checksum = humidity_int + humidity_dec + temperature_int + temperature_dec;
 8001088:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 800108c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001090:	4413      	add	r3, r2
 8001092:	b2da      	uxtb	r2, r3
 8001094:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001098:	4413      	add	r3, r2
 800109a:	b2da      	uxtb	r2, r3
 800109c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80010a0:	4413      	add	r3, r2
 80010a2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		if (expected_checksum != checksum)
 80010a6:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80010aa:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d010      	beq.n	80010d4 <DHT22_read+0x140>
		{
			snprintf(buffer, 100, "Invalid checksum expected %.2X got %.2X", expected_checksum, checksum);
 80010b2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80010b6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80010ba:	f107 000c 	add.w	r0, r7, #12
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <DHT22_read+0x1d8>)
 80010c4:	2164      	movs	r1, #100	; 0x64
 80010c6:	f000 fc77 	bl	80019b8 <sniprintf>
			USART2_write_buffer(buffer);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff22 	bl	8000f18 <USART2_write_buffer>
		}

		//reading->humidity_int = humidity / 10;
		//reading->humidity_dec = humidity % 10;
		reading->humidity = (humidity / 10) << 8 | humidity % 10;
 80010d4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80010d8:	4a25      	ldr	r2, [pc, #148]	; (8001170 <DHT22_read+0x1dc>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b218      	sxth	r0, r3
 80010e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <DHT22_read+0x1dc>)
 80010ec:	fba3 1302 	umull	r1, r3, r3, r2
 80010f0:	08d9      	lsrs	r1, r3, #3
 80010f2:	460b      	mov	r3, r1
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4303      	orrs	r3, r0
 8001102:	b21b      	sxth	r3, r3
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	805a      	strh	r2, [r3, #2]

		//reading->temperature_int = temperature / 10;
		//reading->temperature_dec = temperature % 10;
		reading->temperature = (temperature / 10) << 8 | temperature % 10;
 800110a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <DHT22_read+0x1dc>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	b29b      	uxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b218      	sxth	r0, r3
 800111c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <DHT22_read+0x1dc>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	08d9      	lsrs	r1, r3, #3
 8001128:	460b      	mov	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21b      	sxth	r3, r3
 8001136:	4303      	orrs	r3, r0
 8001138:	b21b      	sxth	r3, r3
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]

		return DHT_READY;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <DHT22_read+0x1b2>
    }

    return DHT_ERROR;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	3780      	adds	r7, #128	; 0x80
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08002244 	.word	0x08002244
 8001154:	e000e010 	.word	0xe000e010
 8001158:	0009c3ff 	.word	0x0009c3ff
 800115c:	08002264 	.word	0x08002264
 8001160:	200000c1 	.word	0x200000c1
 8001164:	40010400 	.word	0x40010400
 8001168:	20000098 	.word	0x20000098
 800116c:	08002280 	.word	0x08002280
 8001170:	cccccccd 	.word	0xcccccccd

08001174 <DHT22_start>:

void DHT22_start()
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    EXTI->IMR &= ~EXTI_IMR_MR7;
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <DHT22_start+0x40>)
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <DHT22_start+0x40>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001182:	6013      	str	r3, [r2, #0]
    // MCU PULL LOW ~20ms
    DHT22_SWITCH_MODE_OUTPUT();
 8001184:	f7ff fee4 	bl	8000f50 <DHT22_SWITCH_MODE_OUTPUT>
    GPIOA->ODR &= ~GPIO_ODR_ODR_7;
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <DHT22_start+0x44>)
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <DHT22_start+0x44>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001192:	6153      	str	r3, [r2, #20]
    delay_ms(20);
 8001194:	2014      	movs	r0, #20
 8001196:	f000 fa09 	bl	80015ac <delay_ms>

    // MCU RELEASE LINE 20-40us
    GPIOA->ODR |= GPIO_ODR_ODR_7;
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <DHT22_start+0x44>)
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <DHT22_start+0x44>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6153      	str	r3, [r2, #20]
    DHT22_SWITCH_MODE_INPUT();
 80011a6:	f7ff fee7 	bl	8000f78 <DHT22_SWITCH_MODE_INPUT>
	delay_us(20);
 80011aa:	2014      	movs	r0, #20
 80011ac:	f000 f9d8 	bl	8001560 <delay_us>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010400 	.word	0x40010400
 80011b8:	40020000 	.word	0x40020000

080011bc <DHT22_wait_response>:

uint8_t DHT22_wait_response()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <DHT22_wait_response+0x8c>)
 80011c2:	f640 323f 	movw	r2, #2879	; 0xb3f
 80011c6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <DHT22_wait_response+0x8c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <DHT22_wait_response+0x8c>)
 80011d0:	2205      	movs	r2, #5
 80011d2:	601a      	str	r2, [r3, #0]

    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 80011d4:	e00a      	b.n	80011ec <DHT22_wait_response+0x30>
    {
        if ((SysTick->CTRL) & 0x10000)
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <DHT22_wait_response+0x8c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <DHT22_wait_response+0x30>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response PULL LOW");
 80011e2:	481a      	ldr	r0, [pc, #104]	; (800124c <DHT22_wait_response+0x90>)
 80011e4:	f7ff fe98 	bl	8000f18 <USART2_write_buffer>
            return DHT_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e02b      	b.n	8001244 <DHT22_wait_response+0x88>
    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <DHT22_wait_response+0x94>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ee      	beq.n	80011d6 <DHT22_wait_response+0x1a>
        }
    }

    EXTI->IMR |= EXTI_IMR_MR7;
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <DHT22_wait_response+0x98>)
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <DHT22_wait_response+0x98>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001202:	6013      	str	r3, [r2, #0]

    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time 85µs
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <DHT22_wait_response+0x8c>)
 8001206:	f640 323f 	movw	r2, #2879	; 0xb3f
 800120a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <DHT22_wait_response+0x8c>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <DHT22_wait_response+0x8c>)
 8001214:	2205      	movs	r2, #5
 8001216:	601a      	str	r2, [r3, #0]
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8001218:	e00a      	b.n	8001230 <DHT22_wait_response+0x74>
    {
        if ((SysTick->CTRL) & 0x10000)
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <DHT22_wait_response+0x8c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <DHT22_wait_response+0x74>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response GET READY");
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <DHT22_wait_response+0x9c>)
 8001228:	f7ff fe76 	bl	8000f18 <USART2_write_buffer>
            return DHT_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e009      	b.n	8001244 <DHT22_wait_response+0x88>
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <DHT22_wait_response+0x94>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <DHT22_wait_response+0x5e>
        }
    }

    SysTick->CTRL = 0;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <DHT22_wait_response+0x8c>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

    return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}
 8001248:	e000e010 	.word	0xe000e010
 800124c:	080022a8 	.word	0x080022a8
 8001250:	40020000 	.word	0x40020000
 8001254:	40010400 	.word	0x40010400
 8001258:	080022e0 	.word	0x080022e0

0800125c <DHT22_decode_pulses>:

void DHT22_decode_pulses(volatile uint8_t *pulses, uint8_t *byte_list)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    uint8_t current_byte = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]

    for (int bit = 1; bit <= BIT_COUNT; bit++)
 800126a:	2301      	movs	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	e02c      	b.n	80012ca <DHT22_decode_pulses+0x6e>
    {
        if (pulses[bit] > 20 && pulses[bit] < 32)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b14      	cmp	r3, #20
 800127c:	d90a      	bls.n	8001294 <DHT22_decode_pulses+0x38>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b1f      	cmp	r3, #31
 800128a:	d803      	bhi.n	8001294 <DHT22_decode_pulses+0x38>
        {
            current_byte = (current_byte << 1) | 0;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e006      	b.n	80012a2 <DHT22_decode_pulses+0x46>
        }
        else
        {
            current_byte = (current_byte << 1) | 1;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	b25b      	sxtb	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
        }

        if ((bit % 8) == 0)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10b      	bne.n	80012c4 <DHT22_decode_pulses+0x68>
        {
            byte_list[(bit / 8) - 1] = current_byte;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da00      	bge.n	80012b4 <DHT22_decode_pulses+0x58>
 80012b2:	3307      	adds	r3, #7
 80012b4:	10db      	asrs	r3, r3, #3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
            current_byte = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
    for (int bit = 1; bit <= BIT_COUNT; bit++)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b29      	cmp	r3, #41	; 0x29
 80012ce:	ddcf      	ble.n	8001270 <DHT22_decode_pulses+0x14>
        }
    }
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <DHT22_ModbusHandler>:

void DHT22_ModbusHandler(MODBUS_Reading* reading)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b09c      	sub	sp, #112	; 0x70
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	if(!(DHT22_read(reading)))
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fe56 	bl	8000f94 <DHT22_read>
		snprintf(buffer, 100, "DHT22 Temperature %4x", reading->temperature);
		USART2_write_buffer(buffer);
#endif
	}

	return;
 80012e8:	bf00      	nop
}
 80012ea:	3770      	adds	r7, #112	; 0x70
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DHT22_IRQHandler>:

void DHT22_IRQHandler()
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 80012f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <DHT22_IRQHandler+0xa4>)
 8001300:	2203      	movs	r2, #3
 8001302:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <DHT22_IRQHandler+0xa8>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <DHT22_IRQHandler+0xac>)
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 8001316:	4a20      	ldr	r2, [pc, #128]	; (8001398 <DHT22_IRQHandler+0xa8>)
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <DHT22_IRQHandler+0xa8>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	6153      	str	r3, [r2, #20]
 8001322:	e025      	b.n	8001370 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <DHT22_IRQHandler+0xac>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	88fa      	ldrh	r2, [r7, #6]
 800132a:	429a      	cmp	r2, r3
 800132c:	d305      	bcc.n	800133a <DHT22_IRQHandler+0x4a>
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <DHT22_IRQHandler+0xac>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	e006      	b.n	8001348 <DHT22_IRQHandler+0x58>
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <DHT22_IRQHandler+0xac>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <DHT22_IRQHandler+0xb0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	b2d9      	uxtb	r1, r3
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <DHT22_IRQHandler+0xb4>)
 8001356:	5499      	strb	r1, [r3, r2]
		index++;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <DHT22_IRQHandler+0xb0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <DHT22_IRQHandler+0xb0>)
 8001362:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <DHT22_IRQHandler+0xa8>)
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <DHT22_IRQHandler+0xa8>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f023 0320 	bic.w	r3, r3, #32
 800136e:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <DHT22_IRQHandler+0xb0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b28      	cmp	r3, #40	; 0x28
 8001376:	d905      	bls.n	8001384 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <DHT22_IRQHandler+0xb0>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <DHT22_IRQHandler+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <DHT22_IRQHandler+0xb8>)
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200000c1 	.word	0x200000c1
 8001398:	40020000 	.word	0x40020000
 800139c:	200000c2 	.word	0x200000c2
 80013a0:	200000c4 	.word	0x200000c4
 80013a4:	20000098 	.word	0x20000098
 80013a8:	40010400 	.word	0x40010400

080013ac <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 80013b6:	f107 020b 	add.w	r2, r7, #11
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f85d 	bl	8001480 <sgp30_get_feature_set_version>
 80013c6:	4603      	mov	r3, r0
 80013c8:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 80013ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <sgp30_check_featureset+0x2c>
        return ret;
 80013d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d6:	e00d      	b.n	80013f4 <sgp30_check_featureset+0x48>

    if (product_type != SGP30_PRODUCT_TYPE)
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <sgp30_check_featureset+0x38>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 80013de:	f06f 030b 	mvn.w	r3, #11
 80013e2:	e007      	b.n	80013f4 <sgp30_check_featureset+0x48>

    if (fs_version < needed_fs)
 80013e4:	89bb      	ldrh	r3, [r7, #12]
 80013e6:	88fa      	ldrh	r2, [r7, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d902      	bls.n	80013f2 <sgp30_check_featureset+0x46>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 80013ec:	f06f 0309 	mvn.w	r3, #9
 80013f0:	e000      	b.n	80013f4 <sgp30_check_featureset+0x48>

    return STATUS_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8001400:	2358      	movs	r3, #88	; 0x58
 8001402:	f242 0108 	movw	r1, #8200	; 0x2008
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f810 	bl	800042c <sensirion_i2c_write_cmd>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}

08001412 <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 800141c:	2058      	movs	r0, #88	; 0x58
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2202      	movs	r2, #2
 8001424:	4619      	mov	r1, r3
 8001426:	f7fe ffc5 	bl	80003b4 <sensirion_i2c_read_words>
 800142a:	4603      	mov	r3, r0
 800142c:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 800142e:	897a      	ldrh	r2, [r7, #10]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8001434:	893a      	ldrh	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	801a      	strh	r2, [r3, #0]

    return ret;
 800143a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8001450:	f7ff ffd4 	bl	80013fc <sgp30_measure_iaq>
 8001454:	4603      	mov	r3, r0
 8001456:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8001458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8001460:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001464:	e008      	b.n	8001478 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8001466:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800146a:	f7ff f87f 	bl	800056c <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffce 	bl	8001412 <sgp30_read_iaq>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t* feature_set_version,
                                      uint8_t* product_type) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 800148a:	2058      	movs	r0, #88	; 0x58
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	2301      	movs	r3, #1
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	f242 7210 	movw	r2, #10000	; 0x2710
 800149a:	f242 012f 	movw	r1, #8239	; 0x202f
 800149e:	f7fe ffe1 	bl	8000464 <sensirion_i2c_delayed_read_cmd>
 80014a2:	4603      	mov	r3, r0
 80014a4:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <sgp30_get_feature_set_version+0x34>
        return ret;
 80014ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b2:	e00b      	b.n	80014cc <sgp30_get_feature_set_version+0x4c>

    *feature_set_version = words[0] & 0x00FF;
 80014b4:	89bb      	ldrh	r3, [r7, #12]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 80014be:	89bb      	ldrh	r3, [r7, #12]
 80014c0:	0b1b      	lsrs	r3, r3, #12
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 80014da:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 80014dc:	f242 0103 	movw	r1, #8195	; 0x2003
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffa3 	bl	800042c <sensirion_i2c_write_cmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 80014ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80014ee:	f7ff f83d 	bl	800056c <sensirion_sleep_usec>
    return ret;
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <sgp30_probe>:

int16_t sgp30_probe() {
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 8001504:	2020      	movs	r0, #32
 8001506:	f7ff ff51 	bl	80013ac <sgp30_check_featureset>
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]

    if (ret != STATUS_OK)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <sgp30_probe+0x1e>
        return ret;
 8001516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151a:	e002      	b.n	8001522 <sgp30_probe+0x24>

    return sgp30_iaq_init();
 800151c:	f7ff ffda 	bl	80014d4 <sgp30_iaq_init>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <sgp30_modbus_read>:

int16_t sgp30_modbus_read(MODBUS_Reading* reading)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	int16_t err = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	81fb      	strh	r3, [r7, #14]

    err = sgp30_measure_iaq_blocking_read(&reading->tvoc_ppb, &reading->co2_eq_ppm);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1d9a      	adds	r2, r3, #6
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3308      	adds	r3, #8
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f7ff ff80 	bl	8001446 <sgp30_measure_iaq_blocking_read>
 8001546:	4603      	mov	r3, r0
 8001548:	81fb      	strh	r3, [r7, #14]
    if (err == STATUS_OK)
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <sgp30_modbus_read+0x2c>
    {
    	return 0;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <sgp30_modbus_read+0x2e>
    }

    return 1;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <delay_us>:
#include "timing.h"
#include "stm32l1xx.h"

void delay_us(unsigned long delay)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32 - 1; //32 000 000 = 1s so 32 = 1 us
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <delay_us+0x48>)
 800156e:	221f      	movs	r2, #31
 8001570:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <delay_us+0x48>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <delay_us+0x48>)
 800157a:	2205      	movs	r2, #5
 800157c:	601a      	str	r2, [r3, #0]

	  while(i < delay)
 800157e:	e009      	b.n	8001594 <delay_us+0x34>
	  {
		  while(!((SysTick->CTRL) & 0x10000)){}
 8001580:	bf00      	nop
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <delay_us+0x48>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f9      	beq.n	8001582 <delay_us+0x22>
		  i++;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
	  while(i < delay)
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3f1      	bcc.n	8001580 <delay_us+0x20>
	  }
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <delay_ms>:

void delay_ms(unsigned long delay)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <delay_ms+0x48>)
 80015ba:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80015be:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <delay_ms+0x48>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <delay_ms+0x48>)
 80015c8:	2205      	movs	r2, #5
 80015ca:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 80015cc:	e009      	b.n	80015e2 <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 80015ce:	bf00      	nop
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <delay_ms+0x48>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <delay_ms+0x24>
		i++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3f1      	bcc.n	80015ce <delay_ms+0x22>
	}
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <SetSysClock>:
void SetSysClock(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <SetSysClock+0x100>)
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <SetSysClock+0x100>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 800160e:	bf00      	nop
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <SetSysClock+0x100>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 800161c:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <SetSysClock+0x100>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <SetSysClock+0x36>
  {
    status = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10b      	bne.n	8001650 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8001638:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <SetSysClock+0x100>)
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <SetSysClock+0x100>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001642:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8001644:	4a2c      	ldr	r2, [pc, #176]	; (80016f8 <SetSysClock+0x100>)
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <SetSysClock+0x100>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 800164e:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <SetSysClock+0x104>)
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <SetSysClock+0x104>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <SetSysClock+0x104>)
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <SetSysClock+0x104>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8001668:	4a24      	ldr	r2, [pc, #144]	; (80016fc <SetSysClock+0x104>)
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <SetSysClock+0x104>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <SetSysClock+0x100>)
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <SetSysClock+0x100>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167e:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <SetSysClock+0x108>)
 8001682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001686:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8001688:	bf00      	nop
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <SetSysClock+0x108>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <SetSysClock+0x100>)
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <SetSysClock+0x100>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a0:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <SetSysClock+0x100>)
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <SetSysClock+0x100>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ac:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <SetSysClock+0x100>)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <SetSysClock+0x100>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016b8:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <SetSysClock+0x100>)
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <SetSysClock+0x100>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c4:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 80016c6:	bf00      	nop
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <SetSysClock+0x100>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f9      	beq.n	80016c8 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 80016d4:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <SetSysClock+0x100>)
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <SetSysClock+0x100>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f043 0303 	orr.w	r3, r3, #3
 80016de:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 80016e0:	bf00      	nop
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SetSysClock+0x100>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f9      	beq.n	80016e2 <SetSysClock+0xea>
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40007000 	.word	0x40007000

08001704 <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	SetSysClock();
 8001708:	f7ff ff76 	bl	80015f8 <SetSysClock>
	SystemCoreClockUpdate();
 800170c:	f000 f888 	bl	8001820 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8001710:	f7fe ff46 	bl	80005a0 <GPIO_init>
	USART1_init();
 8001714:	f7ff fb30 	bl	8000d78 <USART1_init>
	USART2_init();
 8001718:	f7ff fba4 	bl	8000e64 <USART2_init>
	TIM2_Init();
 800171c:	f7ff faf4 	bl	8000d08 <TIM2_Init>

	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	//DHT22_init();
    sensirion_i2c_init();
 8001720:	f7fe fed2 	bl	80004c8 <sensirion_i2c_init>

	MODBUS_RE_TE_LOW();
 8001724:	f7fe ff6a 	bl	80005fc <MODBUS_RE_TE_LOW>

    while (1)
    {
		MODBUS_ProcessFrame();
 8001728:	f7ff f9c4 	bl	8000ab4 <MODBUS_ProcessFrame>
 800172c:	e7fc      	b.n	8001728 <main+0x24>
	...

08001730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001730:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001732:	e003      	b.n	800173c <LoopCopyDataInit>

08001734 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001736:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001738:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800173a:	3104      	adds	r1, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001740:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001742:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001744:	d3f6      	bcc.n	8001734 <CopyDataInit>
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001748:	e002      	b.n	8001750 <LoopFillZerobss>

0800174a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800174c:	f842 3b04 	str.w	r3, [r2], #4

08001750 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001752:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001754:	d3f9      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001756:	f000 f82f 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f000 f909 	bl	8001970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175e:	f7ff ffd1 	bl	8001704 <main>
  bx lr
 8001762:	4770      	bx	lr
  ldr r3, =_sidata
 8001764:	08002570 	.word	0x08002570
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800176c:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8001770:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8001774:	20000158 	.word	0x20000158

08001778 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_IRQHandler>
	...

0800177c <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <_sbrk+0x34>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x16>
		heap_end = & end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x34>)
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <_sbrk+0x38>)
 8001790:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x34>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <_sbrk+0x34>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <_sbrk+0x34>)
 80017a2:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	200000c8 	.word	0x200000c8
 80017b4:	20000158 	.word	0x20000158

080017b8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80017bc:	4a15      	ldr	r2, [pc, #84]	; (8001814 <SystemInit+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <SystemInit+0x5c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <SystemInit+0x5c>)
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <SystemInit+0x5c>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <SystemInit+0x60>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <SystemInit+0x5c>)
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <SystemInit+0x5c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80017de:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80017e2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <SystemInit+0x5c>)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <SystemInit+0x5c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <SystemInit+0x5c>)
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SystemInit+0x5c>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80017fa:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SystemInit+0x5c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x64>)
 8001804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001808:	609a      	str	r2, [r3, #8]
#endif
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	88ffc00c 	.word	0x88ffc00c
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800183a:	4b48      	ldr	r3, [pc, #288]	; (800195c <SystemCoreClockUpdate+0x13c>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d863      	bhi.n	8001912 <SystemCoreClockUpdate+0xf2>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <SystemCoreClockUpdate+0x30>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001885 	.word	0x08001885
 8001854:	08001913 	.word	0x08001913
 8001858:	08001913 	.word	0x08001913
 800185c:	08001913 	.word	0x08001913
 8001860:	080018a5 	.word	0x080018a5
 8001864:	08001913 	.word	0x08001913
 8001868:	08001913 	.word	0x08001913
 800186c:	08001913 	.word	0x08001913
 8001870:	080018ad 	.word	0x080018ad
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	080018b5 	.word	0x080018b5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <SystemCoreClockUpdate+0x13c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0b5b      	lsrs	r3, r3, #13
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <SystemCoreClockUpdate+0x140>)
 80018a0:	601a      	str	r2, [r3, #0]
      break;
 80018a2:	e046      	b.n	8001932 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <SystemCoreClockUpdate+0x140>)
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <SystemCoreClockUpdate+0x144>)
 80018a8:	601a      	str	r2, [r3, #0]
      break;
 80018aa:	e042      	b.n	8001932 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <SystemCoreClockUpdate+0x140>)
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <SystemCoreClockUpdate+0x144>)
 80018b0:	601a      	str	r2, [r3, #0]
      break;
 80018b2:	e03e      	b.n	8001932 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <SystemCoreClockUpdate+0x13c>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018bc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <SystemCoreClockUpdate+0x13c>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80018c6:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <SystemCoreClockUpdate+0x148>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	0d9b      	lsrs	r3, r3, #22
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <SystemCoreClockUpdate+0x13c>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <SystemCoreClockUpdate+0x144>)
 80018ee:	fb02 f203 	mul.w	r2, r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <SystemCoreClockUpdate+0x140>)
 80018fa:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80018fc:	e019      	b.n	8001932 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <SystemCoreClockUpdate+0x144>)
 8001902:	fb02 f203 	mul.w	r2, r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <SystemCoreClockUpdate+0x140>)
 800190e:	6013      	str	r3, [r2, #0]
      break;
 8001910:	e00f      	b.n	8001932 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <SystemCoreClockUpdate+0x13c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0b5b      	lsrs	r3, r3, #13
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	461a      	mov	r2, r3
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <SystemCoreClockUpdate+0x140>)
 800192e:	601a      	str	r2, [r3, #0]
      break;
 8001930:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SystemCoreClockUpdate+0x13c>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <SystemCoreClockUpdate+0x14c>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <SystemCoreClockUpdate+0x140>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <SystemCoreClockUpdate+0x140>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	20000004 	.word	0x20000004
 8001964:	007a1200 	.word	0x007a1200
 8001968:	08002518 	.word	0x08002518
 800196c:	08002524 	.word	0x08002524

08001970 <__libc_init_array>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	2500      	movs	r5, #0
 8001974:	4e0c      	ldr	r6, [pc, #48]	; (80019a8 <__libc_init_array+0x38>)
 8001976:	4c0d      	ldr	r4, [pc, #52]	; (80019ac <__libc_init_array+0x3c>)
 8001978:	1ba4      	subs	r4, r4, r6
 800197a:	10a4      	asrs	r4, r4, #2
 800197c:	42a5      	cmp	r5, r4
 800197e:	d109      	bne.n	8001994 <__libc_init_array+0x24>
 8001980:	f000 fc54 	bl	800222c <_init>
 8001984:	2500      	movs	r5, #0
 8001986:	4e0a      	ldr	r6, [pc, #40]	; (80019b0 <__libc_init_array+0x40>)
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <__libc_init_array+0x44>)
 800198a:	1ba4      	subs	r4, r4, r6
 800198c:	10a4      	asrs	r4, r4, #2
 800198e:	42a5      	cmp	r5, r4
 8001990:	d105      	bne.n	800199e <__libc_init_array+0x2e>
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001998:	4798      	blx	r3
 800199a:	3501      	adds	r5, #1
 800199c:	e7ee      	b.n	800197c <__libc_init_array+0xc>
 800199e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a2:	4798      	blx	r3
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7f2      	b.n	800198e <__libc_init_array+0x1e>
 80019a8:	08002568 	.word	0x08002568
 80019ac:	08002568 	.word	0x08002568
 80019b0:	08002568 	.word	0x08002568
 80019b4:	0800256c 	.word	0x0800256c

080019b8 <sniprintf>:
 80019b8:	b40c      	push	{r2, r3}
 80019ba:	b530      	push	{r4, r5, lr}
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <sniprintf+0x64>)
 80019be:	1e0c      	subs	r4, r1, #0
 80019c0:	b09d      	sub	sp, #116	; 0x74
 80019c2:	681d      	ldr	r5, [r3, #0]
 80019c4:	da08      	bge.n	80019d8 <sniprintf+0x20>
 80019c6:	238b      	movs	r3, #139	; 0x8b
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	b01d      	add	sp, #116	; 0x74
 80019d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019d4:	b002      	add	sp, #8
 80019d6:	4770      	bx	lr
 80019d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80019dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80019e0:	bf0c      	ite	eq
 80019e2:	4623      	moveq	r3, r4
 80019e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80019e8:	9304      	str	r3, [sp, #16]
 80019ea:	9307      	str	r3, [sp, #28]
 80019ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f0:	9002      	str	r0, [sp, #8]
 80019f2:	9006      	str	r0, [sp, #24]
 80019f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80019f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80019fa:	ab21      	add	r3, sp, #132	; 0x84
 80019fc:	a902      	add	r1, sp, #8
 80019fe:	4628      	mov	r0, r5
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	f000 f913 	bl	8001c2c <_svfiprintf_r>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	bfbc      	itt	lt
 8001a0a:	238b      	movlt	r3, #139	; 0x8b
 8001a0c:	602b      	strlt	r3, [r5, #0]
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d0dd      	beq.n	80019ce <sniprintf+0x16>
 8001a12:	2200      	movs	r2, #0
 8001a14:	9b02      	ldr	r3, [sp, #8]
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e7d9      	b.n	80019ce <sniprintf+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008

08001a20 <_free_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4605      	mov	r5, r0
 8001a24:	2900      	cmp	r1, #0
 8001a26:	d043      	beq.n	8001ab0 <_free_r+0x90>
 8001a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a2c:	1f0c      	subs	r4, r1, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfb8      	it	lt
 8001a32:	18e4      	addlt	r4, r4, r3
 8001a34:	f000 fbc9 	bl	80021ca <__malloc_lock>
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <_free_r+0x94>)
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	b933      	cbnz	r3, 8001a4e <_free_r+0x2e>
 8001a40:	6063      	str	r3, [r4, #4]
 8001a42:	6014      	str	r4, [r2, #0]
 8001a44:	4628      	mov	r0, r5
 8001a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a4a:	f000 bbbf 	b.w	80021cc <__malloc_unlock>
 8001a4e:	42a3      	cmp	r3, r4
 8001a50:	d90b      	bls.n	8001a6a <_free_r+0x4a>
 8001a52:	6821      	ldr	r1, [r4, #0]
 8001a54:	1862      	adds	r2, r4, r1
 8001a56:	4293      	cmp	r3, r2
 8001a58:	bf01      	itttt	eq
 8001a5a:	681a      	ldreq	r2, [r3, #0]
 8001a5c:	685b      	ldreq	r3, [r3, #4]
 8001a5e:	1852      	addeq	r2, r2, r1
 8001a60:	6022      	streq	r2, [r4, #0]
 8001a62:	6063      	str	r3, [r4, #4]
 8001a64:	6004      	str	r4, [r0, #0]
 8001a66:	e7ed      	b.n	8001a44 <_free_r+0x24>
 8001a68:	4613      	mov	r3, r2
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	b10a      	cbz	r2, 8001a72 <_free_r+0x52>
 8001a6e:	42a2      	cmp	r2, r4
 8001a70:	d9fa      	bls.n	8001a68 <_free_r+0x48>
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	1858      	adds	r0, r3, r1
 8001a76:	42a0      	cmp	r0, r4
 8001a78:	d10b      	bne.n	8001a92 <_free_r+0x72>
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	4401      	add	r1, r0
 8001a7e:	1858      	adds	r0, r3, r1
 8001a80:	4282      	cmp	r2, r0
 8001a82:	6019      	str	r1, [r3, #0]
 8001a84:	d1de      	bne.n	8001a44 <_free_r+0x24>
 8001a86:	6810      	ldr	r0, [r2, #0]
 8001a88:	6852      	ldr	r2, [r2, #4]
 8001a8a:	4401      	add	r1, r0
 8001a8c:	6019      	str	r1, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	e7d8      	b.n	8001a44 <_free_r+0x24>
 8001a92:	d902      	bls.n	8001a9a <_free_r+0x7a>
 8001a94:	230c      	movs	r3, #12
 8001a96:	602b      	str	r3, [r5, #0]
 8001a98:	e7d4      	b.n	8001a44 <_free_r+0x24>
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	1821      	adds	r1, r4, r0
 8001a9e:	428a      	cmp	r2, r1
 8001aa0:	bf01      	itttt	eq
 8001aa2:	6811      	ldreq	r1, [r2, #0]
 8001aa4:	6852      	ldreq	r2, [r2, #4]
 8001aa6:	1809      	addeq	r1, r1, r0
 8001aa8:	6021      	streq	r1, [r4, #0]
 8001aaa:	6062      	str	r2, [r4, #4]
 8001aac:	605c      	str	r4, [r3, #4]
 8001aae:	e7c9      	b.n	8001a44 <_free_r+0x24>
 8001ab0:	bd38      	pop	{r3, r4, r5, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000cc 	.word	0x200000cc

08001ab8 <_malloc_r>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	1ccd      	adds	r5, r1, #3
 8001abc:	f025 0503 	bic.w	r5, r5, #3
 8001ac0:	3508      	adds	r5, #8
 8001ac2:	2d0c      	cmp	r5, #12
 8001ac4:	bf38      	it	cc
 8001ac6:	250c      	movcc	r5, #12
 8001ac8:	2d00      	cmp	r5, #0
 8001aca:	4606      	mov	r6, r0
 8001acc:	db01      	blt.n	8001ad2 <_malloc_r+0x1a>
 8001ace:	42a9      	cmp	r1, r5
 8001ad0:	d903      	bls.n	8001ada <_malloc_r+0x22>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	6033      	str	r3, [r6, #0]
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	f000 fb76 	bl	80021ca <__malloc_lock>
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <_malloc_r+0xb4>)
 8001ae0:	6814      	ldr	r4, [r2, #0]
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	b991      	cbnz	r1, 8001b0c <_malloc_r+0x54>
 8001ae6:	4c22      	ldr	r4, [pc, #136]	; (8001b70 <_malloc_r+0xb8>)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	b91b      	cbnz	r3, 8001af4 <_malloc_r+0x3c>
 8001aec:	4630      	mov	r0, r6
 8001aee:	f000 fb29 	bl	8002144 <_sbrk_r>
 8001af2:	6020      	str	r0, [r4, #0]
 8001af4:	4629      	mov	r1, r5
 8001af6:	4630      	mov	r0, r6
 8001af8:	f000 fb24 	bl	8002144 <_sbrk_r>
 8001afc:	1c43      	adds	r3, r0, #1
 8001afe:	d126      	bne.n	8001b4e <_malloc_r+0x96>
 8001b00:	230c      	movs	r3, #12
 8001b02:	4630      	mov	r0, r6
 8001b04:	6033      	str	r3, [r6, #0]
 8001b06:	f000 fb61 	bl	80021cc <__malloc_unlock>
 8001b0a:	e7e4      	b.n	8001ad6 <_malloc_r+0x1e>
 8001b0c:	680b      	ldr	r3, [r1, #0]
 8001b0e:	1b5b      	subs	r3, r3, r5
 8001b10:	d41a      	bmi.n	8001b48 <_malloc_r+0x90>
 8001b12:	2b0b      	cmp	r3, #11
 8001b14:	d90f      	bls.n	8001b36 <_malloc_r+0x7e>
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	18cc      	adds	r4, r1, r3
 8001b1a:	50cd      	str	r5, [r1, r3]
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f000 fb55 	bl	80021cc <__malloc_unlock>
 8001b22:	f104 000b 	add.w	r0, r4, #11
 8001b26:	1d23      	adds	r3, r4, #4
 8001b28:	f020 0007 	bic.w	r0, r0, #7
 8001b2c:	1ac3      	subs	r3, r0, r3
 8001b2e:	d01b      	beq.n	8001b68 <_malloc_r+0xb0>
 8001b30:	425a      	negs	r2, r3
 8001b32:	50e2      	str	r2, [r4, r3]
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	428c      	cmp	r4, r1
 8001b38:	bf0b      	itete	eq
 8001b3a:	6863      	ldreq	r3, [r4, #4]
 8001b3c:	684b      	ldrne	r3, [r1, #4]
 8001b3e:	6013      	streq	r3, [r2, #0]
 8001b40:	6063      	strne	r3, [r4, #4]
 8001b42:	bf18      	it	ne
 8001b44:	460c      	movne	r4, r1
 8001b46:	e7e9      	b.n	8001b1c <_malloc_r+0x64>
 8001b48:	460c      	mov	r4, r1
 8001b4a:	6849      	ldr	r1, [r1, #4]
 8001b4c:	e7ca      	b.n	8001ae4 <_malloc_r+0x2c>
 8001b4e:	1cc4      	adds	r4, r0, #3
 8001b50:	f024 0403 	bic.w	r4, r4, #3
 8001b54:	42a0      	cmp	r0, r4
 8001b56:	d005      	beq.n	8001b64 <_malloc_r+0xac>
 8001b58:	1a21      	subs	r1, r4, r0
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	f000 faf2 	bl	8002144 <_sbrk_r>
 8001b60:	3001      	adds	r0, #1
 8001b62:	d0cd      	beq.n	8001b00 <_malloc_r+0x48>
 8001b64:	6025      	str	r5, [r4, #0]
 8001b66:	e7d9      	b.n	8001b1c <_malloc_r+0x64>
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200000cc 	.word	0x200000cc
 8001b70:	200000d0 	.word	0x200000d0

08001b74 <__ssputs_r>:
 8001b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b78:	688e      	ldr	r6, [r1, #8]
 8001b7a:	4682      	mov	sl, r0
 8001b7c:	429e      	cmp	r6, r3
 8001b7e:	460c      	mov	r4, r1
 8001b80:	4691      	mov	r9, r2
 8001b82:	4698      	mov	r8, r3
 8001b84:	d835      	bhi.n	8001bf2 <__ssputs_r+0x7e>
 8001b86:	898a      	ldrh	r2, [r1, #12]
 8001b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b8c:	d031      	beq.n	8001bf2 <__ssputs_r+0x7e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	6825      	ldr	r5, [r4, #0]
 8001b92:	6909      	ldr	r1, [r1, #16]
 8001b94:	1a6f      	subs	r7, r5, r1
 8001b96:	6965      	ldr	r5, [r4, #20]
 8001b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ba0:	f108 0301 	add.w	r3, r8, #1
 8001ba4:	443b      	add	r3, r7
 8001ba6:	429d      	cmp	r5, r3
 8001ba8:	bf38      	it	cc
 8001baa:	461d      	movcc	r5, r3
 8001bac:	0553      	lsls	r3, r2, #21
 8001bae:	d531      	bpl.n	8001c14 <__ssputs_r+0xa0>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7ff ff81 	bl	8001ab8 <_malloc_r>
 8001bb6:	4606      	mov	r6, r0
 8001bb8:	b950      	cbnz	r0, 8001bd0 <__ssputs_r+0x5c>
 8001bba:	230c      	movs	r3, #12
 8001bbc:	f8ca 3000 	str.w	r3, [sl]
 8001bc0:	89a3      	ldrh	r3, [r4, #12]
 8001bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bca:	81a3      	strh	r3, [r4, #12]
 8001bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd0:	463a      	mov	r2, r7
 8001bd2:	6921      	ldr	r1, [r4, #16]
 8001bd4:	f000 fad4 	bl	8002180 <memcpy>
 8001bd8:	89a3      	ldrh	r3, [r4, #12]
 8001bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be2:	81a3      	strh	r3, [r4, #12]
 8001be4:	6126      	str	r6, [r4, #16]
 8001be6:	443e      	add	r6, r7
 8001be8:	6026      	str	r6, [r4, #0]
 8001bea:	4646      	mov	r6, r8
 8001bec:	6165      	str	r5, [r4, #20]
 8001bee:	1bed      	subs	r5, r5, r7
 8001bf0:	60a5      	str	r5, [r4, #8]
 8001bf2:	4546      	cmp	r6, r8
 8001bf4:	bf28      	it	cs
 8001bf6:	4646      	movcs	r6, r8
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	6820      	ldr	r0, [r4, #0]
 8001bfe:	f000 faca 	bl	8002196 <memmove>
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	2000      	movs	r0, #0
 8001c06:	1b9b      	subs	r3, r3, r6
 8001c08:	60a3      	str	r3, [r4, #8]
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	441e      	add	r6, r3
 8001c0e:	6026      	str	r6, [r4, #0]
 8001c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c14:	462a      	mov	r2, r5
 8001c16:	f000 fada 	bl	80021ce <_realloc_r>
 8001c1a:	4606      	mov	r6, r0
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d1e1      	bne.n	8001be4 <__ssputs_r+0x70>
 8001c20:	6921      	ldr	r1, [r4, #16]
 8001c22:	4650      	mov	r0, sl
 8001c24:	f7ff fefc 	bl	8001a20 <_free_r>
 8001c28:	e7c7      	b.n	8001bba <__ssputs_r+0x46>
	...

08001c2c <_svfiprintf_r>:
 8001c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c30:	b09d      	sub	sp, #116	; 0x74
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	898b      	ldrh	r3, [r1, #12]
 8001c36:	4680      	mov	r8, r0
 8001c38:	061c      	lsls	r4, r3, #24
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	4616      	mov	r6, r2
 8001c3e:	d50f      	bpl.n	8001c60 <_svfiprintf_r+0x34>
 8001c40:	690b      	ldr	r3, [r1, #16]
 8001c42:	b96b      	cbnz	r3, 8001c60 <_svfiprintf_r+0x34>
 8001c44:	2140      	movs	r1, #64	; 0x40
 8001c46:	f7ff ff37 	bl	8001ab8 <_malloc_r>
 8001c4a:	6028      	str	r0, [r5, #0]
 8001c4c:	6128      	str	r0, [r5, #16]
 8001c4e:	b928      	cbnz	r0, 8001c5c <_svfiprintf_r+0x30>
 8001c50:	230c      	movs	r3, #12
 8001c52:	f8c8 3000 	str.w	r3, [r8]
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	e0c4      	b.n	8001de6 <_svfiprintf_r+0x1ba>
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	616b      	str	r3, [r5, #20]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9309      	str	r3, [sp, #36]	; 0x24
 8001c64:	2320      	movs	r3, #32
 8001c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c6a:	2330      	movs	r3, #48	; 0x30
 8001c6c:	f04f 0b01 	mov.w	fp, #1
 8001c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c74:	4637      	mov	r7, r6
 8001c76:	463c      	mov	r4, r7
 8001c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13c      	bne.n	8001cfa <_svfiprintf_r+0xce>
 8001c80:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c84:	d00b      	beq.n	8001c9e <_svfiprintf_r+0x72>
 8001c86:	4653      	mov	r3, sl
 8001c88:	4632      	mov	r2, r6
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	4640      	mov	r0, r8
 8001c8e:	f7ff ff71 	bl	8001b74 <__ssputs_r>
 8001c92:	3001      	adds	r0, #1
 8001c94:	f000 80a2 	beq.w	8001ddc <_svfiprintf_r+0x1b0>
 8001c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c9a:	4453      	add	r3, sl
 8001c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c9e:	783b      	ldrb	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 809b 	beq.w	8001ddc <_svfiprintf_r+0x1b0>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	9304      	str	r3, [sp, #16]
 8001cae:	9307      	str	r3, [sp, #28]
 8001cb0:	9205      	str	r2, [sp, #20]
 8001cb2:	9306      	str	r3, [sp, #24]
 8001cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8001cba:	2205      	movs	r2, #5
 8001cbc:	7821      	ldrb	r1, [r4, #0]
 8001cbe:	4850      	ldr	r0, [pc, #320]	; (8001e00 <_svfiprintf_r+0x1d4>)
 8001cc0:	f000 fa50 	bl	8002164 <memchr>
 8001cc4:	1c67      	adds	r7, r4, #1
 8001cc6:	9b04      	ldr	r3, [sp, #16]
 8001cc8:	b9d8      	cbnz	r0, 8001d02 <_svfiprintf_r+0xd6>
 8001cca:	06d9      	lsls	r1, r3, #27
 8001ccc:	bf44      	itt	mi
 8001cce:	2220      	movmi	r2, #32
 8001cd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cd4:	071a      	lsls	r2, r3, #28
 8001cd6:	bf44      	itt	mi
 8001cd8:	222b      	movmi	r2, #43	; 0x2b
 8001cda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cde:	7822      	ldrb	r2, [r4, #0]
 8001ce0:	2a2a      	cmp	r2, #42	; 0x2a
 8001ce2:	d016      	beq.n	8001d12 <_svfiprintf_r+0xe6>
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	9a07      	ldr	r2, [sp, #28]
 8001cea:	4627      	mov	r7, r4
 8001cec:	783b      	ldrb	r3, [r7, #0]
 8001cee:	3401      	adds	r4, #1
 8001cf0:	3b30      	subs	r3, #48	; 0x30
 8001cf2:	2b09      	cmp	r3, #9
 8001cf4:	d950      	bls.n	8001d98 <_svfiprintf_r+0x16c>
 8001cf6:	b1c9      	cbz	r1, 8001d2c <_svfiprintf_r+0x100>
 8001cf8:	e011      	b.n	8001d1e <_svfiprintf_r+0xf2>
 8001cfa:	2b25      	cmp	r3, #37	; 0x25
 8001cfc:	d0c0      	beq.n	8001c80 <_svfiprintf_r+0x54>
 8001cfe:	4627      	mov	r7, r4
 8001d00:	e7b9      	b.n	8001c76 <_svfiprintf_r+0x4a>
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <_svfiprintf_r+0x1d4>)
 8001d04:	463c      	mov	r4, r7
 8001d06:	1a80      	subs	r0, r0, r2
 8001d08:	fa0b f000 	lsl.w	r0, fp, r0
 8001d0c:	4318      	orrs	r0, r3
 8001d0e:	9004      	str	r0, [sp, #16]
 8001d10:	e7d3      	b.n	8001cba <_svfiprintf_r+0x8e>
 8001d12:	9a03      	ldr	r2, [sp, #12]
 8001d14:	1d11      	adds	r1, r2, #4
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	9103      	str	r1, [sp, #12]
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	db01      	blt.n	8001d22 <_svfiprintf_r+0xf6>
 8001d1e:	9207      	str	r2, [sp, #28]
 8001d20:	e004      	b.n	8001d2c <_svfiprintf_r+0x100>
 8001d22:	4252      	negs	r2, r2
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	9207      	str	r2, [sp, #28]
 8001d2a:	9304      	str	r3, [sp, #16]
 8001d2c:	783b      	ldrb	r3, [r7, #0]
 8001d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d30:	d10d      	bne.n	8001d4e <_svfiprintf_r+0x122>
 8001d32:	787b      	ldrb	r3, [r7, #1]
 8001d34:	1c79      	adds	r1, r7, #1
 8001d36:	2b2a      	cmp	r3, #42	; 0x2a
 8001d38:	d132      	bne.n	8001da0 <_svfiprintf_r+0x174>
 8001d3a:	9b03      	ldr	r3, [sp, #12]
 8001d3c:	3702      	adds	r7, #2
 8001d3e:	1d1a      	adds	r2, r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	9203      	str	r2, [sp, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bfb8      	it	lt
 8001d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d4c:	9305      	str	r3, [sp, #20]
 8001d4e:	4c2d      	ldr	r4, [pc, #180]	; (8001e04 <_svfiprintf_r+0x1d8>)
 8001d50:	2203      	movs	r2, #3
 8001d52:	7839      	ldrb	r1, [r7, #0]
 8001d54:	4620      	mov	r0, r4
 8001d56:	f000 fa05 	bl	8002164 <memchr>
 8001d5a:	b138      	cbz	r0, 8001d6c <_svfiprintf_r+0x140>
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	1b00      	subs	r0, r0, r4
 8001d60:	fa03 f000 	lsl.w	r0, r3, r0
 8001d64:	9b04      	ldr	r3, [sp, #16]
 8001d66:	3701      	adds	r7, #1
 8001d68:	4303      	orrs	r3, r0
 8001d6a:	9304      	str	r3, [sp, #16]
 8001d6c:	7839      	ldrb	r1, [r7, #0]
 8001d6e:	2206      	movs	r2, #6
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <_svfiprintf_r+0x1dc>)
 8001d72:	1c7e      	adds	r6, r7, #1
 8001d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d78:	f000 f9f4 	bl	8002164 <memchr>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d035      	beq.n	8001dec <_svfiprintf_r+0x1c0>
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <_svfiprintf_r+0x1e0>)
 8001d82:	b9fb      	cbnz	r3, 8001dc4 <_svfiprintf_r+0x198>
 8001d84:	9b03      	ldr	r3, [sp, #12]
 8001d86:	3307      	adds	r3, #7
 8001d88:	f023 0307 	bic.w	r3, r3, #7
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d92:	444b      	add	r3, r9
 8001d94:	9309      	str	r3, [sp, #36]	; 0x24
 8001d96:	e76d      	b.n	8001c74 <_svfiprintf_r+0x48>
 8001d98:	fb00 3202 	mla	r2, r0, r2, r3
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	e7a4      	b.n	8001cea <_svfiprintf_r+0xbe>
 8001da0:	2300      	movs	r3, #0
 8001da2:	240a      	movs	r4, #10
 8001da4:	4618      	mov	r0, r3
 8001da6:	9305      	str	r3, [sp, #20]
 8001da8:	460f      	mov	r7, r1
 8001daa:	783a      	ldrb	r2, [r7, #0]
 8001dac:	3101      	adds	r1, #1
 8001dae:	3a30      	subs	r2, #48	; 0x30
 8001db0:	2a09      	cmp	r2, #9
 8001db2:	d903      	bls.n	8001dbc <_svfiprintf_r+0x190>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ca      	beq.n	8001d4e <_svfiprintf_r+0x122>
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	e7c8      	b.n	8001d4e <_svfiprintf_r+0x122>
 8001dbc:	fb04 2000 	mla	r0, r4, r0, r2
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e7f1      	b.n	8001da8 <_svfiprintf_r+0x17c>
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	462a      	mov	r2, r5
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_svfiprintf_r+0x1e4>)
 8001dcc:	a904      	add	r1, sp, #16
 8001dce:	4640      	mov	r0, r8
 8001dd0:	f3af 8000 	nop.w
 8001dd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001dd8:	4681      	mov	r9, r0
 8001dda:	d1d9      	bne.n	8001d90 <_svfiprintf_r+0x164>
 8001ddc:	89ab      	ldrh	r3, [r5, #12]
 8001dde:	065b      	lsls	r3, r3, #25
 8001de0:	f53f af39 	bmi.w	8001c56 <_svfiprintf_r+0x2a>
 8001de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001de6:	b01d      	add	sp, #116	; 0x74
 8001de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dec:	ab03      	add	r3, sp, #12
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	462a      	mov	r2, r5
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_svfiprintf_r+0x1e4>)
 8001df4:	a904      	add	r1, sp, #16
 8001df6:	4640      	mov	r0, r8
 8001df8:	f000 f884 	bl	8001f04 <_printf_i>
 8001dfc:	e7ea      	b.n	8001dd4 <_svfiprintf_r+0x1a8>
 8001dfe:	bf00      	nop
 8001e00:	08002534 	.word	0x08002534
 8001e04:	0800253a 	.word	0x0800253a
 8001e08:	0800253e 	.word	0x0800253e
 8001e0c:	00000000 	.word	0x00000000
 8001e10:	08001b75 	.word	0x08001b75

08001e14 <_printf_common>:
 8001e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e18:	4691      	mov	r9, r2
 8001e1a:	461f      	mov	r7, r3
 8001e1c:	688a      	ldr	r2, [r1, #8]
 8001e1e:	690b      	ldr	r3, [r1, #16]
 8001e20:	4606      	mov	r6, r0
 8001e22:	4293      	cmp	r3, r2
 8001e24:	bfb8      	it	lt
 8001e26:	4613      	movlt	r3, r2
 8001e28:	f8c9 3000 	str.w	r3, [r9]
 8001e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e30:	460c      	mov	r4, r1
 8001e32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e36:	b112      	cbz	r2, 8001e3e <_printf_common+0x2a>
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f8c9 3000 	str.w	r3, [r9]
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	0699      	lsls	r1, r3, #26
 8001e42:	bf42      	ittt	mi
 8001e44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e48:	3302      	addmi	r3, #2
 8001e4a:	f8c9 3000 	strmi.w	r3, [r9]
 8001e4e:	6825      	ldr	r5, [r4, #0]
 8001e50:	f015 0506 	ands.w	r5, r5, #6
 8001e54:	d107      	bne.n	8001e66 <_printf_common+0x52>
 8001e56:	f104 0a19 	add.w	sl, r4, #25
 8001e5a:	68e3      	ldr	r3, [r4, #12]
 8001e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	429d      	cmp	r5, r3
 8001e64:	db2a      	blt.n	8001ebc <_printf_common+0xa8>
 8001e66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	3300      	adds	r3, #0
 8001e6e:	bf18      	it	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	0692      	lsls	r2, r2, #26
 8001e74:	d42f      	bmi.n	8001ed6 <_printf_common+0xc2>
 8001e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e7a:	4639      	mov	r1, r7
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	47c0      	blx	r8
 8001e80:	3001      	adds	r0, #1
 8001e82:	d022      	beq.n	8001eca <_printf_common+0xb6>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	68e5      	ldr	r5, [r4, #12]
 8001e88:	f003 0306 	and.w	r3, r3, #6
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	bf18      	it	ne
 8001e90:	2500      	movne	r5, #0
 8001e92:	f8d9 2000 	ldr.w	r2, [r9]
 8001e96:	f04f 0900 	mov.w	r9, #0
 8001e9a:	bf08      	it	eq
 8001e9c:	1aad      	subeq	r5, r5, r2
 8001e9e:	68a3      	ldr	r3, [r4, #8]
 8001ea0:	6922      	ldr	r2, [r4, #16]
 8001ea2:	bf08      	it	eq
 8001ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	bfc4      	itt	gt
 8001eac:	1a9b      	subgt	r3, r3, r2
 8001eae:	18ed      	addgt	r5, r5, r3
 8001eb0:	341a      	adds	r4, #26
 8001eb2:	454d      	cmp	r5, r9
 8001eb4:	d11b      	bne.n	8001eee <_printf_common+0xda>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4652      	mov	r2, sl
 8001ec0:	4639      	mov	r1, r7
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	47c0      	blx	r8
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	d103      	bne.n	8001ed2 <_printf_common+0xbe>
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed2:	3501      	adds	r5, #1
 8001ed4:	e7c1      	b.n	8001e5a <_printf_common+0x46>
 8001ed6:	2030      	movs	r0, #48	; 0x30
 8001ed8:	18e1      	adds	r1, r4, r3
 8001eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ee4:	4422      	add	r2, r4
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001eec:	e7c3      	b.n	8001e76 <_printf_common+0x62>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4622      	mov	r2, r4
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	47c0      	blx	r8
 8001ef8:	3001      	adds	r0, #1
 8001efa:	d0e6      	beq.n	8001eca <_printf_common+0xb6>
 8001efc:	f109 0901 	add.w	r9, r9, #1
 8001f00:	e7d7      	b.n	8001eb2 <_printf_common+0x9e>
	...

08001f04 <_printf_i>:
 8001f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f08:	4617      	mov	r7, r2
 8001f0a:	7e0a      	ldrb	r2, [r1, #24]
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	2a6e      	cmp	r2, #110	; 0x6e
 8001f10:	4698      	mov	r8, r3
 8001f12:	4606      	mov	r6, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f18:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001f1c:	f000 80bc 	beq.w	8002098 <_printf_i+0x194>
 8001f20:	d81a      	bhi.n	8001f58 <_printf_i+0x54>
 8001f22:	2a63      	cmp	r2, #99	; 0x63
 8001f24:	d02e      	beq.n	8001f84 <_printf_i+0x80>
 8001f26:	d80a      	bhi.n	8001f3e <_printf_i+0x3a>
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	f000 80c8 	beq.w	80020be <_printf_i+0x1ba>
 8001f2e:	2a58      	cmp	r2, #88	; 0x58
 8001f30:	f000 808a 	beq.w	8002048 <_printf_i+0x144>
 8001f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001f3c:	e02a      	b.n	8001f94 <_printf_i+0x90>
 8001f3e:	2a64      	cmp	r2, #100	; 0x64
 8001f40:	d001      	beq.n	8001f46 <_printf_i+0x42>
 8001f42:	2a69      	cmp	r2, #105	; 0x69
 8001f44:	d1f6      	bne.n	8001f34 <_printf_i+0x30>
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f4e:	d023      	beq.n	8001f98 <_printf_i+0x94>
 8001f50:	1d11      	adds	r1, r2, #4
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	e027      	b.n	8001fa8 <_printf_i+0xa4>
 8001f58:	2a73      	cmp	r2, #115	; 0x73
 8001f5a:	f000 80b4 	beq.w	80020c6 <_printf_i+0x1c2>
 8001f5e:	d808      	bhi.n	8001f72 <_printf_i+0x6e>
 8001f60:	2a6f      	cmp	r2, #111	; 0x6f
 8001f62:	d02a      	beq.n	8001fba <_printf_i+0xb6>
 8001f64:	2a70      	cmp	r2, #112	; 0x70
 8001f66:	d1e5      	bne.n	8001f34 <_printf_i+0x30>
 8001f68:	680a      	ldr	r2, [r1, #0]
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	600a      	str	r2, [r1, #0]
 8001f70:	e003      	b.n	8001f7a <_printf_i+0x76>
 8001f72:	2a75      	cmp	r2, #117	; 0x75
 8001f74:	d021      	beq.n	8001fba <_printf_i+0xb6>
 8001f76:	2a78      	cmp	r2, #120	; 0x78
 8001f78:	d1dc      	bne.n	8001f34 <_printf_i+0x30>
 8001f7a:	2278      	movs	r2, #120	; 0x78
 8001f7c:	496f      	ldr	r1, [pc, #444]	; (800213c <_printf_i+0x238>)
 8001f7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001f82:	e064      	b.n	800204e <_printf_i+0x14a>
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001f8a:	1d11      	adds	r1, r2, #4
 8001f8c:	6019      	str	r1, [r3, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0a3      	b.n	80020e0 <_printf_i+0x1dc>
 8001f98:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f9c:	f102 0104 	add.w	r1, r2, #4
 8001fa0:	6019      	str	r1, [r3, #0]
 8001fa2:	d0d7      	beq.n	8001f54 <_printf_i+0x50>
 8001fa4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da03      	bge.n	8001fb4 <_printf_i+0xb0>
 8001fac:	222d      	movs	r2, #45	; 0x2d
 8001fae:	425b      	negs	r3, r3
 8001fb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fb4:	4962      	ldr	r1, [pc, #392]	; (8002140 <_printf_i+0x23c>)
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	e017      	b.n	8001fea <_printf_i+0xe6>
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fc2:	d003      	beq.n	8001fcc <_printf_i+0xc8>
 8001fc4:	1d08      	adds	r0, r1, #4
 8001fc6:	6018      	str	r0, [r3, #0]
 8001fc8:	680b      	ldr	r3, [r1, #0]
 8001fca:	e006      	b.n	8001fda <_printf_i+0xd6>
 8001fcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fd0:	f101 0004 	add.w	r0, r1, #4
 8001fd4:	6018      	str	r0, [r3, #0]
 8001fd6:	d0f7      	beq.n	8001fc8 <_printf_i+0xc4>
 8001fd8:	880b      	ldrh	r3, [r1, #0]
 8001fda:	2a6f      	cmp	r2, #111	; 0x6f
 8001fdc:	bf14      	ite	ne
 8001fde:	220a      	movne	r2, #10
 8001fe0:	2208      	moveq	r2, #8
 8001fe2:	4957      	ldr	r1, [pc, #348]	; (8002140 <_printf_i+0x23c>)
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001fea:	6865      	ldr	r5, [r4, #4]
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	60a5      	str	r5, [r4, #8]
 8001ff0:	f2c0 809c 	blt.w	800212c <_printf_i+0x228>
 8001ff4:	6820      	ldr	r0, [r4, #0]
 8001ff6:	f020 0004 	bic.w	r0, r0, #4
 8001ffa:	6020      	str	r0, [r4, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d13f      	bne.n	8002080 <_printf_i+0x17c>
 8002000:	2d00      	cmp	r5, #0
 8002002:	f040 8095 	bne.w	8002130 <_printf_i+0x22c>
 8002006:	4675      	mov	r5, lr
 8002008:	2a08      	cmp	r2, #8
 800200a:	d10b      	bne.n	8002024 <_printf_i+0x120>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	07da      	lsls	r2, r3, #31
 8002010:	d508      	bpl.n	8002024 <_printf_i+0x120>
 8002012:	6923      	ldr	r3, [r4, #16]
 8002014:	6862      	ldr	r2, [r4, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	bfde      	ittt	le
 800201a:	2330      	movle	r3, #48	; 0x30
 800201c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002024:	ebae 0305 	sub.w	r3, lr, r5
 8002028:	6123      	str	r3, [r4, #16]
 800202a:	f8cd 8000 	str.w	r8, [sp]
 800202e:	463b      	mov	r3, r7
 8002030:	aa03      	add	r2, sp, #12
 8002032:	4621      	mov	r1, r4
 8002034:	4630      	mov	r0, r6
 8002036:	f7ff feed 	bl	8001e14 <_printf_common>
 800203a:	3001      	adds	r0, #1
 800203c:	d155      	bne.n	80020ea <_printf_i+0x1e6>
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	b005      	add	sp, #20
 8002044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002048:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800204c:	493c      	ldr	r1, [pc, #240]	; (8002140 <_printf_i+0x23c>)
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002056:	f100 0504 	add.w	r5, r0, #4
 800205a:	601d      	str	r5, [r3, #0]
 800205c:	d001      	beq.n	8002062 <_printf_i+0x15e>
 800205e:	6803      	ldr	r3, [r0, #0]
 8002060:	e002      	b.n	8002068 <_printf_i+0x164>
 8002062:	0655      	lsls	r5, r2, #25
 8002064:	d5fb      	bpl.n	800205e <_printf_i+0x15a>
 8002066:	8803      	ldrh	r3, [r0, #0]
 8002068:	07d0      	lsls	r0, r2, #31
 800206a:	bf44      	itt	mi
 800206c:	f042 0220 	orrmi.w	r2, r2, #32
 8002070:	6022      	strmi	r2, [r4, #0]
 8002072:	b91b      	cbnz	r3, 800207c <_printf_i+0x178>
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	f022 0220 	bic.w	r2, r2, #32
 800207a:	6022      	str	r2, [r4, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	e7b1      	b.n	8001fe4 <_printf_i+0xe0>
 8002080:	4675      	mov	r5, lr
 8002082:	fbb3 f0f2 	udiv	r0, r3, r2
 8002086:	fb02 3310 	mls	r3, r2, r0, r3
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002090:	4603      	mov	r3, r0
 8002092:	2800      	cmp	r0, #0
 8002094:	d1f5      	bne.n	8002082 <_printf_i+0x17e>
 8002096:	e7b7      	b.n	8002008 <_printf_i+0x104>
 8002098:	6808      	ldr	r0, [r1, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020a0:	6949      	ldr	r1, [r1, #20]
 80020a2:	d004      	beq.n	80020ae <_printf_i+0x1aa>
 80020a4:	1d10      	adds	r0, r2, #4
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	6813      	ldr	r3, [r2, #0]
 80020aa:	6019      	str	r1, [r3, #0]
 80020ac:	e007      	b.n	80020be <_printf_i+0x1ba>
 80020ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020b2:	f102 0004 	add.w	r0, r2, #4
 80020b6:	6018      	str	r0, [r3, #0]
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	d0f6      	beq.n	80020aa <_printf_i+0x1a6>
 80020bc:	8019      	strh	r1, [r3, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	4675      	mov	r5, lr
 80020c2:	6123      	str	r3, [r4, #16]
 80020c4:	e7b1      	b.n	800202a <_printf_i+0x126>
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	1d11      	adds	r1, r2, #4
 80020ca:	6019      	str	r1, [r3, #0]
 80020cc:	6815      	ldr	r5, [r2, #0]
 80020ce:	2100      	movs	r1, #0
 80020d0:	6862      	ldr	r2, [r4, #4]
 80020d2:	4628      	mov	r0, r5
 80020d4:	f000 f846 	bl	8002164 <memchr>
 80020d8:	b108      	cbz	r0, 80020de <_printf_i+0x1da>
 80020da:	1b40      	subs	r0, r0, r5
 80020dc:	6060      	str	r0, [r4, #4]
 80020de:	6863      	ldr	r3, [r4, #4]
 80020e0:	6123      	str	r3, [r4, #16]
 80020e2:	2300      	movs	r3, #0
 80020e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020e8:	e79f      	b.n	800202a <_printf_i+0x126>
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	462a      	mov	r2, r5
 80020ee:	4639      	mov	r1, r7
 80020f0:	4630      	mov	r0, r6
 80020f2:	47c0      	blx	r8
 80020f4:	3001      	adds	r0, #1
 80020f6:	d0a2      	beq.n	800203e <_printf_i+0x13a>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	079b      	lsls	r3, r3, #30
 80020fc:	d507      	bpl.n	800210e <_printf_i+0x20a>
 80020fe:	2500      	movs	r5, #0
 8002100:	f104 0919 	add.w	r9, r4, #25
 8002104:	68e3      	ldr	r3, [r4, #12]
 8002106:	9a03      	ldr	r2, [sp, #12]
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	429d      	cmp	r5, r3
 800210c:	db05      	blt.n	800211a <_printf_i+0x216>
 800210e:	68e0      	ldr	r0, [r4, #12]
 8002110:	9b03      	ldr	r3, [sp, #12]
 8002112:	4298      	cmp	r0, r3
 8002114:	bfb8      	it	lt
 8002116:	4618      	movlt	r0, r3
 8002118:	e793      	b.n	8002042 <_printf_i+0x13e>
 800211a:	2301      	movs	r3, #1
 800211c:	464a      	mov	r2, r9
 800211e:	4639      	mov	r1, r7
 8002120:	4630      	mov	r0, r6
 8002122:	47c0      	blx	r8
 8002124:	3001      	adds	r0, #1
 8002126:	d08a      	beq.n	800203e <_printf_i+0x13a>
 8002128:	3501      	adds	r5, #1
 800212a:	e7eb      	b.n	8002104 <_printf_i+0x200>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1a7      	bne.n	8002080 <_printf_i+0x17c>
 8002130:	780b      	ldrb	r3, [r1, #0]
 8002132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800213a:	e765      	b.n	8002008 <_printf_i+0x104>
 800213c:	08002556 	.word	0x08002556
 8002140:	08002545 	.word	0x08002545

08002144 <_sbrk_r>:
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	2300      	movs	r3, #0
 8002148:	4c05      	ldr	r4, [pc, #20]	; (8002160 <_sbrk_r+0x1c>)
 800214a:	4605      	mov	r5, r0
 800214c:	4608      	mov	r0, r1
 800214e:	6023      	str	r3, [r4, #0]
 8002150:	f7ff fb14 	bl	800177c <_sbrk>
 8002154:	1c43      	adds	r3, r0, #1
 8002156:	d102      	bne.n	800215e <_sbrk_r+0x1a>
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	b103      	cbz	r3, 800215e <_sbrk_r+0x1a>
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	bd38      	pop	{r3, r4, r5, pc}
 8002160:	20000154 	.word	0x20000154

08002164 <memchr>:
 8002164:	b510      	push	{r4, lr}
 8002166:	b2c9      	uxtb	r1, r1
 8002168:	4402      	add	r2, r0
 800216a:	4290      	cmp	r0, r2
 800216c:	4603      	mov	r3, r0
 800216e:	d101      	bne.n	8002174 <memchr+0x10>
 8002170:	2000      	movs	r0, #0
 8002172:	bd10      	pop	{r4, pc}
 8002174:	781c      	ldrb	r4, [r3, #0]
 8002176:	3001      	adds	r0, #1
 8002178:	428c      	cmp	r4, r1
 800217a:	d1f6      	bne.n	800216a <memchr+0x6>
 800217c:	4618      	mov	r0, r3
 800217e:	bd10      	pop	{r4, pc}

08002180 <memcpy>:
 8002180:	b510      	push	{r4, lr}
 8002182:	1e43      	subs	r3, r0, #1
 8002184:	440a      	add	r2, r1
 8002186:	4291      	cmp	r1, r2
 8002188:	d100      	bne.n	800218c <memcpy+0xc>
 800218a:	bd10      	pop	{r4, pc}
 800218c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002194:	e7f7      	b.n	8002186 <memcpy+0x6>

08002196 <memmove>:
 8002196:	4288      	cmp	r0, r1
 8002198:	b510      	push	{r4, lr}
 800219a:	eb01 0302 	add.w	r3, r1, r2
 800219e:	d803      	bhi.n	80021a8 <memmove+0x12>
 80021a0:	1e42      	subs	r2, r0, #1
 80021a2:	4299      	cmp	r1, r3
 80021a4:	d10c      	bne.n	80021c0 <memmove+0x2a>
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d2f9      	bcs.n	80021a0 <memmove+0xa>
 80021ac:	1881      	adds	r1, r0, r2
 80021ae:	1ad2      	subs	r2, r2, r3
 80021b0:	42d3      	cmn	r3, r2
 80021b2:	d100      	bne.n	80021b6 <memmove+0x20>
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021be:	e7f7      	b.n	80021b0 <memmove+0x1a>
 80021c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021c8:	e7eb      	b.n	80021a2 <memmove+0xc>

080021ca <__malloc_lock>:
 80021ca:	4770      	bx	lr

080021cc <__malloc_unlock>:
 80021cc:	4770      	bx	lr

080021ce <_realloc_r>:
 80021ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d0:	4607      	mov	r7, r0
 80021d2:	4614      	mov	r4, r2
 80021d4:	460e      	mov	r6, r1
 80021d6:	b921      	cbnz	r1, 80021e2 <_realloc_r+0x14>
 80021d8:	4611      	mov	r1, r2
 80021da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80021de:	f7ff bc6b 	b.w	8001ab8 <_malloc_r>
 80021e2:	b922      	cbnz	r2, 80021ee <_realloc_r+0x20>
 80021e4:	f7ff fc1c 	bl	8001a20 <_free_r>
 80021e8:	4625      	mov	r5, r4
 80021ea:	4628      	mov	r0, r5
 80021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ee:	f000 f814 	bl	800221a <_malloc_usable_size_r>
 80021f2:	4284      	cmp	r4, r0
 80021f4:	d90f      	bls.n	8002216 <_realloc_r+0x48>
 80021f6:	4621      	mov	r1, r4
 80021f8:	4638      	mov	r0, r7
 80021fa:	f7ff fc5d 	bl	8001ab8 <_malloc_r>
 80021fe:	4605      	mov	r5, r0
 8002200:	2800      	cmp	r0, #0
 8002202:	d0f2      	beq.n	80021ea <_realloc_r+0x1c>
 8002204:	4631      	mov	r1, r6
 8002206:	4622      	mov	r2, r4
 8002208:	f7ff ffba 	bl	8002180 <memcpy>
 800220c:	4631      	mov	r1, r6
 800220e:	4638      	mov	r0, r7
 8002210:	f7ff fc06 	bl	8001a20 <_free_r>
 8002214:	e7e9      	b.n	80021ea <_realloc_r+0x1c>
 8002216:	4635      	mov	r5, r6
 8002218:	e7e7      	b.n	80021ea <_realloc_r+0x1c>

0800221a <_malloc_usable_size_r>:
 800221a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800221e:	2800      	cmp	r0, #0
 8002220:	f1a0 0004 	sub.w	r0, r0, #4
 8002224:	bfbc      	itt	lt
 8002226:	580b      	ldrlt	r3, [r1, r0]
 8002228:	18c0      	addlt	r0, r0, r3
 800222a:	4770      	bx	lr

0800222c <_init>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	bf00      	nop
 8002230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002232:	bc08      	pop	{r3}
 8002234:	469e      	mov	lr, r3
 8002236:	4770      	bx	lr

08002238 <_fini>:
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223a:	bf00      	nop
 800223c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223e:	bc08      	pop	{r3}
 8002240:	469e      	mov	lr, r3
 8002242:	4770      	bx	lr

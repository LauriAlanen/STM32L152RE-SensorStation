
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08001c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  2000006c  08001cb0  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000158  08001cb0  00020158  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000621a  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010b7  00000000  00000000  000262af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002f0  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00027658  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001a7a  00000000  00000000  000278b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001397  00000000  00000000  00029332  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002a6c9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c98  00000000  00000000  0002a748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	080018f0 	.word	0x080018f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	080018f0 	.word	0x080018f0

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 fcee 	bl	8000b6c <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <CRC16>:
uint8_t MODBUS_Slaves[SLAVE_COUNT] = {LMT84LP_MODBUS_ADDRESS, NSL19M51_MODBUS_ADDRESS, DHT22_MODBUS_ADDRESS};

//parameter wLenght = how my bytes in your frame?
//*nData = your first element in frame array
uint16_t CRC16(uint8_t *nData, uint16_t wLength)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	460b      	mov	r3, r1
 80001ce:	807b      	strh	r3, [r7, #2]
		0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
		0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
	};

	uint8_t nTemp;
	uint16_t wCRCWord = 0xFFFF;
 80001d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001d4:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80001d6:	e011      	b.n	80001fc <CRC16+0x38>
	{
	  nTemp = *nData++ ^ wCRCWord;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	1c5a      	adds	r2, r3, #1
 80001dc:	607a      	str	r2, [r7, #4]
 80001de:	781a      	ldrb	r2, [r3, #0]
 80001e0:	89fb      	ldrh	r3, [r7, #14]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	4053      	eors	r3, r2
 80001e6:	737b      	strb	r3, [r7, #13]
	  wCRCWord >>= 8;
 80001e8:	89fb      	ldrh	r3, [r7, #14]
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	81fb      	strh	r3, [r7, #14]
	  wCRCWord ^= wCRCTable[nTemp];
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <CRC16+0x50>)
 80001f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001f6:	89fb      	ldrh	r3, [r7, #14]
 80001f8:	4053      	eors	r3, r2
 80001fa:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 80001fc:	887b      	ldrh	r3, [r7, #2]
 80001fe:	1e5a      	subs	r2, r3, #1
 8000200:	807a      	strh	r2, [r7, #2]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1e8      	bne.n	80001d8 <CRC16+0x14>
	}

	return wCRCWord;
 8000206:	89fb      	ldrh	r3, [r7, #14]
}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	080019ec 	.word	0x080019ec

08000218 <MODBUS_VerifyCRC>:

MODBUS_Status MODBUS_VerifyCRC(uint8_t *MODBUS_Frame)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint16_t MODBUS_FrameCRC = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	81fb      	strh	r3, [r7, #14]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 2); // Exclude the CRC itself
 8000224:	2106      	movs	r1, #6
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f7ff ffcc 	bl	80001c4 <CRC16>
 800022c:	4603      	mov	r3, r0
 800022e:	81fb      	strh	r3, [r7, #14]

	uint8_t CRC_lsb = (MODBUS_FrameCRC >> 8) == MODBUS_Frame[MODBUS_FRAME_SIZE - 1];
 8000230:	89fb      	ldrh	r3, [r7, #14]
 8000232:	0a1b      	lsrs	r3, r3, #8
 8000234:	b29a      	uxth	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3307      	adds	r3, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b29b      	uxth	r3, r3
 800023e:	429a      	cmp	r2, r3
 8000240:	bf0c      	ite	eq
 8000242:	2301      	moveq	r3, #1
 8000244:	2300      	movne	r3, #0
 8000246:	b2db      	uxtb	r3, r3
 8000248:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_msb = (MODBUS_FrameCRC & 0x00FF) == MODBUS_Frame[MODBUS_FRAME_SIZE - 2];
 800024a:	89fb      	ldrh	r3, [r7, #14]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	3206      	adds	r2, #6
 8000252:	7812      	ldrb	r2, [r2, #0]
 8000254:	4293      	cmp	r3, r2
 8000256:	bf0c      	ite	eq
 8000258:	2301      	moveq	r3, #1
 800025a:	2300      	movne	r3, #0
 800025c:	b2db      	uxtb	r3, r3
 800025e:	733b      	strb	r3, [r7, #12]
	if (CRC_lsb && CRC_msb)
 8000260:	7b7b      	ldrb	r3, [r7, #13]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d004      	beq.n	8000270 <MODBUS_VerifyCRC+0x58>
 8000266:	7b3b      	ldrb	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MODBUS_VerifyCRC+0x58>
	{
		return MODBUS_CRC_VALID;
 800026c:	2302      	movs	r3, #2
 800026e:	e000      	b.n	8000272 <MODBUS_VerifyCRC+0x5a>
	}

	return MODBUS_CRC_INVALID;
 8000270:	2303      	movs	r3, #3
}
 8000272:	4618      	mov	r0, r3
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MODBUS_CheckAddress>:

MODBUS_Status MODBUS_CheckAddress(uint8_t address)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < SLAVE_COUNT; ++i)
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	e011      	b.n	80002b0 <MODBUS_CheckAddress+0x34>
    {
        if (MODBUS_Slaves[i] == address)
 800028c:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <MODBUS_CheckAddress+0x54>)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	429a      	cmp	r2, r3
 8000298:	d107      	bne.n	80002aa <MODBUS_CheckAddress+0x2e>
        {
            GPIOA->ODR |= GPIO_ODR_ODR_5;
 800029a:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <MODBUS_CheckAddress+0x58>)
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <MODBUS_CheckAddress+0x58>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6153      	str	r3, [r2, #20]
            return MODBUS_ADDR_VALID;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e00c      	b.n	80002c4 <MODBUS_CheckAddress+0x48>
    for (int i = 0; i < SLAVE_COUNT; ++i)
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3301      	adds	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	ddea      	ble.n	800028c <MODBUS_CheckAddress+0x10>
        }
    }

    GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <MODBUS_CheckAddress+0x58>)
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MODBUS_CheckAddress+0x58>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	f023 0320 	bic.w	r3, r3, #32
 80002c0:	6153      	str	r3, [r2, #20]
    return MODBUS_ADDR_INVALID;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000000 	.word	0x20000000
 80002d4:	40020000 	.word	0x40020000

080002d8 <MODBUS_BuildFrame>:

void MODBUS_BuildFrame(uint8_t *MODBUS_Frame)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	static uint8_t frame_index = 0;
	uint8_t byte;

    while (MODBUS_RingBufferRead(&byte) == MODBUS_RINGBUFFER_NOT_EMPTY)
 80002e0:	e014      	b.n	800030c <MODBUS_BuildFrame+0x34>
    {
    	MODBUS_Frame[frame_index++] = byte;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MODBUS_BuildFrame+0x4c>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	b2d1      	uxtb	r1, r2
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <MODBUS_BuildFrame+0x4c>)
 80002ec:	7011      	strb	r1, [r2, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	7bfa      	ldrb	r2, [r7, #15]
 80002f6:	701a      	strb	r2, [r3, #0]
    	if (frame_index >= MODBUS_FRAME_SIZE)
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MODBUS_BuildFrame+0x4c>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b07      	cmp	r3, #7
 80002fe:	d905      	bls.n	800030c <MODBUS_BuildFrame+0x34>
    	{
    		frame_ready = 1;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MODBUS_BuildFrame+0x50>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
    		frame_index = 0;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MODBUS_BuildFrame+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
    while (MODBUS_RingBufferRead(&byte) == MODBUS_RINGBUFFER_NOT_EMPTY)
 800030c:	f107 030f 	add.w	r3, r7, #15
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f8b3 	bl	800047c <MODBUS_RingBufferRead>
 8000316:	4603      	mov	r3, r0
 8000318:	2b09      	cmp	r3, #9
 800031a:	d0e2      	beq.n	80002e2 <MODBUS_BuildFrame+0xa>
		}
    }
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000008e 	.word	0x2000008e
 8000328:	20000088 	.word	0x20000088

0800032c <MODBUS_ReadSensor>:

MODBUS_Status MODBUS_ReadSensor(uint8_t *MODBUS_Frame, uint8_t *MODBUS_ResponseFrame)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	MODBUS_Reading reading;

	switch (MODBUS_Frame[0])
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d01e      	beq.n	800037c <MODBUS_ReadSensor+0x50>
 800033e:	2b06      	cmp	r3, #6
 8000340:	d002      	beq.n	8000348 <MODBUS_ReadSensor+0x1c>
 8000342:	2b01      	cmp	r3, #1
 8000344:	d01c      	beq.n	8000380 <MODBUS_ReadSensor+0x54>
			}

			break;

		default:
			break;
 8000346:	e01c      	b.n	8000382 <MODBUS_ReadSensor+0x56>
			DHT22_ModbusHandler(&reading); // Example request frame for temperature 0x06 0x04 0x00 0x01 0x00 0x01 0x61 0xBD humidity 0x06 0x04 0x00 0x02 0x00 0x01 0x91 0xBD
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fc02 	bl	8000b56 <DHT22_ModbusHandler>
			if (MODBUS_Frame[3] == 0x01)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3303      	adds	r3, #3
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d107      	bne.n	800036c <MODBUS_ReadSensor+0x40>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.humidity);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	897a      	ldrh	r2, [r7, #10]
 8000362:	4619      	mov	r1, r3
 8000364:	6838      	ldr	r0, [r7, #0]
 8000366:	f000 f8bb 	bl	80004e0 <MODBUS_Build_ResponseFrame>
			break;
 800036a:	e00a      	b.n	8000382 <MODBUS_ReadSensor+0x56>
				MODBUS_Build_ResponseFrame(MODBUS_ResponseFrame, MODBUS_Frame[0], reading.temperature);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	893a      	ldrh	r2, [r7, #8]
 8000372:	4619      	mov	r1, r3
 8000374:	6838      	ldr	r0, [r7, #0]
 8000376:	f000 f8b3 	bl	80004e0 <MODBUS_Build_ResponseFrame>
			break;
 800037a:	e002      	b.n	8000382 <MODBUS_ReadSensor+0x56>
			break;
 800037c:	bf00      	nop
 800037e:	e000      	b.n	8000382 <MODBUS_ReadSensor+0x56>
			break;
 8000380:	bf00      	nop
	}

	return MODBUS_SENSOR_READ_OK;
 8000382:	2304      	movs	r3, #4
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <MODBUS_ProcessFrame>:

void MODBUS_ProcessFrame(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	static uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
    MODBUS_BuildFrame(MODBUS_Frame);
 8000392:	4812      	ldr	r0, [pc, #72]	; (80003dc <MODBUS_ProcessFrame+0x50>)
 8000394:	f7ff ffa0 	bl	80002d8 <MODBUS_BuildFrame>

    if (!frame_ready)
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MODBUS_ProcessFrame+0x54>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d019      	beq.n	80003d4 <MODBUS_ProcessFrame+0x48>
    {
        return;
    }

    GPIOA->ODR |= GPIO_ODR_ODR_5;
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <MODBUS_ProcessFrame+0x58>)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MODBUS_ProcessFrame+0x58>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
    MODBUS_Status status = MODBUS_CheckAddress(MODBUS_Frame[0]);
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MODBUS_ProcessFrame+0x50>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff63 	bl	800027c <MODBUS_CheckAddress>
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]

    if (status == MODBUS_ADDR_VALID)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d103      	bne.n	80003c8 <MODBUS_ProcessFrame+0x3c>
    {
        MODBUS_ProcessValidFrame(MODBUS_Frame);
 80003c0:	4806      	ldr	r0, [pc, #24]	; (80003dc <MODBUS_ProcessFrame+0x50>)
 80003c2:	f000 f82b 	bl	800041c <MODBUS_ProcessValidFrame>
 80003c6:	e001      	b.n	80003cc <MODBUS_ProcessFrame+0x40>
    }

    else
    {
        MODBUS_ProcessInvalidFrame();
 80003c8:	f000 f852 	bl	8000470 <MODBUS_ProcessInvalidFrame>
    }

    frame_ready = 0;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <MODBUS_ProcessFrame+0x54>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	e000      	b.n	80003d6 <MODBUS_ProcessFrame+0x4a>
        return;
 80003d4:	bf00      	nop
}
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000090 	.word	0x20000090
 80003e0:	20000088 	.word	0x20000088
 80003e4:	40020000 	.word	0x40020000

080003e8 <MODBUS_TransmitResponse>:

MODBUS_Status MODBUS_TransmitResponse(uint8_t* MODBUS_ResponseFrame)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	e009      	b.n	800040a <MODBUS_TransmitResponse+0x22>
	{
		USART2_write(MODBUS_ResponseFrame[i]);
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	4413      	add	r3, r2
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f966 	bl	80006d0 <USART2_write>
	for (int i = 0; i < MODBUS_FRAME_SIZE - 1; ++i) // Response frame is always 7 bytes in this case
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	3301      	adds	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b06      	cmp	r3, #6
 800040e:	ddf2      	ble.n	80003f6 <MODBUS_TransmitResponse+0xe>
	}
}
 8000410:	bf00      	nop
 8000412:	4618      	mov	r0, r3
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MODBUS_ProcessValidFrame>:

void MODBUS_ProcessValidFrame(uint8_t *MODBUS_Frame)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b09f      	sub	sp, #124	; 0x7c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	if (MODBUS_VerifyCRC(MODBUS_Frame) == MODBUS_CRC_INVALID)
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff fef7 	bl	8000218 <MODBUS_VerifyCRC>
 800042a:	4603      	mov	r3, r0
 800042c:	2b03      	cmp	r3, #3
 800042e:	d10e      	bne.n	800044e <MODBUS_ProcessValidFrame+0x32>
	{
#ifdef DEBUG
	    char debugBuffer[100];
		snprintf(debugBuffer, 20, "%s", "Checksum error!");
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4a0d      	ldr	r2, [pc, #52]	; (800046c <MODBUS_ProcessValidFrame+0x50>)
 8000436:	461c      	mov	r4, r3
 8000438:	4613      	mov	r3, r2
 800043a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		USART2_write_buffer(debugBuffer);
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f959 	bl	80006fc <USART2_write_buffer>
#endif
		return;
 800044a:	bf00      	nop
 800044c:	e00a      	b.n	8000464 <MODBUS_ProcessValidFrame+0x48>
	}

	uint8_t MODBUS_ResponseFrame[MODBUS_FRAME_SIZE];
    MODBUS_ReadSensor(MODBUS_Frame, MODBUS_ResponseFrame);
 800044e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000452:	4619      	mov	r1, r3
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff69 	bl	800032c <MODBUS_ReadSensor>
    MODBUS_TransmitResponse(MODBUS_ResponseFrame);
 800045a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ffc2 	bl	80003e8 <MODBUS_TransmitResponse>
    {
        snprintf(debugBuffer, sizeof(debugBuffer), "%.2x ", MODBUS_Frame[i]);
        USART2_write_buffer(debugBuffer);
    }
#endif
}
 8000464:	377c      	adds	r7, #124	; 0x7c
 8000466:	46bd      	mov	sp, r7
 8000468:	bd90      	pop	{r4, r7, pc}
 800046a:	bf00      	nop
 800046c:	08001908 	.word	0x08001908

08000470 <MODBUS_ProcessInvalidFrame>:

void MODBUS_ProcessInvalidFrame(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
#if DEBUG == 1
    char debugBuffer[100];
    snprintf(debugBuffer, sizeof(debugBuffer), "Invalid address!");
    USART2_write_buffer(debugBuffer);
#endif
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <MODBUS_RingBufferRead>:

MODBUS_Status MODBUS_RingBufferRead(uint8_t *data)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    if (rx_tail == rx_head)
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MODBUS_RingBufferRead+0x58>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MODBUS_RingBufferRead+0x5c>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	429a      	cmp	r2, r3
 8000492:	d101      	bne.n	8000498 <MODBUS_RingBufferRead+0x1c>
    {
        return MODBUS_RINGBUFFER_EMPTY;
 8000494:	2308      	movs	r3, #8
 8000496:	e017      	b.n	80004c8 <MODBUS_RingBufferRead+0x4c>
    }

    *data = rx_buffer[rx_tail];
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MODBUS_RingBufferRead+0x58>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MODBUS_RingBufferRead+0x60>)
 80004a2:	5c9b      	ldrb	r3, [r3, r2]
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	701a      	strb	r2, [r3, #0]
    rx_tail = (rx_tail + 1) % RX_BUFFER_SIZE;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MODBUS_RingBufferRead+0x58>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	3301      	adds	r3, #1
 80004b2:	425a      	negs	r2, r3
 80004b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80004bc:	bf58      	it	pl
 80004be:	4253      	negpl	r3, r2
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <MODBUS_RingBufferRead+0x58>)
 80004c4:	801a      	strh	r2, [r3, #0]
    return MODBUS_RINGBUFFER_NOT_EMPTY;
 80004c6:	2309      	movs	r3, #9
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	2000008a 	.word	0x2000008a
 80004dc:	200000d4 	.word	0x200000d4

080004e0 <MODBUS_Build_ResponseFrame>:

MODBUS_Status MODBUS_Build_ResponseFrame(uint8_t* MODBUS_Frame, uint8_t slave_addr, uint16_t reading)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
 80004ec:	4613      	mov	r3, r2
 80004ee:	803b      	strh	r3, [r7, #0]
	uint16_t MODBUS_FrameCRC = 0x0000;
 80004f0:	2300      	movs	r3, #0
 80004f2:	81fb      	strh	r3, [r7, #14]

	MODBUS_Frame[0] = slave_addr;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	78fa      	ldrb	r2, [r7, #3]
 80004f8:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[1] = MODBUS_READ_INPUT_REG;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3301      	adds	r3, #1
 80004fe:	2204      	movs	r2, #4
 8000500:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[2] = 0x02; // Send 2 bytes
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3302      	adds	r3, #2
 8000506:	2202      	movs	r2, #2
 8000508:	701a      	strb	r2, [r3, #0]

	MODBUS_Frame[3] = reading >> 8;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3303      	adds	r3, #3
 800050e:	883a      	ldrh	r2, [r7, #0]
 8000510:	0a12      	lsrs	r2, r2, #8
 8000512:	b292      	uxth	r2, r2
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[4] = reading & 0x00FF;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	883a      	ldrh	r2, [r7, #0]
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	701a      	strb	r2, [r3, #0]

	MODBUS_FrameCRC = CRC16(MODBUS_Frame, MODBUS_FRAME_SIZE - 3);
 8000522:	2105      	movs	r1, #5
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe4d 	bl	80001c4 <CRC16>
 800052a:	4603      	mov	r3, r0
 800052c:	81fb      	strh	r3, [r7, #14]
	MODBUS_Frame[5] = MODBUS_FrameCRC >> 8;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3305      	adds	r3, #5
 8000532:	89fa      	ldrh	r2, [r7, #14]
 8000534:	0a12      	lsrs	r2, r2, #8
 8000536:	b292      	uxth	r2, r2
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	701a      	strb	r2, [r3, #0]
	MODBUS_Frame[6] = MODBUS_FrameCRC & 0x00FF;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3306      	adds	r3, #6
 8000540:	89fa      	ldrh	r2, [r7, #14]
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	701a      	strb	r2, [r3, #0]

	return MODBUS_FRAME_OK;
 8000546:	2306      	movs	r3, #6
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE)
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MODBUS_IRQHandler+0x64>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0320 	and.w	r3, r3, #32
 800055e:	2b00      	cmp	r3, #0
 8000560:	d022      	beq.n	80005a8 <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART2->DR;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MODBUS_IRQHandler+0x64>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MODBUS_IRQHandler+0x68>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b29b      	uxth	r3, r3
 800056e:	3301      	adds	r3, #1
 8000570:	425a      	negs	r2, r3
 8000572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800057a:	bf58      	it	pl
 800057c:	4253      	negpl	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MODBUS_IRQHandler+0x6c>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	b29b      	uxth	r3, r3
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d00a      	beq.n	80005a2 <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MODBUS_IRQHandler+0x68>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b29b      	uxth	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <MODBUS_IRQHandler+0x70>)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MODBUS_IRQHandler+0x68>)
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 80005a0:	e002      	b.n	80005a8 <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MODBUS_IRQHandler+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40004400 	.word	0x40004400
 80005b8:	2000008a 	.word	0x2000008a
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	20000089 	.word	0x20000089

080005c8 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <TIM2_Init+0x3c>)
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <TIM2_Init+0x3c>)
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 80005d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005dc:	221f      	movs	r2, #31
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 80005e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 80005ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6013      	str	r3, [r2, #0]
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <NVIC_EnableIRQ+0x2c>)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	095b      	lsrs	r3, r3, #5
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	f002 021f 	and.w	r2, r2, #31
 8000620:	2001      	movs	r0, #1
 8000622:	fa00 f202 	lsl.w	r2, r0, r2
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <USART2_init+0x8c>)
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <USART2_init+0x8c>)
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000648:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <USART2_init+0x8c>)
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <USART2_init+0x8c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <USART2_init+0x90>)
 8000656:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800065a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 800065c:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <USART2_init+0x90>)
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <USART2_init+0x90>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000666:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <USART2_init+0x90>)
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <USART2_init+0x90>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f043 0320 	orr.w	r3, r3, #32
 8000672:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <USART2_init+0x90>)
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <USART2_init+0x90>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <USART2_init+0x94>)
 8000682:	f640 5205 	movw	r2, #3333	; 0xd05
 8000686:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <USART2_init+0x94>)
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <USART2_init+0x94>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <USART2_init+0x94>)
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <USART2_init+0x94>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <USART2_init+0x94>)
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <USART2_init+0x94>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006aa:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <USART2_init+0x94>)
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <USART2_init+0x94>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	f043 0320 	orr.w	r3, r3, #32
 80006b6:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 80006b8:	2026      	movs	r0, #38	; 0x26
 80006ba:	f7ff ffa5 	bl	8000608 <NVIC_EnableIRQ>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40004400 	.word	0x40004400

080006d0 <USART2_write>:
		data=USART2->DR;			//p739
		return data;
}

void USART2_write(char data)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 80006da:	bf00      	nop
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <USART2_write+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f9      	beq.n	80006dc <USART2_write+0xc>
	USART2->DR = (data);		//p739
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <USART2_write+0x28>)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	6053      	str	r3, [r2, #4]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40004400 	.word	0x40004400

080006fc <USART2_write_buffer>:

void USART2_write_buffer(char* buffer)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 8000704:	e007      	b.n	8000716 <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffe0 	bl	80006d0 <USART2_write>
		buffer++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f3      	bne.n	8000706 <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 800071e:	200d      	movs	r0, #13
 8000720:	f7ff ffd6 	bl	80006d0 <USART2_write>
	USART2_write('\n');
 8000724:	200a      	movs	r0, #10
 8000726:	f7ff ffd3 	bl	80006d0 <USART2_write>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 8000736:	f7ff ff0b 	bl	8000550 <MODBUS_IRQHandler>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <NVIC_EnableIRQ>:
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <NVIC_EnableIRQ+0x2c>)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	f002 021f 	and.w	r2, r2, #31
 8000758:	2001      	movs	r0, #1
 800075a:	fa00 f202 	lsl.w	r2, r0, r2
 800075e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <DHT22_SWITCH_MODE_OUTPUT>:

static volatile uint8_t pulses[BIT_COUNT];
static volatile uint8_t dht_status = 0;

void DHT22_SWITCH_MODE_OUTPUT()
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <DHT22_SWITCH_MODE_OUTPUT+0x24>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40020000 	.word	0x40020000

08000798 <DHT22_SWITCH_MODE_INPUT>:

void DHT22_SWITCH_MODE_INPUT()
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <DHT22_SWITCH_MODE_INPUT+0x18>)
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <DHT22_SWITCH_MODE_INPUT+0x18>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	40020000 	.word	0x40020000

080007b4 <DHT22_init>:

void DHT22_init()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <DHT22_init+0x50>)
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <DHT22_init+0x50>)
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6213      	str	r3, [r2, #32]
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI7_PA;
 80007c4:	4a10      	ldr	r2, [pc, #64]	; (8000808 <DHT22_init+0x54>)
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <DHT22_init+0x54>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PA;
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <DHT22_init+0x54>)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <DHT22_init+0x54>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= EXTI_IMR_MR7;
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <DHT22_init+0x58>)
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <DHT22_init+0x58>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_FT7;
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <DHT22_init+0x58>)
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <DHT22_init+0x58>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ea:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR |= EXTI_RTSR_RT7;
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <DHT22_init+0x58>)
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <DHT22_init+0x58>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f6:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f8:	2017      	movs	r0, #23
 80007fa:	f7ff ffa1 	bl	8000740 <NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40010000 	.word	0x40010000
 800080c:	40010400 	.word	0x40010400

08000810 <DHT22_read>:

uint8_t DHT22_read(MODBUS_Reading *reading)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0a2      	sub	sp, #136	; 0x88
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
    uint8_t byte_list[5] = {0};
 8000818:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	711a      	strb	r2, [r3, #4]
    uint8_t buffer[100];

    DHT22_start();
 8000822:	f000 f8e5 	bl	80009f0 <DHT22_start>

    if (DHT22_wait_response())
 8000826:	f000 f907 	bl	8000a38 <DHT22_wait_response>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d004      	beq.n	800083a <DHT22_read+0x2a>
    {
        USART2_write_buffer("DHT22 Not ready to send data!");
 8000830:	4866      	ldr	r0, [pc, #408]	; (80009cc <DHT22_read+0x1bc>)
 8000832:	f7ff ff63 	bl	80006fc <USART2_write_buffer>
        return DHT_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e0c3      	b.n	80009c2 <DHT22_read+0x1b2>
    }

    SysTick->LOAD = TIMEOUT_20_MS - 1; // Set maximum allowable wait time
 800083a:	4b65      	ldr	r3, [pc, #404]	; (80009d0 <DHT22_read+0x1c0>)
 800083c:	4a65      	ldr	r2, [pc, #404]	; (80009d4 <DHT22_read+0x1c4>)
 800083e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000840:	4b63      	ldr	r3, [pc, #396]	; (80009d0 <DHT22_read+0x1c0>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000846:	4b62      	ldr	r3, [pc, #392]	; (80009d0 <DHT22_read+0x1c0>)
 8000848:	2205      	movs	r2, #5
 800084a:	601a      	str	r2, [r3, #0]

    // Wait for data
    while(dht_status == DHT_MEASURING)
 800084c:	e00a      	b.n	8000864 <DHT22_read+0x54>
    {
        if ((SysTick->CTRL) & 0x10000)
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <DHT22_read+0x1c0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <DHT22_read+0x54>
        {
    		USART2_write_buffer("DHT22 measurement error :/");
 800085a:	485f      	ldr	r0, [pc, #380]	; (80009d8 <DHT22_read+0x1c8>)
 800085c:	f7ff ff4e 	bl	80006fc <USART2_write_buffer>
            return DHT_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e0ae      	b.n	80009c2 <DHT22_read+0x1b2>
    while(dht_status == DHT_MEASURING)
 8000864:	4b5d      	ldr	r3, [pc, #372]	; (80009dc <DHT22_read+0x1cc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b03      	cmp	r3, #3
 800086c:	d0ef      	beq.n	800084e <DHT22_read+0x3e>
        }
    }

	SysTick->CTRL = 0;
 800086e:	4b58      	ldr	r3, [pc, #352]	; (80009d0 <DHT22_read+0x1c0>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]

    if (dht_status == DHT_READY)
 8000874:	4b59      	ldr	r3, [pc, #356]	; (80009dc <DHT22_read+0x1cc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 80a0 	bne.w	80009c0 <DHT22_read+0x1b0>
    {
	    EXTI->IMR &= ~EXTI_IMR_MR7;
 8000880:	4a57      	ldr	r2, [pc, #348]	; (80009e0 <DHT22_read+0x1d0>)
 8000882:	4b57      	ldr	r3, [pc, #348]	; (80009e0 <DHT22_read+0x1d0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800088a:	6013      	str	r3, [r2, #0]
    	dht_status = DHT_NOT_READY;
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <DHT22_read+0x1cc>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]

    	DHT22_decode_pulses(pulses, byte_list);
 8000892:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000896:	4619      	mov	r1, r3
 8000898:	4852      	ldr	r0, [pc, #328]	; (80009e4 <DHT22_read+0x1d4>)
 800089a:	f000 f91d 	bl	8000ad8 <DHT22_decode_pulses>

		uint8_t humidity_int = byte_list[0];
 800089e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80008a2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		uint8_t humidity_dec = byte_list[1];
 80008a6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80008aa:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		uint8_t temperature_int = byte_list[2];
 80008ae:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80008b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint8_t temperature_dec = byte_list[3];
 80008b6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80008ba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		uint8_t checksum = byte_list[4];
 80008be:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80008c2:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

		uint16_t humidity = (humidity_int << 8) | humidity_dec;
 80008c6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		uint16_t temperature = (temperature_int << 8) | temperature_dec;
 80008dc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	    if (temperature_int & 0x80) temperature = -temperature;
 80008f2:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da04      	bge.n	8000904 <DHT22_read+0xf4>
 80008fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008fe:	425b      	negs	r3, r3
 8000900:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		uint8_t expected_checksum = humidity_int + humidity_dec + temperature_int + temperature_dec;
 8000904:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8000908:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800090c:	4413      	add	r3, r2
 800090e:	b2da      	uxtb	r2, r3
 8000910:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000914:	4413      	add	r3, r2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800091c:	4413      	add	r3, r2
 800091e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		if (expected_checksum != checksum)
 8000922:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000926:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800092a:	429a      	cmp	r2, r3
 800092c:	d010      	beq.n	8000950 <DHT22_read+0x140>
		{
			snprintf(buffer, 100, "Invalid checksum expected %.2X got %.2X", expected_checksum, checksum);
 800092e:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000932:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000936:	f107 000c 	add.w	r0, r7, #12
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <DHT22_read+0x1d8>)
 8000940:	2164      	movs	r1, #100	; 0x64
 8000942:	f000 fb9b 	bl	800107c <sniprintf>
			USART2_write_buffer(buffer);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fed6 	bl	80006fc <USART2_write_buffer>
		}

		//reading->humidity_int = humidity / 10;
		//reading->humidity_dec = humidity % 10;
		reading->humidity = (humidity / 10) << 8 | humidity % 10;
 8000950:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000954:	4a25      	ldr	r2, [pc, #148]	; (80009ec <DHT22_read+0x1dc>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	b29b      	uxth	r3, r3
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b218      	sxth	r0, r3
 8000962:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <DHT22_read+0x1dc>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b29b      	uxth	r3, r3
 800097a:	b21b      	sxth	r3, r3
 800097c:	4303      	orrs	r3, r0
 800097e:	b21b      	sxth	r3, r3
 8000980:	b29a      	uxth	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	805a      	strh	r2, [r3, #2]

		//reading->temperature_int = temperature / 10;
		//reading->temperature_dec = temperature % 10;
		reading->temperature = (temperature / 10) << 8 | temperature % 10;
 8000986:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <DHT22_read+0x1dc>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	08db      	lsrs	r3, r3, #3
 8000992:	b29b      	uxth	r3, r3
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b218      	sxth	r0, r3
 8000998:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <DHT22_read+0x1dc>)
 800099e:	fba3 1302 	umull	r1, r3, r3, r2
 80009a2:	08d9      	lsrs	r1, r3, #3
 80009a4:	460b      	mov	r3, r1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4303      	orrs	r3, r0
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	801a      	strh	r2, [r3, #0]

		return DHT_READY;
 80009bc:	2300      	movs	r3, #0
 80009be:	e000      	b.n	80009c2 <DHT22_read+0x1b2>
    }

    return DHT_ERROR;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3780      	adds	r7, #128	; 0x80
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08001918 	.word	0x08001918
 80009d0:	e000e010 	.word	0xe000e010
 80009d4:	0009c3ff 	.word	0x0009c3ff
 80009d8:	08001938 	.word	0x08001938
 80009dc:	200000c1 	.word	0x200000c1
 80009e0:	40010400 	.word	0x40010400
 80009e4:	20000098 	.word	0x20000098
 80009e8:	08001954 	.word	0x08001954
 80009ec:	cccccccd 	.word	0xcccccccd

080009f0 <DHT22_start>:

void DHT22_start()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    EXTI->IMR &= ~EXTI_IMR_MR7;
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <DHT22_start+0x40>)
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <DHT22_start+0x40>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009fe:	6013      	str	r3, [r2, #0]
    // MCU PULL LOW ~20ms
    DHT22_SWITCH_MODE_OUTPUT();
 8000a00:	f7ff feb6 	bl	8000770 <DHT22_SWITCH_MODE_OUTPUT>
    GPIOA->ODR &= ~GPIO_ODR_ODR_7;
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <DHT22_start+0x44>)
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <DHT22_start+0x44>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a0e:	6153      	str	r3, [r2, #20]
    delay_ms(20);
 8000a10:	2014      	movs	r0, #20
 8000a12:	f000 f92f 	bl	8000c74 <delay_ms>

    // MCU RELEASE LINE 20-40us
    GPIOA->ODR |= GPIO_ODR_ODR_7;
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <DHT22_start+0x44>)
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <DHT22_start+0x44>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6153      	str	r3, [r2, #20]
    DHT22_SWITCH_MODE_INPUT();
 8000a22:	f7ff feb9 	bl	8000798 <DHT22_SWITCH_MODE_INPUT>
	delay_us(20);
 8000a26:	2014      	movs	r0, #20
 8000a28:	f000 f8fe 	bl	8000c28 <delay_us>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40010400 	.word	0x40010400
 8000a34:	40020000 	.word	0x40020000

08000a38 <DHT22_wait_response>:

uint8_t DHT22_wait_response()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a3e:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000a42:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	601a      	str	r2, [r3, #0]

    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 8000a50:	e00a      	b.n	8000a68 <DHT22_wait_response+0x30>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <DHT22_wait_response+0x30>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response PULL LOW");
 8000a5e:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <DHT22_wait_response+0x90>)
 8000a60:	f7ff fe4c 	bl	80006fc <USART2_write_buffer>
            return DHT_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e02b      	b.n	8000ac0 <DHT22_wait_response+0x88>
    while (!(GPIOA->IDR & GPIO_IDR_IDR_7))
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <DHT22_wait_response+0x94>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0ee      	beq.n	8000a52 <DHT22_wait_response+0x1a>
        }
    }

    EXTI->IMR |= EXTI_IMR_MR7;
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <DHT22_wait_response+0x98>)
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <DHT22_wait_response+0x98>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	6013      	str	r3, [r2, #0]

    SysTick->LOAD = TIMEOUT_90_US - 1; // Set maximum allowable wait time 85µs
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a82:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000a86:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a90:	2205      	movs	r2, #5
 8000a92:	601a      	str	r2, [r3, #0]
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8000a94:	e00a      	b.n	8000aac <DHT22_wait_response+0x74>
    {
        if ((SysTick->CTRL) & 0x10000)
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <DHT22_wait_response+0x74>
        {
    		USART2_write_buffer("Timeout error when waiting for DHT22 response GET READY");
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <DHT22_wait_response+0x9c>)
 8000aa4:	f7ff fe2a 	bl	80006fc <USART2_write_buffer>
            return DHT_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e009      	b.n	8000ac0 <DHT22_wait_response+0x88>
    while (GPIOA->IDR & GPIO_IDR_IDR_7)
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <DHT22_wait_response+0x94>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1ee      	bne.n	8000a96 <DHT22_wait_response+0x5e>
        }
    }

    SysTick->CTRL = 0;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <DHT22_wait_response+0x8c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]

    return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	e000e010 	.word	0xe000e010
 8000ac8:	0800197c 	.word	0x0800197c
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40010400 	.word	0x40010400
 8000ad4:	080019b4 	.word	0x080019b4

08000ad8 <DHT22_decode_pulses>:

void DHT22_decode_pulses(volatile uint8_t *pulses, uint8_t *byte_list)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    uint8_t current_byte = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]

    for (int bit = 1; bit <= BIT_COUNT; bit++)
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	e02c      	b.n	8000b46 <DHT22_decode_pulses+0x6e>
    {
        if (pulses[bit] > 20 && pulses[bit] < 32)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b14      	cmp	r3, #20
 8000af8:	d90a      	bls.n	8000b10 <DHT22_decode_pulses+0x38>
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d803      	bhi.n	8000b10 <DHT22_decode_pulses+0x38>
        {
            current_byte = (current_byte << 1) | 0;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e006      	b.n	8000b1e <DHT22_decode_pulses+0x46>
        }
        else
        {
            current_byte = (current_byte << 1) | 1;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	73fb      	strb	r3, [r7, #15]
        }

        if ((bit % 8) == 0)
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10b      	bne.n	8000b40 <DHT22_decode_pulses+0x68>
        {
            byte_list[(bit / 8) - 1] = current_byte;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da00      	bge.n	8000b30 <DHT22_decode_pulses+0x58>
 8000b2e:	3307      	adds	r3, #7
 8000b30:	10db      	asrs	r3, r3, #3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	7bfa      	ldrb	r2, [r7, #15]
 8000b3a:	701a      	strb	r2, [r3, #0]
            current_byte = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
    for (int bit = 1; bit <= BIT_COUNT; bit++)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b29      	cmp	r3, #41	; 0x29
 8000b4a:	ddcf      	ble.n	8000aec <DHT22_decode_pulses+0x14>
        }
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <DHT22_ModbusHandler>:

void DHT22_ModbusHandler(MODBUS_Reading* reading)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b09c      	sub	sp, #112	; 0x70
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	if(!(DHT22_read(reading)))
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fe56 	bl	8000810 <DHT22_read>
		snprintf(buffer, 100, "DHT22 Temperature %4x", reading->temperature);
		USART2_write_buffer(buffer);
#endif
	}

	return;
 8000b64:	bf00      	nop
}
 8000b66:	3770      	adds	r7, #112	; 0x70
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <DHT22_IRQHandler>:

void DHT22_IRQHandler()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 8000b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <DHT22_IRQHandler+0xa4>)
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <DHT22_IRQHandler+0xa8>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <DHT22_IRQHandler+0xac>)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <DHT22_IRQHandler+0xa8>)
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <DHT22_IRQHandler+0xa8>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	e025      	b.n	8000bec <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <DHT22_IRQHandler+0xac>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d305      	bcc.n	8000bb6 <DHT22_IRQHandler+0x4a>
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <DHT22_IRQHandler+0xac>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	e006      	b.n	8000bc4 <DHT22_IRQHandler+0x58>
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <DHT22_IRQHandler+0xac>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <DHT22_IRQHandler+0xb0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	b2d9      	uxtb	r1, r3
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <DHT22_IRQHandler+0xb4>)
 8000bd2:	5499      	strb	r1, [r3, r2]
		index++;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <DHT22_IRQHandler+0xb0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <DHT22_IRQHandler+0xb0>)
 8000bde:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <DHT22_IRQHandler+0xa8>)
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <DHT22_IRQHandler+0xa8>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f023 0320 	bic.w	r3, r3, #32
 8000bea:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <DHT22_IRQHandler+0xb0>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b28      	cmp	r3, #40	; 0x28
 8000bf2:	d905      	bls.n	8000c00 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <DHT22_IRQHandler+0xb0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <DHT22_IRQHandler+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <DHT22_IRQHandler+0xb8>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	615a      	str	r2, [r3, #20]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	200000c1 	.word	0x200000c1
 8000c14:	40020000 	.word	0x40020000
 8000c18:	200000c2 	.word	0x200000c2
 8000c1c:	200000c4 	.word	0x200000c4
 8000c20:	20000098 	.word	0x20000098
 8000c24:	40010400 	.word	0x40010400

08000c28 <delay_us>:
#include "timing.h"
#include "stm32l1xx.h"

void delay_us(unsigned long delay)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32 - 1; //32 000 000 = 1s so 32 = 1 us
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <delay_us+0x48>)
 8000c36:	221f      	movs	r2, #31
 8000c38:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <delay_us+0x48>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <delay_us+0x48>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	601a      	str	r2, [r3, #0]

	  while(i < delay)
 8000c46:	e009      	b.n	8000c5c <delay_us+0x34>
	  {
		  while(!((SysTick->CTRL) & 0x10000)){}
 8000c48:	bf00      	nop
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <delay_us+0x48>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f9      	beq.n	8000c4a <delay_us+0x22>
		  i++;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
	  while(i < delay)
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3f1      	bcc.n	8000c48 <delay_us+0x20>
	  }
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <delay_ms>:

void delay_ms(unsigned long delay)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <delay_ms+0x48>)
 8000c82:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000c86:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <delay_ms+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <delay_ms+0x48>)
 8000c90:	2205      	movs	r2, #5
 8000c92:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 8000c94:	e009      	b.n	8000caa <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 8000c96:	bf00      	nop
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <delay_ms+0x48>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f9      	beq.n	8000c98 <delay_ms+0x24>
		i++;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3f1      	bcc.n	8000c96 <delay_ms+0x22>
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <SetSysClock>:
void SetSysClock(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000cca:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <SetSysClock+0x100>)
 8000ccc:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <SetSysClock+0x100>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000cd6:	bf00      	nop
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <SetSysClock+0x100>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f9      	beq.n	8000cd8 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <SetSysClock+0x100>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <SetSysClock+0x36>
  {
    status = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e001      	b.n	8000cfa <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <SetSysClock+0x100>)
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <SetSysClock+0x100>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000d0a:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000d0c:	4a2c      	ldr	r2, [pc, #176]	; (8000dc0 <SetSysClock+0x100>)
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SetSysClock+0x100>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000d16:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000d18:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <SetSysClock+0x104>)
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <SetSysClock+0x104>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <SetSysClock+0x104>)
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <SetSysClock+0x104>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000d30:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <SetSysClock+0x104>)
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <SetSysClock+0x104>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000d3c:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <SetSysClock+0x100>)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <SetSysClock+0x100>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <SetSysClock+0x108>)
 8000d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4e:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000d50:	bf00      	nop
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <SetSysClock+0x108>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f9      	bne.n	8000d52 <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <SetSysClock+0x100>)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <SetSysClock+0x100>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d68:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <SetSysClock+0x100>)
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SetSysClock+0x100>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d74:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <SetSysClock+0x100>)
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SetSysClock+0x100>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d80:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SetSysClock+0x100>)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SetSysClock+0x100>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8c:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000d8e:	bf00      	nop
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SetSysClock+0x100>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f9      	beq.n	8000d90 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <SetSysClock+0x100>)
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <SetSysClock+0x100>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f043 0303 	orr.w	r3, r3, #3
 8000da6:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000da8:	bf00      	nop
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SetSysClock+0x100>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f9      	beq.n	8000daa <SetSysClock+0xea>
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	40007000 	.word	0x40007000

08000dcc <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	// CMSIS Initializations

	SetSysClock();
 8000dd0:	f7ff ff76 	bl	8000cc0 <SetSysClock>
	SystemCoreClockUpdate();
 8000dd4:	f000 f886 	bl	8000ee4 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8000dd8:	f7ff f9de 	bl	8000198 <GPIO_init>
	USART2_init();
 8000ddc:	f7ff fc2c 	bl	8000638 <USART2_init>
	TIM2_Init();
 8000de0:	f7ff fbf2 	bl	80005c8 <TIM2_Init>

	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	DHT22_init();
 8000de4:	f7ff fce6 	bl	80007b4 <DHT22_init>
	//ADC_init();

	while (1)
	{
		MODBUS_ProcessFrame();
 8000de8:	f7ff fad0 	bl	800038c <MODBUS_ProcessFrame>
		delay_ms(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff ff41 	bl	8000c74 <delay_ms>
		MODBUS_ProcessFrame();
 8000df2:	e7f9      	b.n	8000de8 <main+0x1c>

08000df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000df4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000df6:	e003      	b.n	8000e00 <LoopCopyDataInit>

08000df8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dfe:	3104      	adds	r1, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e08:	d3f6      	bcc.n	8000df8 <CopyDataInit>
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e0c:	e002      	b.n	8000e14 <LoopFillZerobss>

08000e0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e10:	f842 3b04 	str.w	r3, [r2], #4

08000e14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e18:	d3f9      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1a:	f000 f82f 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f000 f909 	bl	8001034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff ffd3 	bl	8000dcc <main>
  bx lr
 8000e26:	4770      	bx	lr
  ldr r3, =_sidata
 8000e28:	08001c44 	.word	0x08001c44
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e30:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000e34:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000e38:	20000158 	.word	0x20000158

08000e3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>
	...

08000e40 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <_sbrk+0x34>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x16>
		heap_end = & end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x34>)
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <_sbrk+0x38>)
 8000e54:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x34>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <_sbrk+0x34>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <_sbrk+0x34>)
 8000e66:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	200000c8 	.word	0x200000c8
 8000e78:	20000158 	.word	0x20000158

08000e7c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <SystemInit+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <SystemInit+0x5c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000e8c:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <SystemInit+0x5c>)
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <SystemInit+0x5c>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <SystemInit+0x60>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <SystemInit+0x5c>)
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <SystemInit+0x5c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000ea2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000ea6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <SystemInit+0x5c>)
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <SystemInit+0x5c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <SystemInit+0x5c>)
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <SystemInit+0x5c>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000ebe:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SystemInit+0x5c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x64>)
 8000ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ecc:	609a      	str	r2, [r3, #8]
#endif
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	88ffc00c 	.word	0x88ffc00c
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000efe:	4b48      	ldr	r3, [pc, #288]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d863      	bhi.n	8000fd6 <SystemCoreClockUpdate+0xf2>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <SystemCoreClockUpdate+0x30>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f49 	.word	0x08000f49
 8000f18:	08000fd7 	.word	0x08000fd7
 8000f1c:	08000fd7 	.word	0x08000fd7
 8000f20:	08000fd7 	.word	0x08000fd7
 8000f24:	08000f69 	.word	0x08000f69
 8000f28:	08000fd7 	.word	0x08000fd7
 8000f2c:	08000fd7 	.word	0x08000fd7
 8000f30:	08000fd7 	.word	0x08000fd7
 8000f34:	08000f71 	.word	0x08000f71
 8000f38:	08000fd7 	.word	0x08000fd7
 8000f3c:	08000fd7 	.word	0x08000fd7
 8000f40:	08000fd7 	.word	0x08000fd7
 8000f44:	08000f79 	.word	0x08000f79
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	0b5b      	lsrs	r3, r3, #13
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000f64:	601a      	str	r2, [r3, #0]
      break;
 8000f66:	e046      	b.n	8000ff6 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <SystemCoreClockUpdate+0x144>)
 8000f6c:	601a      	str	r2, [r3, #0]
      break;
 8000f6e:	e042      	b.n	8000ff6 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <SystemCoreClockUpdate+0x144>)
 8000f74:	601a      	str	r2, [r3, #0]
      break;
 8000f76:	e03e      	b.n	8000ff6 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f80:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000f8a:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	4a26      	ldr	r2, [pc, #152]	; (800102c <SystemCoreClockUpdate+0x148>)
 8000f92:	5cd3      	ldrb	r3, [r2, r3]
 8000f94:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	0d9b      	lsrs	r3, r3, #22
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <SystemCoreClockUpdate+0x144>)
 8000fb2:	fb02 f203 	mul.w	r2, r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000fbe:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000fc0:	e019      	b.n	8000ff6 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4a18      	ldr	r2, [pc, #96]	; (8001028 <SystemCoreClockUpdate+0x144>)
 8000fc6:	fb02 f203 	mul.w	r2, r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000fd2:	6013      	str	r3, [r2, #0]
      break;
 8000fd4:	e00f      	b.n	8000ff6 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	0b5b      	lsrs	r3, r3, #13
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000ff2:	601a      	str	r2, [r3, #0]
      break;
 8000ff4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <SystemCoreClockUpdate+0x14c>)
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	20000004 	.word	0x20000004
 8001028:	007a1200 	.word	0x007a1200
 800102c:	08001bec 	.word	0x08001bec
 8001030:	08001bf8 	.word	0x08001bf8

08001034 <__libc_init_array>:
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	2500      	movs	r5, #0
 8001038:	4e0c      	ldr	r6, [pc, #48]	; (800106c <__libc_init_array+0x38>)
 800103a:	4c0d      	ldr	r4, [pc, #52]	; (8001070 <__libc_init_array+0x3c>)
 800103c:	1ba4      	subs	r4, r4, r6
 800103e:	10a4      	asrs	r4, r4, #2
 8001040:	42a5      	cmp	r5, r4
 8001042:	d109      	bne.n	8001058 <__libc_init_array+0x24>
 8001044:	f000 fc54 	bl	80018f0 <_init>
 8001048:	2500      	movs	r5, #0
 800104a:	4e0a      	ldr	r6, [pc, #40]	; (8001074 <__libc_init_array+0x40>)
 800104c:	4c0a      	ldr	r4, [pc, #40]	; (8001078 <__libc_init_array+0x44>)
 800104e:	1ba4      	subs	r4, r4, r6
 8001050:	10a4      	asrs	r4, r4, #2
 8001052:	42a5      	cmp	r5, r4
 8001054:	d105      	bne.n	8001062 <__libc_init_array+0x2e>
 8001056:	bd70      	pop	{r4, r5, r6, pc}
 8001058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800105c:	4798      	blx	r3
 800105e:	3501      	adds	r5, #1
 8001060:	e7ee      	b.n	8001040 <__libc_init_array+0xc>
 8001062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001066:	4798      	blx	r3
 8001068:	3501      	adds	r5, #1
 800106a:	e7f2      	b.n	8001052 <__libc_init_array+0x1e>
 800106c:	08001c3c 	.word	0x08001c3c
 8001070:	08001c3c 	.word	0x08001c3c
 8001074:	08001c3c 	.word	0x08001c3c
 8001078:	08001c40 	.word	0x08001c40

0800107c <sniprintf>:
 800107c:	b40c      	push	{r2, r3}
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <sniprintf+0x64>)
 8001082:	1e0c      	subs	r4, r1, #0
 8001084:	b09d      	sub	sp, #116	; 0x74
 8001086:	681d      	ldr	r5, [r3, #0]
 8001088:	da08      	bge.n	800109c <sniprintf+0x20>
 800108a:	238b      	movs	r3, #139	; 0x8b
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	602b      	str	r3, [r5, #0]
 8001092:	b01d      	add	sp, #116	; 0x74
 8001094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001098:	b002      	add	sp, #8
 800109a:	4770      	bx	lr
 800109c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80010a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80010a4:	bf0c      	ite	eq
 80010a6:	4623      	moveq	r3, r4
 80010a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80010ac:	9304      	str	r3, [sp, #16]
 80010ae:	9307      	str	r3, [sp, #28]
 80010b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b4:	9002      	str	r0, [sp, #8]
 80010b6:	9006      	str	r0, [sp, #24]
 80010b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80010bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80010be:	ab21      	add	r3, sp, #132	; 0x84
 80010c0:	a902      	add	r1, sp, #8
 80010c2:	4628      	mov	r0, r5
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f000 f913 	bl	80012f0 <_svfiprintf_r>
 80010ca:	1c43      	adds	r3, r0, #1
 80010cc:	bfbc      	itt	lt
 80010ce:	238b      	movlt	r3, #139	; 0x8b
 80010d0:	602b      	strlt	r3, [r5, #0]
 80010d2:	2c00      	cmp	r4, #0
 80010d4:	d0dd      	beq.n	8001092 <sniprintf+0x16>
 80010d6:	2200      	movs	r2, #0
 80010d8:	9b02      	ldr	r3, [sp, #8]
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e7d9      	b.n	8001092 <sniprintf+0x16>
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <_free_r>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4605      	mov	r5, r0
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d043      	beq.n	8001174 <_free_r+0x90>
 80010ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010f0:	1f0c      	subs	r4, r1, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bfb8      	it	lt
 80010f6:	18e4      	addlt	r4, r4, r3
 80010f8:	f000 fbc9 	bl	800188e <__malloc_lock>
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <_free_r+0x94>)
 80010fe:	6813      	ldr	r3, [r2, #0]
 8001100:	4610      	mov	r0, r2
 8001102:	b933      	cbnz	r3, 8001112 <_free_r+0x2e>
 8001104:	6063      	str	r3, [r4, #4]
 8001106:	6014      	str	r4, [r2, #0]
 8001108:	4628      	mov	r0, r5
 800110a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800110e:	f000 bbbf 	b.w	8001890 <__malloc_unlock>
 8001112:	42a3      	cmp	r3, r4
 8001114:	d90b      	bls.n	800112e <_free_r+0x4a>
 8001116:	6821      	ldr	r1, [r4, #0]
 8001118:	1862      	adds	r2, r4, r1
 800111a:	4293      	cmp	r3, r2
 800111c:	bf01      	itttt	eq
 800111e:	681a      	ldreq	r2, [r3, #0]
 8001120:	685b      	ldreq	r3, [r3, #4]
 8001122:	1852      	addeq	r2, r2, r1
 8001124:	6022      	streq	r2, [r4, #0]
 8001126:	6063      	str	r3, [r4, #4]
 8001128:	6004      	str	r4, [r0, #0]
 800112a:	e7ed      	b.n	8001108 <_free_r+0x24>
 800112c:	4613      	mov	r3, r2
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	b10a      	cbz	r2, 8001136 <_free_r+0x52>
 8001132:	42a2      	cmp	r2, r4
 8001134:	d9fa      	bls.n	800112c <_free_r+0x48>
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	1858      	adds	r0, r3, r1
 800113a:	42a0      	cmp	r0, r4
 800113c:	d10b      	bne.n	8001156 <_free_r+0x72>
 800113e:	6820      	ldr	r0, [r4, #0]
 8001140:	4401      	add	r1, r0
 8001142:	1858      	adds	r0, r3, r1
 8001144:	4282      	cmp	r2, r0
 8001146:	6019      	str	r1, [r3, #0]
 8001148:	d1de      	bne.n	8001108 <_free_r+0x24>
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	6852      	ldr	r2, [r2, #4]
 800114e:	4401      	add	r1, r0
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	e7d8      	b.n	8001108 <_free_r+0x24>
 8001156:	d902      	bls.n	800115e <_free_r+0x7a>
 8001158:	230c      	movs	r3, #12
 800115a:	602b      	str	r3, [r5, #0]
 800115c:	e7d4      	b.n	8001108 <_free_r+0x24>
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	1821      	adds	r1, r4, r0
 8001162:	428a      	cmp	r2, r1
 8001164:	bf01      	itttt	eq
 8001166:	6811      	ldreq	r1, [r2, #0]
 8001168:	6852      	ldreq	r2, [r2, #4]
 800116a:	1809      	addeq	r1, r1, r0
 800116c:	6021      	streq	r1, [r4, #0]
 800116e:	6062      	str	r2, [r4, #4]
 8001170:	605c      	str	r4, [r3, #4]
 8001172:	e7c9      	b.n	8001108 <_free_r+0x24>
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	bf00      	nop
 8001178:	200000cc 	.word	0x200000cc

0800117c <_malloc_r>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	1ccd      	adds	r5, r1, #3
 8001180:	f025 0503 	bic.w	r5, r5, #3
 8001184:	3508      	adds	r5, #8
 8001186:	2d0c      	cmp	r5, #12
 8001188:	bf38      	it	cc
 800118a:	250c      	movcc	r5, #12
 800118c:	2d00      	cmp	r5, #0
 800118e:	4606      	mov	r6, r0
 8001190:	db01      	blt.n	8001196 <_malloc_r+0x1a>
 8001192:	42a9      	cmp	r1, r5
 8001194:	d903      	bls.n	800119e <_malloc_r+0x22>
 8001196:	230c      	movs	r3, #12
 8001198:	6033      	str	r3, [r6, #0]
 800119a:	2000      	movs	r0, #0
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	f000 fb76 	bl	800188e <__malloc_lock>
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <_malloc_r+0xb4>)
 80011a4:	6814      	ldr	r4, [r2, #0]
 80011a6:	4621      	mov	r1, r4
 80011a8:	b991      	cbnz	r1, 80011d0 <_malloc_r+0x54>
 80011aa:	4c22      	ldr	r4, [pc, #136]	; (8001234 <_malloc_r+0xb8>)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	b91b      	cbnz	r3, 80011b8 <_malloc_r+0x3c>
 80011b0:	4630      	mov	r0, r6
 80011b2:	f000 fb29 	bl	8001808 <_sbrk_r>
 80011b6:	6020      	str	r0, [r4, #0]
 80011b8:	4629      	mov	r1, r5
 80011ba:	4630      	mov	r0, r6
 80011bc:	f000 fb24 	bl	8001808 <_sbrk_r>
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	d126      	bne.n	8001212 <_malloc_r+0x96>
 80011c4:	230c      	movs	r3, #12
 80011c6:	4630      	mov	r0, r6
 80011c8:	6033      	str	r3, [r6, #0]
 80011ca:	f000 fb61 	bl	8001890 <__malloc_unlock>
 80011ce:	e7e4      	b.n	800119a <_malloc_r+0x1e>
 80011d0:	680b      	ldr	r3, [r1, #0]
 80011d2:	1b5b      	subs	r3, r3, r5
 80011d4:	d41a      	bmi.n	800120c <_malloc_r+0x90>
 80011d6:	2b0b      	cmp	r3, #11
 80011d8:	d90f      	bls.n	80011fa <_malloc_r+0x7e>
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	18cc      	adds	r4, r1, r3
 80011de:	50cd      	str	r5, [r1, r3]
 80011e0:	4630      	mov	r0, r6
 80011e2:	f000 fb55 	bl	8001890 <__malloc_unlock>
 80011e6:	f104 000b 	add.w	r0, r4, #11
 80011ea:	1d23      	adds	r3, r4, #4
 80011ec:	f020 0007 	bic.w	r0, r0, #7
 80011f0:	1ac3      	subs	r3, r0, r3
 80011f2:	d01b      	beq.n	800122c <_malloc_r+0xb0>
 80011f4:	425a      	negs	r2, r3
 80011f6:	50e2      	str	r2, [r4, r3]
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	428c      	cmp	r4, r1
 80011fc:	bf0b      	itete	eq
 80011fe:	6863      	ldreq	r3, [r4, #4]
 8001200:	684b      	ldrne	r3, [r1, #4]
 8001202:	6013      	streq	r3, [r2, #0]
 8001204:	6063      	strne	r3, [r4, #4]
 8001206:	bf18      	it	ne
 8001208:	460c      	movne	r4, r1
 800120a:	e7e9      	b.n	80011e0 <_malloc_r+0x64>
 800120c:	460c      	mov	r4, r1
 800120e:	6849      	ldr	r1, [r1, #4]
 8001210:	e7ca      	b.n	80011a8 <_malloc_r+0x2c>
 8001212:	1cc4      	adds	r4, r0, #3
 8001214:	f024 0403 	bic.w	r4, r4, #3
 8001218:	42a0      	cmp	r0, r4
 800121a:	d005      	beq.n	8001228 <_malloc_r+0xac>
 800121c:	1a21      	subs	r1, r4, r0
 800121e:	4630      	mov	r0, r6
 8001220:	f000 faf2 	bl	8001808 <_sbrk_r>
 8001224:	3001      	adds	r0, #1
 8001226:	d0cd      	beq.n	80011c4 <_malloc_r+0x48>
 8001228:	6025      	str	r5, [r4, #0]
 800122a:	e7d9      	b.n	80011e0 <_malloc_r+0x64>
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	bf00      	nop
 8001230:	200000cc 	.word	0x200000cc
 8001234:	200000d0 	.word	0x200000d0

08001238 <__ssputs_r>:
 8001238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800123c:	688e      	ldr	r6, [r1, #8]
 800123e:	4682      	mov	sl, r0
 8001240:	429e      	cmp	r6, r3
 8001242:	460c      	mov	r4, r1
 8001244:	4691      	mov	r9, r2
 8001246:	4698      	mov	r8, r3
 8001248:	d835      	bhi.n	80012b6 <__ssputs_r+0x7e>
 800124a:	898a      	ldrh	r2, [r1, #12]
 800124c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001250:	d031      	beq.n	80012b6 <__ssputs_r+0x7e>
 8001252:	2302      	movs	r3, #2
 8001254:	6825      	ldr	r5, [r4, #0]
 8001256:	6909      	ldr	r1, [r1, #16]
 8001258:	1a6f      	subs	r7, r5, r1
 800125a:	6965      	ldr	r5, [r4, #20]
 800125c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001260:	fb95 f5f3 	sdiv	r5, r5, r3
 8001264:	f108 0301 	add.w	r3, r8, #1
 8001268:	443b      	add	r3, r7
 800126a:	429d      	cmp	r5, r3
 800126c:	bf38      	it	cc
 800126e:	461d      	movcc	r5, r3
 8001270:	0553      	lsls	r3, r2, #21
 8001272:	d531      	bpl.n	80012d8 <__ssputs_r+0xa0>
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff ff81 	bl	800117c <_malloc_r>
 800127a:	4606      	mov	r6, r0
 800127c:	b950      	cbnz	r0, 8001294 <__ssputs_r+0x5c>
 800127e:	230c      	movs	r3, #12
 8001280:	f8ca 3000 	str.w	r3, [sl]
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	f04f 30ff 	mov.w	r0, #4294967295
 800128a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128e:	81a3      	strh	r3, [r4, #12]
 8001290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001294:	463a      	mov	r2, r7
 8001296:	6921      	ldr	r1, [r4, #16]
 8001298:	f000 fad4 	bl	8001844 <memcpy>
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	81a3      	strh	r3, [r4, #12]
 80012a8:	6126      	str	r6, [r4, #16]
 80012aa:	443e      	add	r6, r7
 80012ac:	6026      	str	r6, [r4, #0]
 80012ae:	4646      	mov	r6, r8
 80012b0:	6165      	str	r5, [r4, #20]
 80012b2:	1bed      	subs	r5, r5, r7
 80012b4:	60a5      	str	r5, [r4, #8]
 80012b6:	4546      	cmp	r6, r8
 80012b8:	bf28      	it	cs
 80012ba:	4646      	movcs	r6, r8
 80012bc:	4649      	mov	r1, r9
 80012be:	4632      	mov	r2, r6
 80012c0:	6820      	ldr	r0, [r4, #0]
 80012c2:	f000 faca 	bl	800185a <memmove>
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	2000      	movs	r0, #0
 80012ca:	1b9b      	subs	r3, r3, r6
 80012cc:	60a3      	str	r3, [r4, #8]
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	441e      	add	r6, r3
 80012d2:	6026      	str	r6, [r4, #0]
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	462a      	mov	r2, r5
 80012da:	f000 fada 	bl	8001892 <_realloc_r>
 80012de:	4606      	mov	r6, r0
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d1e1      	bne.n	80012a8 <__ssputs_r+0x70>
 80012e4:	6921      	ldr	r1, [r4, #16]
 80012e6:	4650      	mov	r0, sl
 80012e8:	f7ff fefc 	bl	80010e4 <_free_r>
 80012ec:	e7c7      	b.n	800127e <__ssputs_r+0x46>
	...

080012f0 <_svfiprintf_r>:
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	b09d      	sub	sp, #116	; 0x74
 80012f6:	9303      	str	r3, [sp, #12]
 80012f8:	898b      	ldrh	r3, [r1, #12]
 80012fa:	4680      	mov	r8, r0
 80012fc:	061c      	lsls	r4, r3, #24
 80012fe:	460d      	mov	r5, r1
 8001300:	4616      	mov	r6, r2
 8001302:	d50f      	bpl.n	8001324 <_svfiprintf_r+0x34>
 8001304:	690b      	ldr	r3, [r1, #16]
 8001306:	b96b      	cbnz	r3, 8001324 <_svfiprintf_r+0x34>
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	f7ff ff37 	bl	800117c <_malloc_r>
 800130e:	6028      	str	r0, [r5, #0]
 8001310:	6128      	str	r0, [r5, #16]
 8001312:	b928      	cbnz	r0, 8001320 <_svfiprintf_r+0x30>
 8001314:	230c      	movs	r3, #12
 8001316:	f8c8 3000 	str.w	r3, [r8]
 800131a:	f04f 30ff 	mov.w	r0, #4294967295
 800131e:	e0c4      	b.n	80014aa <_svfiprintf_r+0x1ba>
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	616b      	str	r3, [r5, #20]
 8001324:	2300      	movs	r3, #0
 8001326:	9309      	str	r3, [sp, #36]	; 0x24
 8001328:	2320      	movs	r3, #32
 800132a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800132e:	2330      	movs	r3, #48	; 0x30
 8001330:	f04f 0b01 	mov.w	fp, #1
 8001334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001338:	4637      	mov	r7, r6
 800133a:	463c      	mov	r4, r7
 800133c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d13c      	bne.n	80013be <_svfiprintf_r+0xce>
 8001344:	ebb7 0a06 	subs.w	sl, r7, r6
 8001348:	d00b      	beq.n	8001362 <_svfiprintf_r+0x72>
 800134a:	4653      	mov	r3, sl
 800134c:	4632      	mov	r2, r6
 800134e:	4629      	mov	r1, r5
 8001350:	4640      	mov	r0, r8
 8001352:	f7ff ff71 	bl	8001238 <__ssputs_r>
 8001356:	3001      	adds	r0, #1
 8001358:	f000 80a2 	beq.w	80014a0 <_svfiprintf_r+0x1b0>
 800135c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800135e:	4453      	add	r3, sl
 8001360:	9309      	str	r3, [sp, #36]	; 0x24
 8001362:	783b      	ldrb	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 809b 	beq.w	80014a0 <_svfiprintf_r+0x1b0>
 800136a:	2300      	movs	r3, #0
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	9304      	str	r3, [sp, #16]
 8001372:	9307      	str	r3, [sp, #28]
 8001374:	9205      	str	r2, [sp, #20]
 8001376:	9306      	str	r3, [sp, #24]
 8001378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800137c:	931a      	str	r3, [sp, #104]	; 0x68
 800137e:	2205      	movs	r2, #5
 8001380:	7821      	ldrb	r1, [r4, #0]
 8001382:	4850      	ldr	r0, [pc, #320]	; (80014c4 <_svfiprintf_r+0x1d4>)
 8001384:	f000 fa50 	bl	8001828 <memchr>
 8001388:	1c67      	adds	r7, r4, #1
 800138a:	9b04      	ldr	r3, [sp, #16]
 800138c:	b9d8      	cbnz	r0, 80013c6 <_svfiprintf_r+0xd6>
 800138e:	06d9      	lsls	r1, r3, #27
 8001390:	bf44      	itt	mi
 8001392:	2220      	movmi	r2, #32
 8001394:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001398:	071a      	lsls	r2, r3, #28
 800139a:	bf44      	itt	mi
 800139c:	222b      	movmi	r2, #43	; 0x2b
 800139e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80013a2:	7822      	ldrb	r2, [r4, #0]
 80013a4:	2a2a      	cmp	r2, #42	; 0x2a
 80013a6:	d016      	beq.n	80013d6 <_svfiprintf_r+0xe6>
 80013a8:	2100      	movs	r1, #0
 80013aa:	200a      	movs	r0, #10
 80013ac:	9a07      	ldr	r2, [sp, #28]
 80013ae:	4627      	mov	r7, r4
 80013b0:	783b      	ldrb	r3, [r7, #0]
 80013b2:	3401      	adds	r4, #1
 80013b4:	3b30      	subs	r3, #48	; 0x30
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	d950      	bls.n	800145c <_svfiprintf_r+0x16c>
 80013ba:	b1c9      	cbz	r1, 80013f0 <_svfiprintf_r+0x100>
 80013bc:	e011      	b.n	80013e2 <_svfiprintf_r+0xf2>
 80013be:	2b25      	cmp	r3, #37	; 0x25
 80013c0:	d0c0      	beq.n	8001344 <_svfiprintf_r+0x54>
 80013c2:	4627      	mov	r7, r4
 80013c4:	e7b9      	b.n	800133a <_svfiprintf_r+0x4a>
 80013c6:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <_svfiprintf_r+0x1d4>)
 80013c8:	463c      	mov	r4, r7
 80013ca:	1a80      	subs	r0, r0, r2
 80013cc:	fa0b f000 	lsl.w	r0, fp, r0
 80013d0:	4318      	orrs	r0, r3
 80013d2:	9004      	str	r0, [sp, #16]
 80013d4:	e7d3      	b.n	800137e <_svfiprintf_r+0x8e>
 80013d6:	9a03      	ldr	r2, [sp, #12]
 80013d8:	1d11      	adds	r1, r2, #4
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	9103      	str	r1, [sp, #12]
 80013de:	2a00      	cmp	r2, #0
 80013e0:	db01      	blt.n	80013e6 <_svfiprintf_r+0xf6>
 80013e2:	9207      	str	r2, [sp, #28]
 80013e4:	e004      	b.n	80013f0 <_svfiprintf_r+0x100>
 80013e6:	4252      	negs	r2, r2
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	9207      	str	r2, [sp, #28]
 80013ee:	9304      	str	r3, [sp, #16]
 80013f0:	783b      	ldrb	r3, [r7, #0]
 80013f2:	2b2e      	cmp	r3, #46	; 0x2e
 80013f4:	d10d      	bne.n	8001412 <_svfiprintf_r+0x122>
 80013f6:	787b      	ldrb	r3, [r7, #1]
 80013f8:	1c79      	adds	r1, r7, #1
 80013fa:	2b2a      	cmp	r3, #42	; 0x2a
 80013fc:	d132      	bne.n	8001464 <_svfiprintf_r+0x174>
 80013fe:	9b03      	ldr	r3, [sp, #12]
 8001400:	3702      	adds	r7, #2
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	9203      	str	r2, [sp, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bfb8      	it	lt
 800140c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001410:	9305      	str	r3, [sp, #20]
 8001412:	4c2d      	ldr	r4, [pc, #180]	; (80014c8 <_svfiprintf_r+0x1d8>)
 8001414:	2203      	movs	r2, #3
 8001416:	7839      	ldrb	r1, [r7, #0]
 8001418:	4620      	mov	r0, r4
 800141a:	f000 fa05 	bl	8001828 <memchr>
 800141e:	b138      	cbz	r0, 8001430 <_svfiprintf_r+0x140>
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	1b00      	subs	r0, r0, r4
 8001424:	fa03 f000 	lsl.w	r0, r3, r0
 8001428:	9b04      	ldr	r3, [sp, #16]
 800142a:	3701      	adds	r7, #1
 800142c:	4303      	orrs	r3, r0
 800142e:	9304      	str	r3, [sp, #16]
 8001430:	7839      	ldrb	r1, [r7, #0]
 8001432:	2206      	movs	r2, #6
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <_svfiprintf_r+0x1dc>)
 8001436:	1c7e      	adds	r6, r7, #1
 8001438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800143c:	f000 f9f4 	bl	8001828 <memchr>
 8001440:	2800      	cmp	r0, #0
 8001442:	d035      	beq.n	80014b0 <_svfiprintf_r+0x1c0>
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <_svfiprintf_r+0x1e0>)
 8001446:	b9fb      	cbnz	r3, 8001488 <_svfiprintf_r+0x198>
 8001448:	9b03      	ldr	r3, [sp, #12]
 800144a:	3307      	adds	r3, #7
 800144c:	f023 0307 	bic.w	r3, r3, #7
 8001450:	3308      	adds	r3, #8
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001456:	444b      	add	r3, r9
 8001458:	9309      	str	r3, [sp, #36]	; 0x24
 800145a:	e76d      	b.n	8001338 <_svfiprintf_r+0x48>
 800145c:	fb00 3202 	mla	r2, r0, r2, r3
 8001460:	2101      	movs	r1, #1
 8001462:	e7a4      	b.n	80013ae <_svfiprintf_r+0xbe>
 8001464:	2300      	movs	r3, #0
 8001466:	240a      	movs	r4, #10
 8001468:	4618      	mov	r0, r3
 800146a:	9305      	str	r3, [sp, #20]
 800146c:	460f      	mov	r7, r1
 800146e:	783a      	ldrb	r2, [r7, #0]
 8001470:	3101      	adds	r1, #1
 8001472:	3a30      	subs	r2, #48	; 0x30
 8001474:	2a09      	cmp	r2, #9
 8001476:	d903      	bls.n	8001480 <_svfiprintf_r+0x190>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ca      	beq.n	8001412 <_svfiprintf_r+0x122>
 800147c:	9005      	str	r0, [sp, #20]
 800147e:	e7c8      	b.n	8001412 <_svfiprintf_r+0x122>
 8001480:	fb04 2000 	mla	r0, r4, r0, r2
 8001484:	2301      	movs	r3, #1
 8001486:	e7f1      	b.n	800146c <_svfiprintf_r+0x17c>
 8001488:	ab03      	add	r3, sp, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	462a      	mov	r2, r5
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_svfiprintf_r+0x1e4>)
 8001490:	a904      	add	r1, sp, #16
 8001492:	4640      	mov	r0, r8
 8001494:	f3af 8000 	nop.w
 8001498:	f1b0 3fff 	cmp.w	r0, #4294967295
 800149c:	4681      	mov	r9, r0
 800149e:	d1d9      	bne.n	8001454 <_svfiprintf_r+0x164>
 80014a0:	89ab      	ldrh	r3, [r5, #12]
 80014a2:	065b      	lsls	r3, r3, #25
 80014a4:	f53f af39 	bmi.w	800131a <_svfiprintf_r+0x2a>
 80014a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014aa:	b01d      	add	sp, #116	; 0x74
 80014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b0:	ab03      	add	r3, sp, #12
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	462a      	mov	r2, r5
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_svfiprintf_r+0x1e4>)
 80014b8:	a904      	add	r1, sp, #16
 80014ba:	4640      	mov	r0, r8
 80014bc:	f000 f884 	bl	80015c8 <_printf_i>
 80014c0:	e7ea      	b.n	8001498 <_svfiprintf_r+0x1a8>
 80014c2:	bf00      	nop
 80014c4:	08001c08 	.word	0x08001c08
 80014c8:	08001c0e 	.word	0x08001c0e
 80014cc:	08001c12 	.word	0x08001c12
 80014d0:	00000000 	.word	0x00000000
 80014d4:	08001239 	.word	0x08001239

080014d8 <_printf_common>:
 80014d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014dc:	4691      	mov	r9, r2
 80014de:	461f      	mov	r7, r3
 80014e0:	688a      	ldr	r2, [r1, #8]
 80014e2:	690b      	ldr	r3, [r1, #16]
 80014e4:	4606      	mov	r6, r0
 80014e6:	4293      	cmp	r3, r2
 80014e8:	bfb8      	it	lt
 80014ea:	4613      	movlt	r3, r2
 80014ec:	f8c9 3000 	str.w	r3, [r9]
 80014f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014f4:	460c      	mov	r4, r1
 80014f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014fa:	b112      	cbz	r2, 8001502 <_printf_common+0x2a>
 80014fc:	3301      	adds	r3, #1
 80014fe:	f8c9 3000 	str.w	r3, [r9]
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	0699      	lsls	r1, r3, #26
 8001506:	bf42      	ittt	mi
 8001508:	f8d9 3000 	ldrmi.w	r3, [r9]
 800150c:	3302      	addmi	r3, #2
 800150e:	f8c9 3000 	strmi.w	r3, [r9]
 8001512:	6825      	ldr	r5, [r4, #0]
 8001514:	f015 0506 	ands.w	r5, r5, #6
 8001518:	d107      	bne.n	800152a <_printf_common+0x52>
 800151a:	f104 0a19 	add.w	sl, r4, #25
 800151e:	68e3      	ldr	r3, [r4, #12]
 8001520:	f8d9 2000 	ldr.w	r2, [r9]
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	429d      	cmp	r5, r3
 8001528:	db2a      	blt.n	8001580 <_printf_common+0xa8>
 800152a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	3300      	adds	r3, #0
 8001532:	bf18      	it	ne
 8001534:	2301      	movne	r3, #1
 8001536:	0692      	lsls	r2, r2, #26
 8001538:	d42f      	bmi.n	800159a <_printf_common+0xc2>
 800153a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800153e:	4639      	mov	r1, r7
 8001540:	4630      	mov	r0, r6
 8001542:	47c0      	blx	r8
 8001544:	3001      	adds	r0, #1
 8001546:	d022      	beq.n	800158e <_printf_common+0xb6>
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	68e5      	ldr	r5, [r4, #12]
 800154c:	f003 0306 	and.w	r3, r3, #6
 8001550:	2b04      	cmp	r3, #4
 8001552:	bf18      	it	ne
 8001554:	2500      	movne	r5, #0
 8001556:	f8d9 2000 	ldr.w	r2, [r9]
 800155a:	f04f 0900 	mov.w	r9, #0
 800155e:	bf08      	it	eq
 8001560:	1aad      	subeq	r5, r5, r2
 8001562:	68a3      	ldr	r3, [r4, #8]
 8001564:	6922      	ldr	r2, [r4, #16]
 8001566:	bf08      	it	eq
 8001568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800156c:	4293      	cmp	r3, r2
 800156e:	bfc4      	itt	gt
 8001570:	1a9b      	subgt	r3, r3, r2
 8001572:	18ed      	addgt	r5, r5, r3
 8001574:	341a      	adds	r4, #26
 8001576:	454d      	cmp	r5, r9
 8001578:	d11b      	bne.n	80015b2 <_printf_common+0xda>
 800157a:	2000      	movs	r0, #0
 800157c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001580:	2301      	movs	r3, #1
 8001582:	4652      	mov	r2, sl
 8001584:	4639      	mov	r1, r7
 8001586:	4630      	mov	r0, r6
 8001588:	47c0      	blx	r8
 800158a:	3001      	adds	r0, #1
 800158c:	d103      	bne.n	8001596 <_printf_common+0xbe>
 800158e:	f04f 30ff 	mov.w	r0, #4294967295
 8001592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001596:	3501      	adds	r5, #1
 8001598:	e7c1      	b.n	800151e <_printf_common+0x46>
 800159a:	2030      	movs	r0, #48	; 0x30
 800159c:	18e1      	adds	r1, r4, r3
 800159e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80015a8:	4422      	add	r2, r4
 80015aa:	3302      	adds	r3, #2
 80015ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015b0:	e7c3      	b.n	800153a <_printf_common+0x62>
 80015b2:	2301      	movs	r3, #1
 80015b4:	4622      	mov	r2, r4
 80015b6:	4639      	mov	r1, r7
 80015b8:	4630      	mov	r0, r6
 80015ba:	47c0      	blx	r8
 80015bc:	3001      	adds	r0, #1
 80015be:	d0e6      	beq.n	800158e <_printf_common+0xb6>
 80015c0:	f109 0901 	add.w	r9, r9, #1
 80015c4:	e7d7      	b.n	8001576 <_printf_common+0x9e>
	...

080015c8 <_printf_i>:
 80015c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015cc:	4617      	mov	r7, r2
 80015ce:	7e0a      	ldrb	r2, [r1, #24]
 80015d0:	b085      	sub	sp, #20
 80015d2:	2a6e      	cmp	r2, #110	; 0x6e
 80015d4:	4698      	mov	r8, r3
 80015d6:	4606      	mov	r6, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80015dc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80015e0:	f000 80bc 	beq.w	800175c <_printf_i+0x194>
 80015e4:	d81a      	bhi.n	800161c <_printf_i+0x54>
 80015e6:	2a63      	cmp	r2, #99	; 0x63
 80015e8:	d02e      	beq.n	8001648 <_printf_i+0x80>
 80015ea:	d80a      	bhi.n	8001602 <_printf_i+0x3a>
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	f000 80c8 	beq.w	8001782 <_printf_i+0x1ba>
 80015f2:	2a58      	cmp	r2, #88	; 0x58
 80015f4:	f000 808a 	beq.w	800170c <_printf_i+0x144>
 80015f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001600:	e02a      	b.n	8001658 <_printf_i+0x90>
 8001602:	2a64      	cmp	r2, #100	; 0x64
 8001604:	d001      	beq.n	800160a <_printf_i+0x42>
 8001606:	2a69      	cmp	r2, #105	; 0x69
 8001608:	d1f6      	bne.n	80015f8 <_printf_i+0x30>
 800160a:	6821      	ldr	r1, [r4, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001612:	d023      	beq.n	800165c <_printf_i+0x94>
 8001614:	1d11      	adds	r1, r2, #4
 8001616:	6019      	str	r1, [r3, #0]
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	e027      	b.n	800166c <_printf_i+0xa4>
 800161c:	2a73      	cmp	r2, #115	; 0x73
 800161e:	f000 80b4 	beq.w	800178a <_printf_i+0x1c2>
 8001622:	d808      	bhi.n	8001636 <_printf_i+0x6e>
 8001624:	2a6f      	cmp	r2, #111	; 0x6f
 8001626:	d02a      	beq.n	800167e <_printf_i+0xb6>
 8001628:	2a70      	cmp	r2, #112	; 0x70
 800162a:	d1e5      	bne.n	80015f8 <_printf_i+0x30>
 800162c:	680a      	ldr	r2, [r1, #0]
 800162e:	f042 0220 	orr.w	r2, r2, #32
 8001632:	600a      	str	r2, [r1, #0]
 8001634:	e003      	b.n	800163e <_printf_i+0x76>
 8001636:	2a75      	cmp	r2, #117	; 0x75
 8001638:	d021      	beq.n	800167e <_printf_i+0xb6>
 800163a:	2a78      	cmp	r2, #120	; 0x78
 800163c:	d1dc      	bne.n	80015f8 <_printf_i+0x30>
 800163e:	2278      	movs	r2, #120	; 0x78
 8001640:	496f      	ldr	r1, [pc, #444]	; (8001800 <_printf_i+0x238>)
 8001642:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001646:	e064      	b.n	8001712 <_printf_i+0x14a>
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800164e:	1d11      	adds	r1, r2, #4
 8001650:	6019      	str	r1, [r3, #0]
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001658:	2301      	movs	r3, #1
 800165a:	e0a3      	b.n	80017a4 <_printf_i+0x1dc>
 800165c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001660:	f102 0104 	add.w	r1, r2, #4
 8001664:	6019      	str	r1, [r3, #0]
 8001666:	d0d7      	beq.n	8001618 <_printf_i+0x50>
 8001668:	f9b2 3000 	ldrsh.w	r3, [r2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da03      	bge.n	8001678 <_printf_i+0xb0>
 8001670:	222d      	movs	r2, #45	; 0x2d
 8001672:	425b      	negs	r3, r3
 8001674:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001678:	4962      	ldr	r1, [pc, #392]	; (8001804 <_printf_i+0x23c>)
 800167a:	220a      	movs	r2, #10
 800167c:	e017      	b.n	80016ae <_printf_i+0xe6>
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001686:	d003      	beq.n	8001690 <_printf_i+0xc8>
 8001688:	1d08      	adds	r0, r1, #4
 800168a:	6018      	str	r0, [r3, #0]
 800168c:	680b      	ldr	r3, [r1, #0]
 800168e:	e006      	b.n	800169e <_printf_i+0xd6>
 8001690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001694:	f101 0004 	add.w	r0, r1, #4
 8001698:	6018      	str	r0, [r3, #0]
 800169a:	d0f7      	beq.n	800168c <_printf_i+0xc4>
 800169c:	880b      	ldrh	r3, [r1, #0]
 800169e:	2a6f      	cmp	r2, #111	; 0x6f
 80016a0:	bf14      	ite	ne
 80016a2:	220a      	movne	r2, #10
 80016a4:	2208      	moveq	r2, #8
 80016a6:	4957      	ldr	r1, [pc, #348]	; (8001804 <_printf_i+0x23c>)
 80016a8:	2000      	movs	r0, #0
 80016aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80016ae:	6865      	ldr	r5, [r4, #4]
 80016b0:	2d00      	cmp	r5, #0
 80016b2:	60a5      	str	r5, [r4, #8]
 80016b4:	f2c0 809c 	blt.w	80017f0 <_printf_i+0x228>
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	f020 0004 	bic.w	r0, r0, #4
 80016be:	6020      	str	r0, [r4, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13f      	bne.n	8001744 <_printf_i+0x17c>
 80016c4:	2d00      	cmp	r5, #0
 80016c6:	f040 8095 	bne.w	80017f4 <_printf_i+0x22c>
 80016ca:	4675      	mov	r5, lr
 80016cc:	2a08      	cmp	r2, #8
 80016ce:	d10b      	bne.n	80016e8 <_printf_i+0x120>
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	07da      	lsls	r2, r3, #31
 80016d4:	d508      	bpl.n	80016e8 <_printf_i+0x120>
 80016d6:	6923      	ldr	r3, [r4, #16]
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	bfde      	ittt	le
 80016de:	2330      	movle	r3, #48	; 0x30
 80016e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80016e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80016e8:	ebae 0305 	sub.w	r3, lr, r5
 80016ec:	6123      	str	r3, [r4, #16]
 80016ee:	f8cd 8000 	str.w	r8, [sp]
 80016f2:	463b      	mov	r3, r7
 80016f4:	aa03      	add	r2, sp, #12
 80016f6:	4621      	mov	r1, r4
 80016f8:	4630      	mov	r0, r6
 80016fa:	f7ff feed 	bl	80014d8 <_printf_common>
 80016fe:	3001      	adds	r0, #1
 8001700:	d155      	bne.n	80017ae <_printf_i+0x1e6>
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	b005      	add	sp, #20
 8001708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800170c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001710:	493c      	ldr	r1, [pc, #240]	; (8001804 <_printf_i+0x23c>)
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	f012 0f80 	tst.w	r2, #128	; 0x80
 800171a:	f100 0504 	add.w	r5, r0, #4
 800171e:	601d      	str	r5, [r3, #0]
 8001720:	d001      	beq.n	8001726 <_printf_i+0x15e>
 8001722:	6803      	ldr	r3, [r0, #0]
 8001724:	e002      	b.n	800172c <_printf_i+0x164>
 8001726:	0655      	lsls	r5, r2, #25
 8001728:	d5fb      	bpl.n	8001722 <_printf_i+0x15a>
 800172a:	8803      	ldrh	r3, [r0, #0]
 800172c:	07d0      	lsls	r0, r2, #31
 800172e:	bf44      	itt	mi
 8001730:	f042 0220 	orrmi.w	r2, r2, #32
 8001734:	6022      	strmi	r2, [r4, #0]
 8001736:	b91b      	cbnz	r3, 8001740 <_printf_i+0x178>
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	f022 0220 	bic.w	r2, r2, #32
 800173e:	6022      	str	r2, [r4, #0]
 8001740:	2210      	movs	r2, #16
 8001742:	e7b1      	b.n	80016a8 <_printf_i+0xe0>
 8001744:	4675      	mov	r5, lr
 8001746:	fbb3 f0f2 	udiv	r0, r3, r2
 800174a:	fb02 3310 	mls	r3, r2, r0, r3
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001754:	4603      	mov	r3, r0
 8001756:	2800      	cmp	r0, #0
 8001758:	d1f5      	bne.n	8001746 <_printf_i+0x17e>
 800175a:	e7b7      	b.n	80016cc <_printf_i+0x104>
 800175c:	6808      	ldr	r0, [r1, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001764:	6949      	ldr	r1, [r1, #20]
 8001766:	d004      	beq.n	8001772 <_printf_i+0x1aa>
 8001768:	1d10      	adds	r0, r2, #4
 800176a:	6018      	str	r0, [r3, #0]
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	6019      	str	r1, [r3, #0]
 8001770:	e007      	b.n	8001782 <_printf_i+0x1ba>
 8001772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001776:	f102 0004 	add.w	r0, r2, #4
 800177a:	6018      	str	r0, [r3, #0]
 800177c:	6813      	ldr	r3, [r2, #0]
 800177e:	d0f6      	beq.n	800176e <_printf_i+0x1a6>
 8001780:	8019      	strh	r1, [r3, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	4675      	mov	r5, lr
 8001786:	6123      	str	r3, [r4, #16]
 8001788:	e7b1      	b.n	80016ee <_printf_i+0x126>
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	1d11      	adds	r1, r2, #4
 800178e:	6019      	str	r1, [r3, #0]
 8001790:	6815      	ldr	r5, [r2, #0]
 8001792:	2100      	movs	r1, #0
 8001794:	6862      	ldr	r2, [r4, #4]
 8001796:	4628      	mov	r0, r5
 8001798:	f000 f846 	bl	8001828 <memchr>
 800179c:	b108      	cbz	r0, 80017a2 <_printf_i+0x1da>
 800179e:	1b40      	subs	r0, r0, r5
 80017a0:	6060      	str	r0, [r4, #4]
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	6123      	str	r3, [r4, #16]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017ac:	e79f      	b.n	80016ee <_printf_i+0x126>
 80017ae:	6923      	ldr	r3, [r4, #16]
 80017b0:	462a      	mov	r2, r5
 80017b2:	4639      	mov	r1, r7
 80017b4:	4630      	mov	r0, r6
 80017b6:	47c0      	blx	r8
 80017b8:	3001      	adds	r0, #1
 80017ba:	d0a2      	beq.n	8001702 <_printf_i+0x13a>
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	079b      	lsls	r3, r3, #30
 80017c0:	d507      	bpl.n	80017d2 <_printf_i+0x20a>
 80017c2:	2500      	movs	r5, #0
 80017c4:	f104 0919 	add.w	r9, r4, #25
 80017c8:	68e3      	ldr	r3, [r4, #12]
 80017ca:	9a03      	ldr	r2, [sp, #12]
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	429d      	cmp	r5, r3
 80017d0:	db05      	blt.n	80017de <_printf_i+0x216>
 80017d2:	68e0      	ldr	r0, [r4, #12]
 80017d4:	9b03      	ldr	r3, [sp, #12]
 80017d6:	4298      	cmp	r0, r3
 80017d8:	bfb8      	it	lt
 80017da:	4618      	movlt	r0, r3
 80017dc:	e793      	b.n	8001706 <_printf_i+0x13e>
 80017de:	2301      	movs	r3, #1
 80017e0:	464a      	mov	r2, r9
 80017e2:	4639      	mov	r1, r7
 80017e4:	4630      	mov	r0, r6
 80017e6:	47c0      	blx	r8
 80017e8:	3001      	adds	r0, #1
 80017ea:	d08a      	beq.n	8001702 <_printf_i+0x13a>
 80017ec:	3501      	adds	r5, #1
 80017ee:	e7eb      	b.n	80017c8 <_printf_i+0x200>
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1a7      	bne.n	8001744 <_printf_i+0x17c>
 80017f4:	780b      	ldrb	r3, [r1, #0]
 80017f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017fe:	e765      	b.n	80016cc <_printf_i+0x104>
 8001800:	08001c2a 	.word	0x08001c2a
 8001804:	08001c19 	.word	0x08001c19

08001808 <_sbrk_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	2300      	movs	r3, #0
 800180c:	4c05      	ldr	r4, [pc, #20]	; (8001824 <_sbrk_r+0x1c>)
 800180e:	4605      	mov	r5, r0
 8001810:	4608      	mov	r0, r1
 8001812:	6023      	str	r3, [r4, #0]
 8001814:	f7ff fb14 	bl	8000e40 <_sbrk>
 8001818:	1c43      	adds	r3, r0, #1
 800181a:	d102      	bne.n	8001822 <_sbrk_r+0x1a>
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	b103      	cbz	r3, 8001822 <_sbrk_r+0x1a>
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	20000154 	.word	0x20000154

08001828 <memchr>:
 8001828:	b510      	push	{r4, lr}
 800182a:	b2c9      	uxtb	r1, r1
 800182c:	4402      	add	r2, r0
 800182e:	4290      	cmp	r0, r2
 8001830:	4603      	mov	r3, r0
 8001832:	d101      	bne.n	8001838 <memchr+0x10>
 8001834:	2000      	movs	r0, #0
 8001836:	bd10      	pop	{r4, pc}
 8001838:	781c      	ldrb	r4, [r3, #0]
 800183a:	3001      	adds	r0, #1
 800183c:	428c      	cmp	r4, r1
 800183e:	d1f6      	bne.n	800182e <memchr+0x6>
 8001840:	4618      	mov	r0, r3
 8001842:	bd10      	pop	{r4, pc}

08001844 <memcpy>:
 8001844:	b510      	push	{r4, lr}
 8001846:	1e43      	subs	r3, r0, #1
 8001848:	440a      	add	r2, r1
 800184a:	4291      	cmp	r1, r2
 800184c:	d100      	bne.n	8001850 <memcpy+0xc>
 800184e:	bd10      	pop	{r4, pc}
 8001850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001858:	e7f7      	b.n	800184a <memcpy+0x6>

0800185a <memmove>:
 800185a:	4288      	cmp	r0, r1
 800185c:	b510      	push	{r4, lr}
 800185e:	eb01 0302 	add.w	r3, r1, r2
 8001862:	d803      	bhi.n	800186c <memmove+0x12>
 8001864:	1e42      	subs	r2, r0, #1
 8001866:	4299      	cmp	r1, r3
 8001868:	d10c      	bne.n	8001884 <memmove+0x2a>
 800186a:	bd10      	pop	{r4, pc}
 800186c:	4298      	cmp	r0, r3
 800186e:	d2f9      	bcs.n	8001864 <memmove+0xa>
 8001870:	1881      	adds	r1, r0, r2
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	42d3      	cmn	r3, r2
 8001876:	d100      	bne.n	800187a <memmove+0x20>
 8001878:	bd10      	pop	{r4, pc}
 800187a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800187e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001882:	e7f7      	b.n	8001874 <memmove+0x1a>
 8001884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001888:	f802 4f01 	strb.w	r4, [r2, #1]!
 800188c:	e7eb      	b.n	8001866 <memmove+0xc>

0800188e <__malloc_lock>:
 800188e:	4770      	bx	lr

08001890 <__malloc_unlock>:
 8001890:	4770      	bx	lr

08001892 <_realloc_r>:
 8001892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001894:	4607      	mov	r7, r0
 8001896:	4614      	mov	r4, r2
 8001898:	460e      	mov	r6, r1
 800189a:	b921      	cbnz	r1, 80018a6 <_realloc_r+0x14>
 800189c:	4611      	mov	r1, r2
 800189e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80018a2:	f7ff bc6b 	b.w	800117c <_malloc_r>
 80018a6:	b922      	cbnz	r2, 80018b2 <_realloc_r+0x20>
 80018a8:	f7ff fc1c 	bl	80010e4 <_free_r>
 80018ac:	4625      	mov	r5, r4
 80018ae:	4628      	mov	r0, r5
 80018b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b2:	f000 f814 	bl	80018de <_malloc_usable_size_r>
 80018b6:	4284      	cmp	r4, r0
 80018b8:	d90f      	bls.n	80018da <_realloc_r+0x48>
 80018ba:	4621      	mov	r1, r4
 80018bc:	4638      	mov	r0, r7
 80018be:	f7ff fc5d 	bl	800117c <_malloc_r>
 80018c2:	4605      	mov	r5, r0
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d0f2      	beq.n	80018ae <_realloc_r+0x1c>
 80018c8:	4631      	mov	r1, r6
 80018ca:	4622      	mov	r2, r4
 80018cc:	f7ff ffba 	bl	8001844 <memcpy>
 80018d0:	4631      	mov	r1, r6
 80018d2:	4638      	mov	r0, r7
 80018d4:	f7ff fc06 	bl	80010e4 <_free_r>
 80018d8:	e7e9      	b.n	80018ae <_realloc_r+0x1c>
 80018da:	4635      	mov	r5, r6
 80018dc:	e7e7      	b.n	80018ae <_realloc_r+0x1c>

080018de <_malloc_usable_size_r>:
 80018de:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80018e2:	2800      	cmp	r0, #0
 80018e4:	f1a0 0004 	sub.w	r0, r0, #4
 80018e8:	bfbc      	itt	lt
 80018ea:	580b      	ldrlt	r3, [r1, r0]
 80018ec:	18c0      	addlt	r0, r0, r3
 80018ee:	4770      	bx	lr

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr

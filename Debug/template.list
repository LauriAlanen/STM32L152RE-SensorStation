
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000110c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012b4  080012b4  000112b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080012bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000006c  08001328  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000cc  08001328  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000578a  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f8e  00000000  00000000  0002581f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002b0  00000000  00000000  000267b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00026a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001985  00000000  00000000  00026c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001180  00000000  00000000  000285ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002976d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000b78  00000000  00000000  000297ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001230 	.word	0x08001230

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	08001230 	.word	0x08001230

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 f9b4 	bl	80004f8 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <MODBUS_CheckAdress>:

	return wCRCWord;
}

uint8_t MODBUS_CheckAdress(uint8_t *c)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SLAVE_COUNT; ++i)
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	e016      	b.n	8000200 <MODBUS_CheckAdress+0x3c>
	{
		if (MODBUS_Slaves[i] == *c)
 80001d2:	4a15      	ldr	r2, [pc, #84]	; (8000228 <MODBUS_CheckAdress+0x64>)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	4413      	add	r3, r2
 80001d8:	781a      	ldrb	r2, [r3, #0]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d10b      	bne.n	80001fa <MODBUS_CheckAdress+0x36>
		{
			mFlag = 1;
 80001e2:	4b12      	ldr	r3, [pc, #72]	; (800022c <MODBUS_CheckAdress+0x68>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR |= GPIO_ODR_ODR_5; //0010 0000 set bit 5. p186
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f043 0320 	orr.w	r3, r3, #32
 80001f2:	6153      	str	r3, [r2, #20]

			return *c;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	e010      	b.n	800021c <MODBUS_CheckAdress+0x58>
	for (int i = 0; i < SLAVE_COUNT; ++i)
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2b02      	cmp	r3, #2
 8000204:	dde5      	ble.n	80001d2 <MODBUS_CheckAdress+0xe>
		}
	}

	if (mFlag != 1)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <MODBUS_CheckAdress+0x68>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d005      	beq.n	800021a <MODBUS_CheckAdress+0x56>
	{
		GPIOA->ODR &= ~GPIO_ODR_ODR_5; //0000 0000 clear bit 5. p186
 800020e:	4a08      	ldr	r2, [pc, #32]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <MODBUS_CheckAdress+0x6c>)
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	f023 0320 	bic.w	r3, r3, #32
 8000218:	6153      	str	r3, [r2, #20]
	}

	return 0;
 800021a:	2300      	movs	r3, #0
}
 800021c:	4618      	mov	r0, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	20000088 	.word	0x20000088
 8000230:	40020000 	.word	0x40020000

08000234 <MODBUS_ProcessFrame>:


void MODBUS_ProcessFrame()
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
	uint8_t MODBUS_Frame[MODBUS_FRAME_SIZE];
	uint8_t buffer[100];
	uint8_t c = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (mFlag == 1)
 8000240:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <MODBUS_ProcessFrame+0xb8>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d14d      	bne.n	80002e4 <MODBUS_ProcessFrame+0xb0>
	{
		USART2->CR1 &= ~USART_CR1_RXNEIE;			//enable RX interrupt
 8000248:	4a29      	ldr	r2, [pc, #164]	; (80002f0 <MODBUS_ProcessFrame+0xbc>)
 800024a:	4b29      	ldr	r3, [pc, #164]	; (80002f0 <MODBUS_ProcessFrame+0xbc>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	f023 0320 	bic.w	r3, r3, #32
 8000252:	60d3      	str	r3, [r2, #12]
		MODBUS_Frame[0] = selected_slave;
 8000254:	4b27      	ldr	r3, [pc, #156]	; (80002f4 <MODBUS_ProcessFrame+0xc0>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		for (uint8_t frame_index = 1; frame_index < MODBUS_FRAME_SIZE; ++frame_index)
 800025c:	2301      	movs	r3, #1
 800025e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000262:	e012      	b.n	800028a <MODBUS_ProcessFrame+0x56>
		{
			c = USART2_read();
 8000264:	f000 f8f8 	bl	8000458 <USART2_read>
 8000268:	4603      	mov	r3, r0
 800026a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			MODBUS_Frame[frame_index] = c;
 800026e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000272:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000276:	4413      	add	r3, r2
 8000278:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800027c:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t frame_index = 1; frame_index < MODBUS_FRAME_SIZE; ++frame_index)
 8000280:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000284:	3301      	adds	r3, #1
 8000286:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800028a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800028e:	2b07      	cmp	r3, #7
 8000290:	d9e8      	bls.n	8000264 <MODBUS_ProcessFrame+0x30>
		}

		snprintf(buffer, 20, "%s", "Generated frame:");
 8000292:	463b      	mov	r3, r7
 8000294:	4a18      	ldr	r2, [pc, #96]	; (80002f8 <MODBUS_ProcessFrame+0xc4>)
 8000296:	461c      	mov	r4, r3
 8000298:	4615      	mov	r5, r2
 800029a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029e:	682b      	ldr	r3, [r5, #0]
 80002a0:	7023      	strb	r3, [r4, #0]
		USART2_write_buffer(buffer);
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <USART2_write_buffer>
		for (int i = 0; i < MODBUS_FRAME_SIZE; ++i)
 80002aa:	2300      	movs	r3, #0
 80002ac:	673b      	str	r3, [r7, #112]	; 0x70
 80002ae:	e010      	b.n	80002d2 <MODBUS_ProcessFrame+0x9e>
		{
			snprintf(buffer, 4, "%.2x", MODBUS_Frame[i]);
 80002b0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80002b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002b6:	4413      	add	r3, r2
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <MODBUS_ProcessFrame+0xc8>)
 80002be:	2104      	movs	r1, #4
 80002c0:	f000 fb7c 	bl	80009bc <sniprintf>
			USART2_write_buffer(buffer);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f8f4 	bl	80004b4 <USART2_write_buffer>
		for (int i = 0; i < MODBUS_FRAME_SIZE; ++i)
 80002cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002ce:	3301      	adds	r3, #1
 80002d0:	673b      	str	r3, [r7, #112]	; 0x70
 80002d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002d4:	2b07      	cmp	r3, #7
 80002d6:	ddeb      	ble.n	80002b0 <MODBUS_ProcessFrame+0x7c>
		}
		USART2->CR1 |= USART_CR1_RXNEIE;
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <MODBUS_ProcessFrame+0xbc>)
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <MODBUS_ProcessFrame+0xbc>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	60d3      	str	r3, [r2, #12]
	}
}
 80002e4:	bf00      	nop
 80002e6:	3778      	adds	r7, #120	; 0x78
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bdb0      	pop	{r4, r5, r7, pc}
 80002ec:	20000088 	.word	0x20000088
 80002f0:	40004400 	.word	0x40004400
 80002f4:	20000089 	.word	0x20000089
 80002f8:	08001248 	.word	0x08001248
 80002fc:	0800125c 	.word	0x0800125c

08000300 <MODBUS_IRQHandler>:

void MODBUS_IRQHandler()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b09a      	sub	sp, #104	; 0x68
 8000304:	af00      	add	r7, sp, #0
	uint8_t c = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t buffer[100];

	if(USART2->SR & 0x0020)
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <MODBUS_IRQHandler+0x44>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d010      	beq.n	800033a <MODBUS_IRQHandler+0x3a>
	{
		c = USART2->DR;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MODBUS_IRQHandler+0x44>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		mFlag = 2;
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MODBUS_IRQHandler+0x48>)
 8000324:	2202      	movs	r2, #2
 8000326:	701a      	strb	r2, [r3, #0]
		selected_slave = MODBUS_CheckAdress(&c);
 8000328:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff49 	bl	80001c4 <MODBUS_CheckAdress>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <MODBUS_IRQHandler+0x4c>)
 8000338:	701a      	strb	r2, [r3, #0]
	}
}
 800033a:	bf00      	nop
 800033c:	3768      	adds	r7, #104	; 0x68
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40004400 	.word	0x40004400
 8000348:	20000088 	.word	0x20000088
 800034c:	20000089 	.word	0x20000089

08000350 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <TIM2_Init+0x3c>)
 8000356:	4b0d      	ldr	r3, [pc, #52]	; (800038c <TIM2_Init+0x3c>)
 8000358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 8000360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000364:	221f      	movs	r2, #31
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 8000372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6013      	str	r3, [r2, #0]
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40023800 	.word	0x40023800

08000390 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039a:	4908      	ldr	r1, [pc, #32]	; (80003bc <NVIC_EnableIRQ+0x2c>)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	f002 021f 	and.w	r2, r2, #31
 80003a8:	2001      	movs	r0, #1
 80003aa:	fa00 f202 	lsl.w	r2, r0, r2
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 80003c4:	4a21      	ldr	r2, [pc, #132]	; (800044c <USART2_init+0x8c>)
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <USART2_init+0x8c>)
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ce:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 80003d0:	4a1e      	ldr	r2, [pc, #120]	; (800044c <USART2_init+0x8c>)
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <USART2_init+0x8c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <USART2_init+0x90>)
 80003de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003e2:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <USART2_init+0x90>)
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <USART2_init+0x90>)
 80003e8:	6a1b      	ldr	r3, [r3, #32]
 80003ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003ee:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <USART2_init+0x90>)
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <USART2_init+0x90>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 80003fc:	4a14      	ldr	r2, [pc, #80]	; (8000450 <USART2_init+0x90>)
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <USART2_init+0x90>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000406:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <USART2_init+0x94>)
 800040a:	f640 5205 	movw	r2, #3333	; 0xd05
 800040e:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 8000410:	4a10      	ldr	r2, [pc, #64]	; (8000454 <USART2_init+0x94>)
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <USART2_init+0x94>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <USART2_init+0x94>)
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <USART2_init+0x94>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <USART2_init+0x94>)
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <USART2_init+0x94>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000432:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <USART2_init+0x94>)
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <USART2_init+0x94>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 8000440:	2026      	movs	r0, #38	; 0x26
 8000442:	f7ff ffa5 	bl	8000390 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40023800 	.word	0x40023800
 8000450:	40020000 	.word	0x40020000
 8000454:	40004400 	.word	0x40004400

08000458 <USART2_read>:

char USART2_read()
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
	char data=0;
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]
	//wait while RX buffer is data is ready to be read
	while(!(USART2->SR&0x0020)){} 	//Bit 5 RXNE: Read data register not empty
 8000462:	bf00      	nop
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <USART2_read+0x2c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <USART2_read+0xc>
		data=USART2->DR;			//p739
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <USART2_read+0x2c>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	71fb      	strb	r3, [r7, #7]
		return data;
 8000476:	79fb      	ldrb	r3, [r7, #7]
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40004400 	.word	0x40004400

08000488 <USART2_write>:

void USART2_write(char data)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & 0x0080)){} 	//TXE: Transmit data register empty. p736-737
 8000492:	bf00      	nop
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <USART2_write+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <USART2_write+0xc>
	USART2->DR = (data);		//p739
 80004a0:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <USART2_write+0x28>)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	6053      	str	r3, [r2, #4]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40004400 	.word	0x40004400

080004b4 <USART2_write_buffer>:

void USART2_write_buffer(char* buffer)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 80004bc:	e007      	b.n	80004ce <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ffe0 	bl	8000488 <USART2_write>
		buffer++;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3301      	adds	r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1f3      	bne.n	80004be <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 80004d6:	200d      	movs	r0, #13
 80004d8:	f7ff ffd6 	bl	8000488 <USART2_write>
	USART2_write('\n');
 80004dc:	200a      	movs	r0, #10
 80004de:	f7ff ffd3 	bl	8000488 <USART2_write>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 80004ee:	f7ff ff07 	bl	8000300 <MODBUS_IRQHandler>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <DHT22_IRQHandler>:
{
	return;
}

void DHT22_IRQHandler()
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 80004fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <DHT22_IRQHandler+0xa4>)
 8000508:	2203      	movs	r2, #3
 800050a:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <DHT22_IRQHandler+0xa8>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000514:	2b00      	cmp	r3, #0
 8000516:	d009      	beq.n	800052c <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000518:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <DHT22_IRQHandler+0xac>)
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <DHT22_IRQHandler+0xa8>)
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <DHT22_IRQHandler+0xa8>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	e025      	b.n	8000578 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <DHT22_IRQHandler+0xac>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	429a      	cmp	r2, r3
 8000534:	d305      	bcc.n	8000542 <DHT22_IRQHandler+0x4a>
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <DHT22_IRQHandler+0xac>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	88fa      	ldrh	r2, [r7, #6]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	b29b      	uxth	r3, r3
 8000540:	e006      	b.n	8000550 <DHT22_IRQHandler+0x58>
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <DHT22_IRQHandler+0xac>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	88fa      	ldrh	r2, [r7, #6]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	3b01      	subs	r3, #1
 800054e:	b29b      	uxth	r3, r3
 8000550:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <DHT22_IRQHandler+0xb0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	88bb      	ldrh	r3, [r7, #4]
 800055a:	b2d9      	uxtb	r1, r3
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <DHT22_IRQHandler+0xb4>)
 800055e:	5499      	strb	r1, [r3, r2]
		index++;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <DHT22_IRQHandler+0xb0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <DHT22_IRQHandler+0xb0>)
 800056a:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <DHT22_IRQHandler+0xa8>)
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <DHT22_IRQHandler+0xa8>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f023 0320 	bic.w	r3, r3, #32
 8000576:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <DHT22_IRQHandler+0xb0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b28      	cmp	r3, #40	; 0x28
 800057e:	d905      	bls.n	800058c <DHT22_IRQHandler+0x94>
	{
		index = 0;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <DHT22_IRQHandler+0xb0>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <DHT22_IRQHandler+0xa4>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <DHT22_IRQHandler+0xb8>)
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	615a      	str	r2, [r3, #20]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	200000b5 	.word	0x200000b5
 80005a0:	40020000 	.word	0x40020000
 80005a4:	200000b6 	.word	0x200000b6
 80005a8:	200000b8 	.word	0x200000b8
 80005ac:	2000008c 	.word	0x2000008c
 80005b0:	40010400 	.word	0x40010400

080005b4 <delay_ms>:
		  i++;
	  }
}

void delay_ms(unsigned long delay)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <delay_ms+0x48>)
 80005c2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80005c6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <delay_ms+0x48>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <delay_ms+0x48>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 80005d4:	e009      	b.n	80005ea <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 80005d6:	bf00      	nop
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <delay_ms+0x48>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <delay_ms+0x24>
		i++;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3f1      	bcc.n	80005d6 <delay_ms+0x22>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	e000e010 	.word	0xe000e010

08000600 <SetSysClock>:
void SetSysClock(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 800060a:	4a3d      	ldr	r2, [pc, #244]	; (8000700 <SetSysClock+0x100>)
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <SetSysClock+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000616:	bf00      	nop
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <SetSysClock+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f9      	beq.n	8000618 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <SetSysClock+0x100>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <SetSysClock+0x36>
  {
    status = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	e001      	b.n	800063a <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10b      	bne.n	8000658 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000640:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <SetSysClock+0x100>)
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <SetSysClock+0x100>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800064a:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <SetSysClock+0x100>)
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SetSysClock+0x100>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000656:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000658:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <SetSysClock+0x104>)
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <SetSysClock+0x104>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SetSysClock+0x104>)
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SetSysClock+0x104>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000670:	4a24      	ldr	r2, [pc, #144]	; (8000704 <SetSysClock+0x104>)
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <SetSysClock+0x104>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SetSysClock+0x100>)
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <SetSysClock+0x100>)
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SetSysClock+0x108>)
 800068a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068e:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000690:	bf00      	nop
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <SetSysClock+0x108>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f9      	bne.n	8000692 <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <SetSysClock+0x100>)
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <SetSysClock+0x100>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006a8:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <SetSysClock+0x100>)
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <SetSysClock+0x100>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006b4:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <SetSysClock+0x100>)
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SetSysClock+0x100>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006c0:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <SetSysClock+0x100>)
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <SetSysClock+0x100>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006cc:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 80006ce:	bf00      	nop
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <SetSysClock+0x100>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <SetSysClock+0x100>)
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <SetSysClock+0x100>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f043 0303 	orr.w	r3, r3, #3
 80006e6:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 80006e8:	bf00      	nop
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SetSysClock+0x100>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	f003 030c 	and.w	r3, r3, #12
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <SetSysClock+0xea>
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40023800 	.word	0x40023800
 8000704:	40023c00 	.word	0x40023c00
 8000708:	40007000 	.word	0x40007000

0800070c <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0
	char buffer[BUFFER_SIZE];

	// CMSIS Initializations

	SetSysClock();
 8000712:	f7ff ff75 	bl	8000600 <SetSysClock>
	SystemCoreClockUpdate();
 8000716:	f000 f885 	bl	8000824 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 800071a:	f7ff fd3d 	bl	8000198 <GPIO_init>
	USART2_init();
 800071e:	f7ff fe4f 	bl	80003c0 <USART2_init>
	TIM2_Init();
 8000722:	f7ff fe15 	bl	8000350 <TIM2_Init>
	//DHT22_init();
	//ADC_init();

	while (1)
	{
		MODBUS_ProcessFrame();
 8000726:	f7ff fd85 	bl	8000234 <MODBUS_ProcessFrame>
		delay_ms(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f7ff ff41 	bl	80005b4 <delay_ms>
		MODBUS_ProcessFrame();
 8000732:	e7f8      	b.n	8000726 <main+0x1a>

08000734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000734:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000736:	e003      	b.n	8000740 <LoopCopyDataInit>

08000738 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800073a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800073c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800073e:	3104      	adds	r1, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000744:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000746:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000748:	d3f6      	bcc.n	8000738 <CopyDataInit>
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800074c:	e002      	b.n	8000754 <LoopFillZerobss>

0800074e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000750:	f842 3b04 	str.w	r3, [r2], #4

08000754 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000756:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000758:	d3f9      	bcc.n	800074e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075a:	f000 f82f 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f000 f909 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff ffd3 	bl	800070c <main>
  bx lr
 8000766:	4770      	bx	lr
  ldr r3, =_sidata
 8000768:	080012bc 	.word	0x080012bc
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000770:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000774:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000778:	200000cc 	.word	0x200000cc

0800077c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_IRQHandler>
	...

08000780 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <_sbrk+0x34>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x16>
		heap_end = & end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x34>)
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <_sbrk+0x38>)
 8000794:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x34>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <_sbrk+0x34>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <_sbrk+0x34>)
 80007a6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80007a8:	68fb      	ldr	r3, [r7, #12]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	200000bc 	.word	0x200000bc
 80007b8:	200000cc 	.word	0x200000cc

080007bc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <SystemInit+0x5c>)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <SystemInit+0x5c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80007cc:	4912      	ldr	r1, [pc, #72]	; (8000818 <SystemInit+0x5c>)
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <SystemInit+0x5c>)
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <SystemInit+0x60>)
 80007d4:	4013      	ands	r3, r2
 80007d6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <SystemInit+0x5c>)
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <SystemInit+0x5c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80007e2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80007e6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <SystemInit+0x5c>)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <SystemInit+0x5c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <SystemInit+0x5c>)
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <SystemInit+0x5c>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80007fe:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SystemInit+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SystemInit+0x64>)
 8000808:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800080c:	609a      	str	r2, [r3, #8]
#endif
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	88ffc00c 	.word	0x88ffc00c
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f003 030c 	and.w	r3, r3, #12
 8000846:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d863      	bhi.n	8000916 <SystemCoreClockUpdate+0xf2>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <SystemCoreClockUpdate+0x30>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000889 	.word	0x08000889
 8000858:	08000917 	.word	0x08000917
 800085c:	08000917 	.word	0x08000917
 8000860:	08000917 	.word	0x08000917
 8000864:	080008a9 	.word	0x080008a9
 8000868:	08000917 	.word	0x08000917
 800086c:	08000917 	.word	0x08000917
 8000870:	08000917 	.word	0x08000917
 8000874:	080008b1 	.word	0x080008b1
 8000878:	08000917 	.word	0x08000917
 800087c:	08000917 	.word	0x08000917
 8000880:	08000917 	.word	0x08000917
 8000884:	080008b9 	.word	0x080008b9
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000888:	4b35      	ldr	r3, [pc, #212]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	0b5b      	lsrs	r3, r3, #13
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <SystemCoreClockUpdate+0x140>)
 80008a4:	601a      	str	r2, [r3, #0]
      break;
 80008a6:	e046      	b.n	8000936 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <SystemCoreClockUpdate+0x140>)
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <SystemCoreClockUpdate+0x144>)
 80008ac:	601a      	str	r2, [r3, #0]
      break;
 80008ae:	e042      	b.n	8000936 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <SystemCoreClockUpdate+0x140>)
 80008b2:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <SystemCoreClockUpdate+0x144>)
 80008b4:	601a      	str	r2, [r3, #0]
      break;
 80008b6:	e03e      	b.n	8000936 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008c0:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008ca:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <SystemCoreClockUpdate+0x148>)
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	0d9b      	lsrs	r3, r3, #22
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e6:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <SystemCoreClockUpdate+0x144>)
 80008f2:	fb02 f203 	mul.w	r2, r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <SystemCoreClockUpdate+0x140>)
 80008fe:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000900:	e019      	b.n	8000936 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <SystemCoreClockUpdate+0x144>)
 8000906:	fb02 f203 	mul.w	r2, r2, r3
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <SystemCoreClockUpdate+0x140>)
 8000912:	6013      	str	r3, [r2, #0]
      break;
 8000914:	e00f      	b.n	8000936 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	0b5b      	lsrs	r3, r3, #13
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	461a      	mov	r2, r3
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <SystemCoreClockUpdate+0x140>)
 8000932:	601a      	str	r2, [r3, #0]
      break;
 8000934:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SystemCoreClockUpdate+0x13c>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <SystemCoreClockUpdate+0x14c>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <SystemCoreClockUpdate+0x140>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <SystemCoreClockUpdate+0x140>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	20000004 	.word	0x20000004
 8000968:	007a1200 	.word	0x007a1200
 800096c:	08001264 	.word	0x08001264
 8000970:	08001270 	.word	0x08001270

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	2500      	movs	r5, #0
 8000978:	4e0c      	ldr	r6, [pc, #48]	; (80009ac <__libc_init_array+0x38>)
 800097a:	4c0d      	ldr	r4, [pc, #52]	; (80009b0 <__libc_init_array+0x3c>)
 800097c:	1ba4      	subs	r4, r4, r6
 800097e:	10a4      	asrs	r4, r4, #2
 8000980:	42a5      	cmp	r5, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	f000 fc54 	bl	8001230 <_init>
 8000988:	2500      	movs	r5, #0
 800098a:	4e0a      	ldr	r6, [pc, #40]	; (80009b4 <__libc_init_array+0x40>)
 800098c:	4c0a      	ldr	r4, [pc, #40]	; (80009b8 <__libc_init_array+0x44>)
 800098e:	1ba4      	subs	r4, r4, r6
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	42a5      	cmp	r5, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800099c:	4798      	blx	r3
 800099e:	3501      	adds	r5, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a6:	4798      	blx	r3
 80009a8:	3501      	adds	r5, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	080012b4 	.word	0x080012b4
 80009b0:	080012b4 	.word	0x080012b4
 80009b4:	080012b4 	.word	0x080012b4
 80009b8:	080012b8 	.word	0x080012b8

080009bc <sniprintf>:
 80009bc:	b40c      	push	{r2, r3}
 80009be:	b530      	push	{r4, r5, lr}
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <sniprintf+0x64>)
 80009c2:	1e0c      	subs	r4, r1, #0
 80009c4:	b09d      	sub	sp, #116	; 0x74
 80009c6:	681d      	ldr	r5, [r3, #0]
 80009c8:	da08      	bge.n	80009dc <sniprintf+0x20>
 80009ca:	238b      	movs	r3, #139	; 0x8b
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	602b      	str	r3, [r5, #0]
 80009d2:	b01d      	add	sp, #116	; 0x74
 80009d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80009d8:	b002      	add	sp, #8
 80009da:	4770      	bx	lr
 80009dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80009e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80009e4:	bf0c      	ite	eq
 80009e6:	4623      	moveq	r3, r4
 80009e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80009ec:	9304      	str	r3, [sp, #16]
 80009ee:	9307      	str	r3, [sp, #28]
 80009f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f4:	9002      	str	r0, [sp, #8]
 80009f6:	9006      	str	r0, [sp, #24]
 80009f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80009fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80009fe:	ab21      	add	r3, sp, #132	; 0x84
 8000a00:	a902      	add	r1, sp, #8
 8000a02:	4628      	mov	r0, r5
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	f000 f913 	bl	8000c30 <_svfiprintf_r>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	bfbc      	itt	lt
 8000a0e:	238b      	movlt	r3, #139	; 0x8b
 8000a10:	602b      	strlt	r3, [r5, #0]
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d0dd      	beq.n	80009d2 <sniprintf+0x16>
 8000a16:	2200      	movs	r2, #0
 8000a18:	9b02      	ldr	r3, [sp, #8]
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e7d9      	b.n	80009d2 <sniprintf+0x16>
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <_free_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d043      	beq.n	8000ab4 <_free_r+0x90>
 8000a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a30:	1f0c      	subs	r4, r1, #4
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bfb8      	it	lt
 8000a36:	18e4      	addlt	r4, r4, r3
 8000a38:	f000 fbc9 	bl	80011ce <__malloc_lock>
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <_free_r+0x94>)
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	4610      	mov	r0, r2
 8000a42:	b933      	cbnz	r3, 8000a52 <_free_r+0x2e>
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	6014      	str	r4, [r2, #0]
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a4e:	f000 bbbf 	b.w	80011d0 <__malloc_unlock>
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	d90b      	bls.n	8000a6e <_free_r+0x4a>
 8000a56:	6821      	ldr	r1, [r4, #0]
 8000a58:	1862      	adds	r2, r4, r1
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	bf01      	itttt	eq
 8000a5e:	681a      	ldreq	r2, [r3, #0]
 8000a60:	685b      	ldreq	r3, [r3, #4]
 8000a62:	1852      	addeq	r2, r2, r1
 8000a64:	6022      	streq	r2, [r4, #0]
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	6004      	str	r4, [r0, #0]
 8000a6a:	e7ed      	b.n	8000a48 <_free_r+0x24>
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	b10a      	cbz	r2, 8000a76 <_free_r+0x52>
 8000a72:	42a2      	cmp	r2, r4
 8000a74:	d9fa      	bls.n	8000a6c <_free_r+0x48>
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	1858      	adds	r0, r3, r1
 8000a7a:	42a0      	cmp	r0, r4
 8000a7c:	d10b      	bne.n	8000a96 <_free_r+0x72>
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	4401      	add	r1, r0
 8000a82:	1858      	adds	r0, r3, r1
 8000a84:	4282      	cmp	r2, r0
 8000a86:	6019      	str	r1, [r3, #0]
 8000a88:	d1de      	bne.n	8000a48 <_free_r+0x24>
 8000a8a:	6810      	ldr	r0, [r2, #0]
 8000a8c:	6852      	ldr	r2, [r2, #4]
 8000a8e:	4401      	add	r1, r0
 8000a90:	6019      	str	r1, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	e7d8      	b.n	8000a48 <_free_r+0x24>
 8000a96:	d902      	bls.n	8000a9e <_free_r+0x7a>
 8000a98:	230c      	movs	r3, #12
 8000a9a:	602b      	str	r3, [r5, #0]
 8000a9c:	e7d4      	b.n	8000a48 <_free_r+0x24>
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	1821      	adds	r1, r4, r0
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	bf01      	itttt	eq
 8000aa6:	6811      	ldreq	r1, [r2, #0]
 8000aa8:	6852      	ldreq	r2, [r2, #4]
 8000aaa:	1809      	addeq	r1, r1, r0
 8000aac:	6021      	streq	r1, [r4, #0]
 8000aae:	6062      	str	r2, [r4, #4]
 8000ab0:	605c      	str	r4, [r3, #4]
 8000ab2:	e7c9      	b.n	8000a48 <_free_r+0x24>
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000c0 	.word	0x200000c0

08000abc <_malloc_r>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	1ccd      	adds	r5, r1, #3
 8000ac0:	f025 0503 	bic.w	r5, r5, #3
 8000ac4:	3508      	adds	r5, #8
 8000ac6:	2d0c      	cmp	r5, #12
 8000ac8:	bf38      	it	cc
 8000aca:	250c      	movcc	r5, #12
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	4606      	mov	r6, r0
 8000ad0:	db01      	blt.n	8000ad6 <_malloc_r+0x1a>
 8000ad2:	42a9      	cmp	r1, r5
 8000ad4:	d903      	bls.n	8000ade <_malloc_r+0x22>
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	6033      	str	r3, [r6, #0]
 8000ada:	2000      	movs	r0, #0
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	f000 fb76 	bl	80011ce <__malloc_lock>
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <_malloc_r+0xb4>)
 8000ae4:	6814      	ldr	r4, [r2, #0]
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	b991      	cbnz	r1, 8000b10 <_malloc_r+0x54>
 8000aea:	4c22      	ldr	r4, [pc, #136]	; (8000b74 <_malloc_r+0xb8>)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	b91b      	cbnz	r3, 8000af8 <_malloc_r+0x3c>
 8000af0:	4630      	mov	r0, r6
 8000af2:	f000 fb29 	bl	8001148 <_sbrk_r>
 8000af6:	6020      	str	r0, [r4, #0]
 8000af8:	4629      	mov	r1, r5
 8000afa:	4630      	mov	r0, r6
 8000afc:	f000 fb24 	bl	8001148 <_sbrk_r>
 8000b00:	1c43      	adds	r3, r0, #1
 8000b02:	d126      	bne.n	8000b52 <_malloc_r+0x96>
 8000b04:	230c      	movs	r3, #12
 8000b06:	4630      	mov	r0, r6
 8000b08:	6033      	str	r3, [r6, #0]
 8000b0a:	f000 fb61 	bl	80011d0 <__malloc_unlock>
 8000b0e:	e7e4      	b.n	8000ada <_malloc_r+0x1e>
 8000b10:	680b      	ldr	r3, [r1, #0]
 8000b12:	1b5b      	subs	r3, r3, r5
 8000b14:	d41a      	bmi.n	8000b4c <_malloc_r+0x90>
 8000b16:	2b0b      	cmp	r3, #11
 8000b18:	d90f      	bls.n	8000b3a <_malloc_r+0x7e>
 8000b1a:	600b      	str	r3, [r1, #0]
 8000b1c:	18cc      	adds	r4, r1, r3
 8000b1e:	50cd      	str	r5, [r1, r3]
 8000b20:	4630      	mov	r0, r6
 8000b22:	f000 fb55 	bl	80011d0 <__malloc_unlock>
 8000b26:	f104 000b 	add.w	r0, r4, #11
 8000b2a:	1d23      	adds	r3, r4, #4
 8000b2c:	f020 0007 	bic.w	r0, r0, #7
 8000b30:	1ac3      	subs	r3, r0, r3
 8000b32:	d01b      	beq.n	8000b6c <_malloc_r+0xb0>
 8000b34:	425a      	negs	r2, r3
 8000b36:	50e2      	str	r2, [r4, r3]
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
 8000b3a:	428c      	cmp	r4, r1
 8000b3c:	bf0b      	itete	eq
 8000b3e:	6863      	ldreq	r3, [r4, #4]
 8000b40:	684b      	ldrne	r3, [r1, #4]
 8000b42:	6013      	streq	r3, [r2, #0]
 8000b44:	6063      	strne	r3, [r4, #4]
 8000b46:	bf18      	it	ne
 8000b48:	460c      	movne	r4, r1
 8000b4a:	e7e9      	b.n	8000b20 <_malloc_r+0x64>
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	6849      	ldr	r1, [r1, #4]
 8000b50:	e7ca      	b.n	8000ae8 <_malloc_r+0x2c>
 8000b52:	1cc4      	adds	r4, r0, #3
 8000b54:	f024 0403 	bic.w	r4, r4, #3
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d005      	beq.n	8000b68 <_malloc_r+0xac>
 8000b5c:	1a21      	subs	r1, r4, r0
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f000 faf2 	bl	8001148 <_sbrk_r>
 8000b64:	3001      	adds	r0, #1
 8000b66:	d0cd      	beq.n	8000b04 <_malloc_r+0x48>
 8000b68:	6025      	str	r5, [r4, #0]
 8000b6a:	e7d9      	b.n	8000b20 <_malloc_r+0x64>
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000c0 	.word	0x200000c0
 8000b74:	200000c4 	.word	0x200000c4

08000b78 <__ssputs_r>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	688e      	ldr	r6, [r1, #8]
 8000b7e:	4682      	mov	sl, r0
 8000b80:	429e      	cmp	r6, r3
 8000b82:	460c      	mov	r4, r1
 8000b84:	4691      	mov	r9, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	d835      	bhi.n	8000bf6 <__ssputs_r+0x7e>
 8000b8a:	898a      	ldrh	r2, [r1, #12]
 8000b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b90:	d031      	beq.n	8000bf6 <__ssputs_r+0x7e>
 8000b92:	2302      	movs	r3, #2
 8000b94:	6825      	ldr	r5, [r4, #0]
 8000b96:	6909      	ldr	r1, [r1, #16]
 8000b98:	1a6f      	subs	r7, r5, r1
 8000b9a:	6965      	ldr	r5, [r4, #20]
 8000b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ba0:	fb95 f5f3 	sdiv	r5, r5, r3
 8000ba4:	f108 0301 	add.w	r3, r8, #1
 8000ba8:	443b      	add	r3, r7
 8000baa:	429d      	cmp	r5, r3
 8000bac:	bf38      	it	cc
 8000bae:	461d      	movcc	r5, r3
 8000bb0:	0553      	lsls	r3, r2, #21
 8000bb2:	d531      	bpl.n	8000c18 <__ssputs_r+0xa0>
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	f7ff ff81 	bl	8000abc <_malloc_r>
 8000bba:	4606      	mov	r6, r0
 8000bbc:	b950      	cbnz	r0, 8000bd4 <__ssputs_r+0x5c>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	f8ca 3000 	str.w	r3, [sl]
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	81a3      	strh	r3, [r4, #12]
 8000bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd4:	463a      	mov	r2, r7
 8000bd6:	6921      	ldr	r1, [r4, #16]
 8000bd8:	f000 fad4 	bl	8001184 <memcpy>
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be6:	81a3      	strh	r3, [r4, #12]
 8000be8:	6126      	str	r6, [r4, #16]
 8000bea:	443e      	add	r6, r7
 8000bec:	6026      	str	r6, [r4, #0]
 8000bee:	4646      	mov	r6, r8
 8000bf0:	6165      	str	r5, [r4, #20]
 8000bf2:	1bed      	subs	r5, r5, r7
 8000bf4:	60a5      	str	r5, [r4, #8]
 8000bf6:	4546      	cmp	r6, r8
 8000bf8:	bf28      	it	cs
 8000bfa:	4646      	movcs	r6, r8
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	4632      	mov	r2, r6
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	f000 faca 	bl	800119a <memmove>
 8000c06:	68a3      	ldr	r3, [r4, #8]
 8000c08:	2000      	movs	r0, #0
 8000c0a:	1b9b      	subs	r3, r3, r6
 8000c0c:	60a3      	str	r3, [r4, #8]
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	441e      	add	r6, r3
 8000c12:	6026      	str	r6, [r4, #0]
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	462a      	mov	r2, r5
 8000c1a:	f000 fada 	bl	80011d2 <_realloc_r>
 8000c1e:	4606      	mov	r6, r0
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1e1      	bne.n	8000be8 <__ssputs_r+0x70>
 8000c24:	6921      	ldr	r1, [r4, #16]
 8000c26:	4650      	mov	r0, sl
 8000c28:	f7ff fefc 	bl	8000a24 <_free_r>
 8000c2c:	e7c7      	b.n	8000bbe <__ssputs_r+0x46>
	...

08000c30 <_svfiprintf_r>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	b09d      	sub	sp, #116	; 0x74
 8000c36:	9303      	str	r3, [sp, #12]
 8000c38:	898b      	ldrh	r3, [r1, #12]
 8000c3a:	4680      	mov	r8, r0
 8000c3c:	061c      	lsls	r4, r3, #24
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4616      	mov	r6, r2
 8000c42:	d50f      	bpl.n	8000c64 <_svfiprintf_r+0x34>
 8000c44:	690b      	ldr	r3, [r1, #16]
 8000c46:	b96b      	cbnz	r3, 8000c64 <_svfiprintf_r+0x34>
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	f7ff ff37 	bl	8000abc <_malloc_r>
 8000c4e:	6028      	str	r0, [r5, #0]
 8000c50:	6128      	str	r0, [r5, #16]
 8000c52:	b928      	cbnz	r0, 8000c60 <_svfiprintf_r+0x30>
 8000c54:	230c      	movs	r3, #12
 8000c56:	f8c8 3000 	str.w	r3, [r8]
 8000c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5e:	e0c4      	b.n	8000dea <_svfiprintf_r+0x1ba>
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	616b      	str	r3, [r5, #20]
 8000c64:	2300      	movs	r3, #0
 8000c66:	9309      	str	r3, [sp, #36]	; 0x24
 8000c68:	2320      	movs	r3, #32
 8000c6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c6e:	2330      	movs	r3, #48	; 0x30
 8000c70:	f04f 0b01 	mov.w	fp, #1
 8000c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c78:	4637      	mov	r7, r6
 8000c7a:	463c      	mov	r4, r7
 8000c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d13c      	bne.n	8000cfe <_svfiprintf_r+0xce>
 8000c84:	ebb7 0a06 	subs.w	sl, r7, r6
 8000c88:	d00b      	beq.n	8000ca2 <_svfiprintf_r+0x72>
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	4632      	mov	r2, r6
 8000c8e:	4629      	mov	r1, r5
 8000c90:	4640      	mov	r0, r8
 8000c92:	f7ff ff71 	bl	8000b78 <__ssputs_r>
 8000c96:	3001      	adds	r0, #1
 8000c98:	f000 80a2 	beq.w	8000de0 <_svfiprintf_r+0x1b0>
 8000c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c9e:	4453      	add	r3, sl
 8000ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ca2:	783b      	ldrb	r3, [r7, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 809b 	beq.w	8000de0 <_svfiprintf_r+0x1b0>
 8000caa:	2300      	movs	r3, #0
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	9304      	str	r3, [sp, #16]
 8000cb2:	9307      	str	r3, [sp, #28]
 8000cb4:	9205      	str	r2, [sp, #20]
 8000cb6:	9306      	str	r3, [sp, #24]
 8000cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8000cbe:	2205      	movs	r2, #5
 8000cc0:	7821      	ldrb	r1, [r4, #0]
 8000cc2:	4850      	ldr	r0, [pc, #320]	; (8000e04 <_svfiprintf_r+0x1d4>)
 8000cc4:	f000 fa50 	bl	8001168 <memchr>
 8000cc8:	1c67      	adds	r7, r4, #1
 8000cca:	9b04      	ldr	r3, [sp, #16]
 8000ccc:	b9d8      	cbnz	r0, 8000d06 <_svfiprintf_r+0xd6>
 8000cce:	06d9      	lsls	r1, r3, #27
 8000cd0:	bf44      	itt	mi
 8000cd2:	2220      	movmi	r2, #32
 8000cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000cd8:	071a      	lsls	r2, r3, #28
 8000cda:	bf44      	itt	mi
 8000cdc:	222b      	movmi	r2, #43	; 0x2b
 8000cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ce2:	7822      	ldrb	r2, [r4, #0]
 8000ce4:	2a2a      	cmp	r2, #42	; 0x2a
 8000ce6:	d016      	beq.n	8000d16 <_svfiprintf_r+0xe6>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	200a      	movs	r0, #10
 8000cec:	9a07      	ldr	r2, [sp, #28]
 8000cee:	4627      	mov	r7, r4
 8000cf0:	783b      	ldrb	r3, [r7, #0]
 8000cf2:	3401      	adds	r4, #1
 8000cf4:	3b30      	subs	r3, #48	; 0x30
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d950      	bls.n	8000d9c <_svfiprintf_r+0x16c>
 8000cfa:	b1c9      	cbz	r1, 8000d30 <_svfiprintf_r+0x100>
 8000cfc:	e011      	b.n	8000d22 <_svfiprintf_r+0xf2>
 8000cfe:	2b25      	cmp	r3, #37	; 0x25
 8000d00:	d0c0      	beq.n	8000c84 <_svfiprintf_r+0x54>
 8000d02:	4627      	mov	r7, r4
 8000d04:	e7b9      	b.n	8000c7a <_svfiprintf_r+0x4a>
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <_svfiprintf_r+0x1d4>)
 8000d08:	463c      	mov	r4, r7
 8000d0a:	1a80      	subs	r0, r0, r2
 8000d0c:	fa0b f000 	lsl.w	r0, fp, r0
 8000d10:	4318      	orrs	r0, r3
 8000d12:	9004      	str	r0, [sp, #16]
 8000d14:	e7d3      	b.n	8000cbe <_svfiprintf_r+0x8e>
 8000d16:	9a03      	ldr	r2, [sp, #12]
 8000d18:	1d11      	adds	r1, r2, #4
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	9103      	str	r1, [sp, #12]
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	db01      	blt.n	8000d26 <_svfiprintf_r+0xf6>
 8000d22:	9207      	str	r2, [sp, #28]
 8000d24:	e004      	b.n	8000d30 <_svfiprintf_r+0x100>
 8000d26:	4252      	negs	r2, r2
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	9207      	str	r2, [sp, #28]
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	783b      	ldrb	r3, [r7, #0]
 8000d32:	2b2e      	cmp	r3, #46	; 0x2e
 8000d34:	d10d      	bne.n	8000d52 <_svfiprintf_r+0x122>
 8000d36:	787b      	ldrb	r3, [r7, #1]
 8000d38:	1c79      	adds	r1, r7, #1
 8000d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d3c:	d132      	bne.n	8000da4 <_svfiprintf_r+0x174>
 8000d3e:	9b03      	ldr	r3, [sp, #12]
 8000d40:	3702      	adds	r7, #2
 8000d42:	1d1a      	adds	r2, r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	9203      	str	r2, [sp, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bfb8      	it	lt
 8000d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d50:	9305      	str	r3, [sp, #20]
 8000d52:	4c2d      	ldr	r4, [pc, #180]	; (8000e08 <_svfiprintf_r+0x1d8>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	7839      	ldrb	r1, [r7, #0]
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f000 fa05 	bl	8001168 <memchr>
 8000d5e:	b138      	cbz	r0, 8000d70 <_svfiprintf_r+0x140>
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	1b00      	subs	r0, r0, r4
 8000d64:	fa03 f000 	lsl.w	r0, r3, r0
 8000d68:	9b04      	ldr	r3, [sp, #16]
 8000d6a:	3701      	adds	r7, #1
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	9304      	str	r3, [sp, #16]
 8000d70:	7839      	ldrb	r1, [r7, #0]
 8000d72:	2206      	movs	r2, #6
 8000d74:	4825      	ldr	r0, [pc, #148]	; (8000e0c <_svfiprintf_r+0x1dc>)
 8000d76:	1c7e      	adds	r6, r7, #1
 8000d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d7c:	f000 f9f4 	bl	8001168 <memchr>
 8000d80:	2800      	cmp	r0, #0
 8000d82:	d035      	beq.n	8000df0 <_svfiprintf_r+0x1c0>
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <_svfiprintf_r+0x1e0>)
 8000d86:	b9fb      	cbnz	r3, 8000dc8 <_svfiprintf_r+0x198>
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	3307      	adds	r3, #7
 8000d8c:	f023 0307 	bic.w	r3, r3, #7
 8000d90:	3308      	adds	r3, #8
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d96:	444b      	add	r3, r9
 8000d98:	9309      	str	r3, [sp, #36]	; 0x24
 8000d9a:	e76d      	b.n	8000c78 <_svfiprintf_r+0x48>
 8000d9c:	fb00 3202 	mla	r2, r0, r2, r3
 8000da0:	2101      	movs	r1, #1
 8000da2:	e7a4      	b.n	8000cee <_svfiprintf_r+0xbe>
 8000da4:	2300      	movs	r3, #0
 8000da6:	240a      	movs	r4, #10
 8000da8:	4618      	mov	r0, r3
 8000daa:	9305      	str	r3, [sp, #20]
 8000dac:	460f      	mov	r7, r1
 8000dae:	783a      	ldrb	r2, [r7, #0]
 8000db0:	3101      	adds	r1, #1
 8000db2:	3a30      	subs	r2, #48	; 0x30
 8000db4:	2a09      	cmp	r2, #9
 8000db6:	d903      	bls.n	8000dc0 <_svfiprintf_r+0x190>
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0ca      	beq.n	8000d52 <_svfiprintf_r+0x122>
 8000dbc:	9005      	str	r0, [sp, #20]
 8000dbe:	e7c8      	b.n	8000d52 <_svfiprintf_r+0x122>
 8000dc0:	fb04 2000 	mla	r0, r4, r0, r2
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e7f1      	b.n	8000dac <_svfiprintf_r+0x17c>
 8000dc8:	ab03      	add	r3, sp, #12
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	462a      	mov	r2, r5
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_svfiprintf_r+0x1e4>)
 8000dd0:	a904      	add	r1, sp, #16
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000ddc:	4681      	mov	r9, r0
 8000dde:	d1d9      	bne.n	8000d94 <_svfiprintf_r+0x164>
 8000de0:	89ab      	ldrh	r3, [r5, #12]
 8000de2:	065b      	lsls	r3, r3, #25
 8000de4:	f53f af39 	bmi.w	8000c5a <_svfiprintf_r+0x2a>
 8000de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dea:	b01d      	add	sp, #116	; 0x74
 8000dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df0:	ab03      	add	r3, sp, #12
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	462a      	mov	r2, r5
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_svfiprintf_r+0x1e4>)
 8000df8:	a904      	add	r1, sp, #16
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	f000 f884 	bl	8000f08 <_printf_i>
 8000e00:	e7ea      	b.n	8000dd8 <_svfiprintf_r+0x1a8>
 8000e02:	bf00      	nop
 8000e04:	08001280 	.word	0x08001280
 8000e08:	08001286 	.word	0x08001286
 8000e0c:	0800128a 	.word	0x0800128a
 8000e10:	00000000 	.word	0x00000000
 8000e14:	08000b79 	.word	0x08000b79

08000e18 <_printf_common>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	461f      	mov	r7, r3
 8000e20:	688a      	ldr	r2, [r1, #8]
 8000e22:	690b      	ldr	r3, [r1, #16]
 8000e24:	4606      	mov	r6, r0
 8000e26:	4293      	cmp	r3, r2
 8000e28:	bfb8      	it	lt
 8000e2a:	4613      	movlt	r3, r2
 8000e2c:	f8c9 3000 	str.w	r3, [r9]
 8000e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e34:	460c      	mov	r4, r1
 8000e36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e3a:	b112      	cbz	r2, 8000e42 <_printf_common+0x2a>
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f8c9 3000 	str.w	r3, [r9]
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	0699      	lsls	r1, r3, #26
 8000e46:	bf42      	ittt	mi
 8000e48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000e4c:	3302      	addmi	r3, #2
 8000e4e:	f8c9 3000 	strmi.w	r3, [r9]
 8000e52:	6825      	ldr	r5, [r4, #0]
 8000e54:	f015 0506 	ands.w	r5, r5, #6
 8000e58:	d107      	bne.n	8000e6a <_printf_common+0x52>
 8000e5a:	f104 0a19 	add.w	sl, r4, #25
 8000e5e:	68e3      	ldr	r3, [r4, #12]
 8000e60:	f8d9 2000 	ldr.w	r2, [r9]
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	429d      	cmp	r5, r3
 8000e68:	db2a      	blt.n	8000ec0 <_printf_common+0xa8>
 8000e6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	3300      	adds	r3, #0
 8000e72:	bf18      	it	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	0692      	lsls	r2, r2, #26
 8000e78:	d42f      	bmi.n	8000eda <_printf_common+0xc2>
 8000e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e7e:	4639      	mov	r1, r7
 8000e80:	4630      	mov	r0, r6
 8000e82:	47c0      	blx	r8
 8000e84:	3001      	adds	r0, #1
 8000e86:	d022      	beq.n	8000ece <_printf_common+0xb6>
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	68e5      	ldr	r5, [r4, #12]
 8000e8c:	f003 0306 	and.w	r3, r3, #6
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	bf18      	it	ne
 8000e94:	2500      	movne	r5, #0
 8000e96:	f8d9 2000 	ldr.w	r2, [r9]
 8000e9a:	f04f 0900 	mov.w	r9, #0
 8000e9e:	bf08      	it	eq
 8000ea0:	1aad      	subeq	r5, r5, r2
 8000ea2:	68a3      	ldr	r3, [r4, #8]
 8000ea4:	6922      	ldr	r2, [r4, #16]
 8000ea6:	bf08      	it	eq
 8000ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eac:	4293      	cmp	r3, r2
 8000eae:	bfc4      	itt	gt
 8000eb0:	1a9b      	subgt	r3, r3, r2
 8000eb2:	18ed      	addgt	r5, r5, r3
 8000eb4:	341a      	adds	r4, #26
 8000eb6:	454d      	cmp	r5, r9
 8000eb8:	d11b      	bne.n	8000ef2 <_printf_common+0xda>
 8000eba:	2000      	movs	r0, #0
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4652      	mov	r2, sl
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	47c0      	blx	r8
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d103      	bne.n	8000ed6 <_printf_common+0xbe>
 8000ece:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	3501      	adds	r5, #1
 8000ed8:	e7c1      	b.n	8000e5e <_printf_common+0x46>
 8000eda:	2030      	movs	r0, #48	; 0x30
 8000edc:	18e1      	adds	r1, r4, r3
 8000ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ee8:	4422      	add	r2, r4
 8000eea:	3302      	adds	r3, #2
 8000eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ef0:	e7c3      	b.n	8000e7a <_printf_common+0x62>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	4639      	mov	r1, r7
 8000ef8:	4630      	mov	r0, r6
 8000efa:	47c0      	blx	r8
 8000efc:	3001      	adds	r0, #1
 8000efe:	d0e6      	beq.n	8000ece <_printf_common+0xb6>
 8000f00:	f109 0901 	add.w	r9, r9, #1
 8000f04:	e7d7      	b.n	8000eb6 <_printf_common+0x9e>
	...

08000f08 <_printf_i>:
 8000f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f0c:	4617      	mov	r7, r2
 8000f0e:	7e0a      	ldrb	r2, [r1, #24]
 8000f10:	b085      	sub	sp, #20
 8000f12:	2a6e      	cmp	r2, #110	; 0x6e
 8000f14:	4698      	mov	r8, r3
 8000f16:	4606      	mov	r6, r0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000f1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8000f20:	f000 80bc 	beq.w	800109c <_printf_i+0x194>
 8000f24:	d81a      	bhi.n	8000f5c <_printf_i+0x54>
 8000f26:	2a63      	cmp	r2, #99	; 0x63
 8000f28:	d02e      	beq.n	8000f88 <_printf_i+0x80>
 8000f2a:	d80a      	bhi.n	8000f42 <_printf_i+0x3a>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	f000 80c8 	beq.w	80010c2 <_printf_i+0x1ba>
 8000f32:	2a58      	cmp	r2, #88	; 0x58
 8000f34:	f000 808a 	beq.w	800104c <_printf_i+0x144>
 8000f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000f40:	e02a      	b.n	8000f98 <_printf_i+0x90>
 8000f42:	2a64      	cmp	r2, #100	; 0x64
 8000f44:	d001      	beq.n	8000f4a <_printf_i+0x42>
 8000f46:	2a69      	cmp	r2, #105	; 0x69
 8000f48:	d1f6      	bne.n	8000f38 <_printf_i+0x30>
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000f52:	d023      	beq.n	8000f9c <_printf_i+0x94>
 8000f54:	1d11      	adds	r1, r2, #4
 8000f56:	6019      	str	r1, [r3, #0]
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	e027      	b.n	8000fac <_printf_i+0xa4>
 8000f5c:	2a73      	cmp	r2, #115	; 0x73
 8000f5e:	f000 80b4 	beq.w	80010ca <_printf_i+0x1c2>
 8000f62:	d808      	bhi.n	8000f76 <_printf_i+0x6e>
 8000f64:	2a6f      	cmp	r2, #111	; 0x6f
 8000f66:	d02a      	beq.n	8000fbe <_printf_i+0xb6>
 8000f68:	2a70      	cmp	r2, #112	; 0x70
 8000f6a:	d1e5      	bne.n	8000f38 <_printf_i+0x30>
 8000f6c:	680a      	ldr	r2, [r1, #0]
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	600a      	str	r2, [r1, #0]
 8000f74:	e003      	b.n	8000f7e <_printf_i+0x76>
 8000f76:	2a75      	cmp	r2, #117	; 0x75
 8000f78:	d021      	beq.n	8000fbe <_printf_i+0xb6>
 8000f7a:	2a78      	cmp	r2, #120	; 0x78
 8000f7c:	d1dc      	bne.n	8000f38 <_printf_i+0x30>
 8000f7e:	2278      	movs	r2, #120	; 0x78
 8000f80:	496f      	ldr	r1, [pc, #444]	; (8001140 <_printf_i+0x238>)
 8000f82:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000f86:	e064      	b.n	8001052 <_printf_i+0x14a>
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8000f8e:	1d11      	adds	r1, r2, #4
 8000f90:	6019      	str	r1, [r3, #0]
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0a3      	b.n	80010e4 <_printf_i+0x1dc>
 8000f9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000fa0:	f102 0104 	add.w	r1, r2, #4
 8000fa4:	6019      	str	r1, [r3, #0]
 8000fa6:	d0d7      	beq.n	8000f58 <_printf_i+0x50>
 8000fa8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da03      	bge.n	8000fb8 <_printf_i+0xb0>
 8000fb0:	222d      	movs	r2, #45	; 0x2d
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000fb8:	4962      	ldr	r1, [pc, #392]	; (8001144 <_printf_i+0x23c>)
 8000fba:	220a      	movs	r2, #10
 8000fbc:	e017      	b.n	8000fee <_printf_i+0xe6>
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000fc6:	d003      	beq.n	8000fd0 <_printf_i+0xc8>
 8000fc8:	1d08      	adds	r0, r1, #4
 8000fca:	6018      	str	r0, [r3, #0]
 8000fcc:	680b      	ldr	r3, [r1, #0]
 8000fce:	e006      	b.n	8000fde <_printf_i+0xd6>
 8000fd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000fd4:	f101 0004 	add.w	r0, r1, #4
 8000fd8:	6018      	str	r0, [r3, #0]
 8000fda:	d0f7      	beq.n	8000fcc <_printf_i+0xc4>
 8000fdc:	880b      	ldrh	r3, [r1, #0]
 8000fde:	2a6f      	cmp	r2, #111	; 0x6f
 8000fe0:	bf14      	ite	ne
 8000fe2:	220a      	movne	r2, #10
 8000fe4:	2208      	moveq	r2, #8
 8000fe6:	4957      	ldr	r1, [pc, #348]	; (8001144 <_printf_i+0x23c>)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000fee:	6865      	ldr	r5, [r4, #4]
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	60a5      	str	r5, [r4, #8]
 8000ff4:	f2c0 809c 	blt.w	8001130 <_printf_i+0x228>
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	f020 0004 	bic.w	r0, r0, #4
 8000ffe:	6020      	str	r0, [r4, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d13f      	bne.n	8001084 <_printf_i+0x17c>
 8001004:	2d00      	cmp	r5, #0
 8001006:	f040 8095 	bne.w	8001134 <_printf_i+0x22c>
 800100a:	4675      	mov	r5, lr
 800100c:	2a08      	cmp	r2, #8
 800100e:	d10b      	bne.n	8001028 <_printf_i+0x120>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	07da      	lsls	r2, r3, #31
 8001014:	d508      	bpl.n	8001028 <_printf_i+0x120>
 8001016:	6923      	ldr	r3, [r4, #16]
 8001018:	6862      	ldr	r2, [r4, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	bfde      	ittt	le
 800101e:	2330      	movle	r3, #48	; 0x30
 8001020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001028:	ebae 0305 	sub.w	r3, lr, r5
 800102c:	6123      	str	r3, [r4, #16]
 800102e:	f8cd 8000 	str.w	r8, [sp]
 8001032:	463b      	mov	r3, r7
 8001034:	aa03      	add	r2, sp, #12
 8001036:	4621      	mov	r1, r4
 8001038:	4630      	mov	r0, r6
 800103a:	f7ff feed 	bl	8000e18 <_printf_common>
 800103e:	3001      	adds	r0, #1
 8001040:	d155      	bne.n	80010ee <_printf_i+0x1e6>
 8001042:	f04f 30ff 	mov.w	r0, #4294967295
 8001046:	b005      	add	sp, #20
 8001048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800104c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001050:	493c      	ldr	r1, [pc, #240]	; (8001144 <_printf_i+0x23c>)
 8001052:	6822      	ldr	r2, [r4, #0]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f012 0f80 	tst.w	r2, #128	; 0x80
 800105a:	f100 0504 	add.w	r5, r0, #4
 800105e:	601d      	str	r5, [r3, #0]
 8001060:	d001      	beq.n	8001066 <_printf_i+0x15e>
 8001062:	6803      	ldr	r3, [r0, #0]
 8001064:	e002      	b.n	800106c <_printf_i+0x164>
 8001066:	0655      	lsls	r5, r2, #25
 8001068:	d5fb      	bpl.n	8001062 <_printf_i+0x15a>
 800106a:	8803      	ldrh	r3, [r0, #0]
 800106c:	07d0      	lsls	r0, r2, #31
 800106e:	bf44      	itt	mi
 8001070:	f042 0220 	orrmi.w	r2, r2, #32
 8001074:	6022      	strmi	r2, [r4, #0]
 8001076:	b91b      	cbnz	r3, 8001080 <_printf_i+0x178>
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	f022 0220 	bic.w	r2, r2, #32
 800107e:	6022      	str	r2, [r4, #0]
 8001080:	2210      	movs	r2, #16
 8001082:	e7b1      	b.n	8000fe8 <_printf_i+0xe0>
 8001084:	4675      	mov	r5, lr
 8001086:	fbb3 f0f2 	udiv	r0, r3, r2
 800108a:	fb02 3310 	mls	r3, r2, r0, r3
 800108e:	5ccb      	ldrb	r3, [r1, r3]
 8001090:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001094:	4603      	mov	r3, r0
 8001096:	2800      	cmp	r0, #0
 8001098:	d1f5      	bne.n	8001086 <_printf_i+0x17e>
 800109a:	e7b7      	b.n	800100c <_printf_i+0x104>
 800109c:	6808      	ldr	r0, [r1, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80010a4:	6949      	ldr	r1, [r1, #20]
 80010a6:	d004      	beq.n	80010b2 <_printf_i+0x1aa>
 80010a8:	1d10      	adds	r0, r2, #4
 80010aa:	6018      	str	r0, [r3, #0]
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	6019      	str	r1, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <_printf_i+0x1ba>
 80010b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80010b6:	f102 0004 	add.w	r0, r2, #4
 80010ba:	6018      	str	r0, [r3, #0]
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	d0f6      	beq.n	80010ae <_printf_i+0x1a6>
 80010c0:	8019      	strh	r1, [r3, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	4675      	mov	r5, lr
 80010c6:	6123      	str	r3, [r4, #16]
 80010c8:	e7b1      	b.n	800102e <_printf_i+0x126>
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	1d11      	adds	r1, r2, #4
 80010ce:	6019      	str	r1, [r3, #0]
 80010d0:	6815      	ldr	r5, [r2, #0]
 80010d2:	2100      	movs	r1, #0
 80010d4:	6862      	ldr	r2, [r4, #4]
 80010d6:	4628      	mov	r0, r5
 80010d8:	f000 f846 	bl	8001168 <memchr>
 80010dc:	b108      	cbz	r0, 80010e2 <_printf_i+0x1da>
 80010de:	1b40      	subs	r0, r0, r5
 80010e0:	6060      	str	r0, [r4, #4]
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	6123      	str	r3, [r4, #16]
 80010e6:	2300      	movs	r3, #0
 80010e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010ec:	e79f      	b.n	800102e <_printf_i+0x126>
 80010ee:	6923      	ldr	r3, [r4, #16]
 80010f0:	462a      	mov	r2, r5
 80010f2:	4639      	mov	r1, r7
 80010f4:	4630      	mov	r0, r6
 80010f6:	47c0      	blx	r8
 80010f8:	3001      	adds	r0, #1
 80010fa:	d0a2      	beq.n	8001042 <_printf_i+0x13a>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	079b      	lsls	r3, r3, #30
 8001100:	d507      	bpl.n	8001112 <_printf_i+0x20a>
 8001102:	2500      	movs	r5, #0
 8001104:	f104 0919 	add.w	r9, r4, #25
 8001108:	68e3      	ldr	r3, [r4, #12]
 800110a:	9a03      	ldr	r2, [sp, #12]
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	429d      	cmp	r5, r3
 8001110:	db05      	blt.n	800111e <_printf_i+0x216>
 8001112:	68e0      	ldr	r0, [r4, #12]
 8001114:	9b03      	ldr	r3, [sp, #12]
 8001116:	4298      	cmp	r0, r3
 8001118:	bfb8      	it	lt
 800111a:	4618      	movlt	r0, r3
 800111c:	e793      	b.n	8001046 <_printf_i+0x13e>
 800111e:	2301      	movs	r3, #1
 8001120:	464a      	mov	r2, r9
 8001122:	4639      	mov	r1, r7
 8001124:	4630      	mov	r0, r6
 8001126:	47c0      	blx	r8
 8001128:	3001      	adds	r0, #1
 800112a:	d08a      	beq.n	8001042 <_printf_i+0x13a>
 800112c:	3501      	adds	r5, #1
 800112e:	e7eb      	b.n	8001108 <_printf_i+0x200>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1a7      	bne.n	8001084 <_printf_i+0x17c>
 8001134:	780b      	ldrb	r3, [r1, #0]
 8001136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800113a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800113e:	e765      	b.n	800100c <_printf_i+0x104>
 8001140:	080012a2 	.word	0x080012a2
 8001144:	08001291 	.word	0x08001291

08001148 <_sbrk_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	2300      	movs	r3, #0
 800114c:	4c05      	ldr	r4, [pc, #20]	; (8001164 <_sbrk_r+0x1c>)
 800114e:	4605      	mov	r5, r0
 8001150:	4608      	mov	r0, r1
 8001152:	6023      	str	r3, [r4, #0]
 8001154:	f7ff fb14 	bl	8000780 <_sbrk>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	d102      	bne.n	8001162 <_sbrk_r+0x1a>
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	b103      	cbz	r3, 8001162 <_sbrk_r+0x1a>
 8001160:	602b      	str	r3, [r5, #0]
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	200000c8 	.word	0x200000c8

08001168 <memchr>:
 8001168:	b510      	push	{r4, lr}
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	4402      	add	r2, r0
 800116e:	4290      	cmp	r0, r2
 8001170:	4603      	mov	r3, r0
 8001172:	d101      	bne.n	8001178 <memchr+0x10>
 8001174:	2000      	movs	r0, #0
 8001176:	bd10      	pop	{r4, pc}
 8001178:	781c      	ldrb	r4, [r3, #0]
 800117a:	3001      	adds	r0, #1
 800117c:	428c      	cmp	r4, r1
 800117e:	d1f6      	bne.n	800116e <memchr+0x6>
 8001180:	4618      	mov	r0, r3
 8001182:	bd10      	pop	{r4, pc}

08001184 <memcpy>:
 8001184:	b510      	push	{r4, lr}
 8001186:	1e43      	subs	r3, r0, #1
 8001188:	440a      	add	r2, r1
 800118a:	4291      	cmp	r1, r2
 800118c:	d100      	bne.n	8001190 <memcpy+0xc>
 800118e:	bd10      	pop	{r4, pc}
 8001190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001198:	e7f7      	b.n	800118a <memcpy+0x6>

0800119a <memmove>:
 800119a:	4288      	cmp	r0, r1
 800119c:	b510      	push	{r4, lr}
 800119e:	eb01 0302 	add.w	r3, r1, r2
 80011a2:	d803      	bhi.n	80011ac <memmove+0x12>
 80011a4:	1e42      	subs	r2, r0, #1
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d10c      	bne.n	80011c4 <memmove+0x2a>
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d2f9      	bcs.n	80011a4 <memmove+0xa>
 80011b0:	1881      	adds	r1, r0, r2
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	42d3      	cmn	r3, r2
 80011b6:	d100      	bne.n	80011ba <memmove+0x20>
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80011c2:	e7f7      	b.n	80011b4 <memmove+0x1a>
 80011c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80011cc:	e7eb      	b.n	80011a6 <memmove+0xc>

080011ce <__malloc_lock>:
 80011ce:	4770      	bx	lr

080011d0 <__malloc_unlock>:
 80011d0:	4770      	bx	lr

080011d2 <_realloc_r>:
 80011d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d4:	4607      	mov	r7, r0
 80011d6:	4614      	mov	r4, r2
 80011d8:	460e      	mov	r6, r1
 80011da:	b921      	cbnz	r1, 80011e6 <_realloc_r+0x14>
 80011dc:	4611      	mov	r1, r2
 80011de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80011e2:	f7ff bc6b 	b.w	8000abc <_malloc_r>
 80011e6:	b922      	cbnz	r2, 80011f2 <_realloc_r+0x20>
 80011e8:	f7ff fc1c 	bl	8000a24 <_free_r>
 80011ec:	4625      	mov	r5, r4
 80011ee:	4628      	mov	r0, r5
 80011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f2:	f000 f814 	bl	800121e <_malloc_usable_size_r>
 80011f6:	4284      	cmp	r4, r0
 80011f8:	d90f      	bls.n	800121a <_realloc_r+0x48>
 80011fa:	4621      	mov	r1, r4
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff fc5d 	bl	8000abc <_malloc_r>
 8001202:	4605      	mov	r5, r0
 8001204:	2800      	cmp	r0, #0
 8001206:	d0f2      	beq.n	80011ee <_realloc_r+0x1c>
 8001208:	4631      	mov	r1, r6
 800120a:	4622      	mov	r2, r4
 800120c:	f7ff ffba 	bl	8001184 <memcpy>
 8001210:	4631      	mov	r1, r6
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff fc06 	bl	8000a24 <_free_r>
 8001218:	e7e9      	b.n	80011ee <_realloc_r+0x1c>
 800121a:	4635      	mov	r5, r6
 800121c:	e7e7      	b.n	80011ee <_realloc_r+0x1c>

0800121e <_malloc_usable_size_r>:
 800121e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001222:	2800      	cmp	r0, #0
 8001224:	f1a0 0004 	sub.w	r0, r0, #4
 8001228:	bfbc      	itt	lt
 800122a:	580b      	ldrlt	r3, [r1, r0]
 800122c:	18c0      	addlt	r0, r0, r3
 800122e:	4770      	bx	lr

08001230 <_init>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	bf00      	nop
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr

0800123c <_fini>:
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	bf00      	nop
 8001240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001242:	bc08      	pop	{r3}
 8001244:	469e      	mov	lr, r3
 8001246:	4770      	bx	lr

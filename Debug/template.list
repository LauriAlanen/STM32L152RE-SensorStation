
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014ec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  20000008  08001874  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000dc  08001874  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008bf7  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000184a  00000000  00000000  00028c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000468  00000000  00000000  0002a478  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0002a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002838  00000000  00000000  0002ac78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000017d0  00000000  00000000  0002d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ec80  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000e94  00000000  00000000  0002ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	08001610 	.word	0x08001610

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	08001610 	.word	0x08001610

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 fa4c 	bl	8000628 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <I2C1_Init>:
 */

#include "i2c.h"

void I2C1_Init(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 2;			//Enable GPIOB clock PB8(D15)=SCL,PB9(D14)=SDA.
 80001c8:	4a26      	ldr	r2, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001ca:	4b26      	ldr	r3, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001cc:	69db      	ldr	r3, [r3, #28]
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= (1<<21);	//Enable I2C1_EN clock
 80001d4:	4a23      	ldr	r2, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d6:	4b23      	ldr	r3, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001de:	6253      	str	r3, [r2, #36]	; 0x24

	//configures PB8,PB9 to I2C1_EN
	GPIOB->AFR[1] &= ~0x000000FF;	//PB8,PB9 I2C1 SCL, SDA. AFRH8 and AFRH9. clear
 80001e0:	4a21      	ldr	r2, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e2:	4b21      	ldr	r3, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;	//GPIOx_AFRL p.189,AF4=I2C1(0100 BIN) p.177
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001ee:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80001f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~0x000F0000;	//PB8 and PB9 clear
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;		//Alternate function mode PB8,PB9
 8000204:	4a18      	ldr	r2, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 0x00000300;	//output open-drain. p.184
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800021a:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~0x000F0000;	//no pull-up resistors for PB8 and PB9 p.185
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000226:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000;				//software reset I2C1 SWRST p.682
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <I2C1_Init+0xa8>)
 800022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800022e:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;			//stop reset
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800023a:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0020;				//peripheral clock 32 MHz
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <I2C1_Init+0xa8>)
 800023e:	2220      	movs	r2, #32
 8000240:	605a      	str	r2, [r3, #4]
	TPCLK1=1/32MHz=31,25ns
	tI2C_bus=1/100kHz=10us=10000ns
	tI2C_bus_div2=10000ns/2=5000ns
	CCR value=tI2C_bus_div2/TPCLK1=5000ns/31,25ns=160
	p. 692*/
	I2C1->CCR = 160;
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <I2C1_Init+0xa8>)
 8000244:	22a0      	movs	r2, #160	; 0xa0
 8000246:	61da      	str	r2, [r3, #28]

	//maximum rise time in sm mode = 1000ns. Equation 1000 ns/TPCK1
	I2C1->TRISE = 33;				//1000ns/31,25ns=32+1=33, p.693
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <I2C1_Init+0xa8>)
 800024a:	2221      	movs	r2, #33	; 0x21
 800024c:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;			//peripheral enable (I2C1)
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <I2C1_Init+0xa8>)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <I2C1_Init+0xa8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f043 0301 	orr.w	r3, r3, #1
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020400 	.word	0x40020400
 800026c:	40005400 	.word	0x40005400

08000270 <I2C1_Write>:

void I2C1_Write(uint8_t address, int n, uint8_t* data)
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;
	int i;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 800027e:	bf00      	nop
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <I2C1_Write+0xc0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0302 	and.w	r3, r3, #2
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1f9      	bne.n	8000280 <I2C1_Write+0x10>

	I2C1->CR1 &= ~0x800;			//disable POS p.682
 800028c:	4a28      	ldr	r2, [pc, #160]	; (8000330 <I2C1_Write+0xc0>)
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <I2C1_Write+0xc0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000296:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= 0x100;				//generate start p.694
 8000298:	4a25      	ldr	r2, [pc, #148]	; (8000330 <I2C1_Write+0xc0>)
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <I2C1_Write+0xc0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80002a4:	bf00      	nop
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <I2C1_Write+0xc0>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <I2C1_Write+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <I2C1_Write+0xc0>)
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80002ba:	bf00      	nop
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <I2C1_Write+0xc0>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f003 0302 	and.w	r3, r3, #2
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <I2C1_Write+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <I2C1_Write+0xc0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	613b      	str	r3, [r7, #16]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80002ce:	bf00      	nop
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <I2C1_Write+0xc0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <I2C1_Write+0x60>

	//write data
	for(i=0;i<n;i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	e00f      	b.n	8000302 <I2C1_Write+0x92>
	{
		while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80002e2:	bf00      	nop
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <I2C1_Write+0xc0>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <I2C1_Write+0x74>
		I2C1->DR=*data++;				//send command
 80002f0:	490f      	ldr	r1, [pc, #60]	; (8000330 <I2C1_Write+0xc0>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	610b      	str	r3, [r1, #16]
	for(i=0;i<n;i++)
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	3301      	adds	r3, #1
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	697a      	ldr	r2, [r7, #20]
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	429a      	cmp	r2, r3
 8000308:	dbeb      	blt.n	80002e2 <I2C1_Write+0x72>
	}

	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
 800030a:	bf00      	nop
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <I2C1_Write+0xc0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <I2C1_Write+0x9c>
	I2C1->CR1 |= (1<<9);			//generate stop
 8000318:	4a05      	ldr	r2, [pc, #20]	; (8000330 <I2C1_Write+0xc0>)
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <I2C1_Write+0xc0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	371c      	adds	r7, #28
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40005400 	.word	0x40005400

08000334 <I2C1_Read>:
	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
	I2C1->CR1 |= (1<<9);			//generate stop
}

void I2C1_Read(uint8_t address, int n, uint8_t* data)
{
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 8000342:	bf00      	nop
 8000344:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <I2C1_Read+0x100>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f9      	bne.n	8000344 <I2C1_Read+0x10>
	I2C1->CR1 &= ~0x800;			//Acknowledge clear p.682
 8000350:	4a38      	ldr	r2, [pc, #224]	; (8000434 <I2C1_Read+0x100>)
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <I2C1_Read+0x100>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800035a:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= 0x100;				//generate start p.694
 800035c:	4a35      	ldr	r2, [pc, #212]	; (8000434 <I2C1_Read+0x100>)
 800035e:	4b35      	ldr	r3, [pc, #212]	; (8000434 <I2C1_Read+0x100>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000366:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 8000368:	bf00      	nop
 800036a:	4b32      	ldr	r3, [pc, #200]	; (8000434 <I2C1_Read+0x100>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C1_Read+0x36>

	I2C1->DR=address << 1;			//transmit slave address
 8000376:	4a2f      	ldr	r2, [pc, #188]	; (8000434 <I2C1_Read+0x100>)
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 800037e:	bf00      	nop
 8000380:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <I2C1_Read+0x100>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0302 	and.w	r3, r3, #2
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f9      	beq.n	8000380 <I2C1_Read+0x4c>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <I2C1_Read+0x100>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	617b      	str	r3, [r7, #20]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 8000392:	bf00      	nop
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <I2C1_Read+0x100>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <I2C1_Read+0x60>

	I2C1->CR1 |= 0x100;				//generate repeated start p.694
 80003a0:	4a24      	ldr	r2, [pc, #144]	; (8000434 <I2C1_Read+0x100>)
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <I2C1_Read+0x100>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003aa:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80003ac:	bf00      	nop
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <I2C1_Read+0x100>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f9      	beq.n	80003ae <I2C1_Read+0x7a>

	I2C1->DR=address << 1|1;		//transmit slave address
 80003ba:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <I2C1_Read+0x100>)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80003c6:	bf00      	nop
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <I2C1_Read+0x100>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <I2C1_Read+0x94>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <I2C1_Read+0x100>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	617b      	str	r3, [r7, #20]
	I2C1->CR1 |= (1<<10);			//Enable acknowledge p.683
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <I2C1_Read+0x100>)
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <I2C1_Read+0x100>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e4:	6013      	str	r3, [r2, #0]

	while(n > 0)					//read data from chip
 80003e6:	e010      	b.n	800040a <I2C1_Read+0xd6>
	{
		while(!(I2C1->SR1 & 0x40)){}	//wait until RXNE flag is set
 80003e8:	bf00      	nop
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <I2C1_Read+0x100>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <I2C1_Read+0xb6>
		(*data++) = I2C1->DR;			//read data from DR
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	607a      	str	r2, [r7, #4]
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <I2C1_Read+0x100>)
 80003fe:	6912      	ldr	r2, [r2, #16]
 8000400:	b2d2      	uxtb	r2, r2
 8000402:	701a      	strb	r2, [r3, #0]
		n--;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3b01      	subs	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
	while(n > 0)					//read data from chip
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2b00      	cmp	r3, #0
 800040e:	dceb      	bgt.n	80003e8 <I2C1_Read+0xb4>
	}
	I2C1->CR1 |= (1<<9);			//generate stop p.682
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <I2C1_Read+0x100>)
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <I2C1_Read+0x100>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~(1<<10);			//disable acknowledge p.682
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <I2C1_Read+0x100>)
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <I2C1_Read+0x100>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	371c      	adds	r7, #28
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40005400 	.word	0x40005400

08000438 <MODBUS_IRQHandler>:

	return MODBUS_FRAME_OK;
}

void MODBUS_IRQHandler()
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE)
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <MODBUS_IRQHandler+0x64>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0320 	and.w	r3, r3, #32
 8000446:	2b00      	cmp	r3, #0
 8000448:	d022      	beq.n	8000490 <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART2->DR;
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <MODBUS_IRQHandler+0x64>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MODBUS_IRQHandler+0x68>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	b29b      	uxth	r3, r3
 8000456:	3301      	adds	r3, #1
 8000458:	425a      	negs	r2, r3
 800045a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800045e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000462:	bf58      	it	pl
 8000464:	4253      	negpl	r3, r2
 8000466:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MODBUS_IRQHandler+0x6c>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	b29b      	uxth	r3, r3
 800046e:	88ba      	ldrh	r2, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	d00a      	beq.n	800048a <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <MODBUS_IRQHandler+0x68>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	b29b      	uxth	r3, r3
 800047a:	4619      	mov	r1, r3
 800047c:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <MODBUS_IRQHandler+0x70>)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 8000482:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <MODBUS_IRQHandler+0x68>)
 8000484:	88bb      	ldrh	r3, [r7, #4]
 8000486:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 8000488:	e002      	b.n	8000490 <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MODBUS_IRQHandler+0x74>)
 800048c:	2201      	movs	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40004400 	.word	0x40004400
 80004a0:	20000026 	.word	0x20000026
 80004a4:	20000028 	.word	0x20000028
 80004a8:	2000005c 	.word	0x2000005c
 80004ac:	20000024 	.word	0x20000024

080004b0 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <TIM2_Init+0x3c>)
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <TIM2_Init+0x3c>)
 80004b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 80004c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c4:	221f      	movs	r2, #31
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 80004c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004d0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 80004d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004fa:	4908      	ldr	r1, [pc, #32]	; (800051c <NVIC_EnableIRQ+0x2c>)
 80004fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000500:	095b      	lsrs	r3, r3, #5
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	f002 021f 	and.w	r2, r2, #31
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	e000e100 	.word	0xe000e100

08000520 <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <USART2_init+0x8c>)
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <USART2_init+0x8c>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000530:	4a1e      	ldr	r2, [pc, #120]	; (80005ac <USART2_init+0x8c>)
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <USART2_init+0x8c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <USART2_init+0x90>)
 800053e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000542:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <USART2_init+0x90>)
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <USART2_init+0x90>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800054e:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <USART2_init+0x90>)
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <USART2_init+0x90>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <USART2_init+0x90>)
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <USART2_init+0x90>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <USART2_init+0x94>)
 800056a:	f640 5205 	movw	r2, #3333	; 0xd05
 800056e:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <USART2_init+0x94>)
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <USART2_init+0x94>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <USART2_init+0x94>)
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <USART2_init+0x94>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <USART2_init+0x94>)
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <USART2_init+0x94>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000592:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <USART2_init+0x94>)
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <USART2_init+0x94>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 80005a0:	2026      	movs	r0, #38	; 0x26
 80005a2:	f7ff ffa5 	bl	80004f0 <NVIC_EnableIRQ>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40004400 	.word	0x40004400

080005b8 <USART2_write>:
		data=USART2->DR;			//p739
		return data;
}

void USART2_write(char data)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)){} 	//TXE: Transmit data register empty. p736-737
 80005c2:	bf00      	nop
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <USART2_write+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <USART2_write+0xc>
	USART2->DR = (data);		//p739
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <USART2_write+0x28>)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	6053      	str	r3, [r2, #4]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40004400 	.word	0x40004400

080005e4 <USART2_write_buffer>:

void USART2_write_buffer(char* buffer)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	while(*(buffer) != '\0')
 80005ec:	e007      	b.n	80005fe <USART2_write_buffer+0x1a>
	{
		USART2_write(*buffer);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffe0 	bl	80005b8 <USART2_write>
		buffer++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
	while(*(buffer) != '\0')
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f3      	bne.n	80005ee <USART2_write_buffer+0xa>
	}
	USART2_write('\r');
 8000606:	200d      	movs	r0, #13
 8000608:	f7ff ffd6 	bl	80005b8 <USART2_write>
	USART2_write('\n');
 800060c:	200a      	movs	r0, #10
 800060e:	f7ff ffd3 	bl	80005b8 <USART2_write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 800061e:	f7ff ff0b 	bl	8000438 <MODBUS_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <DHT22_IRQHandler>:

	return;
}

void DHT22_IRQHandler()
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 800062e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <DHT22_IRQHandler+0xa4>)
 8000638:	2203      	movs	r2, #3
 800063a:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <DHT22_IRQHandler+0xa8>)
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000644:	2b00      	cmp	r3, #0
 8000646:	d009      	beq.n	800065c <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <DHT22_IRQHandler+0xac>)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <DHT22_IRQHandler+0xa8>)
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <DHT22_IRQHandler+0xa8>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	e025      	b.n	80006a8 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <DHT22_IRQHandler+0xac>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	88fa      	ldrh	r2, [r7, #6]
 8000662:	429a      	cmp	r2, r3
 8000664:	d305      	bcc.n	8000672 <DHT22_IRQHandler+0x4a>
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <DHT22_IRQHandler+0xac>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	e006      	b.n	8000680 <DHT22_IRQHandler+0x58>
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <DHT22_IRQHandler+0xac>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	3b01      	subs	r3, #1
 800067e:	b29b      	uxth	r3, r3
 8000680:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <DHT22_IRQHandler+0xb0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <DHT22_IRQHandler+0xb4>)
 800068e:	5499      	strb	r1, [r3, r2]
		index++;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <DHT22_IRQHandler+0xb0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <DHT22_IRQHandler+0xb0>)
 800069a:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <DHT22_IRQHandler+0xa8>)
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <DHT22_IRQHandler+0xa8>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f023 0320 	bic.w	r3, r3, #32
 80006a6:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <DHT22_IRQHandler+0xb0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b28      	cmp	r3, #40	; 0x28
 80006ae:	d905      	bls.n	80006bc <DHT22_IRQHandler+0x94>
	{
		index = 0;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <DHT22_IRQHandler+0xb0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <DHT22_IRQHandler+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <DHT22_IRQHandler+0xb8>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000055 	.word	0x20000055
 80006d0:	40020000 	.word	0x40020000
 80006d4:	20000056 	.word	0x20000056
 80006d8:	20000058 	.word	0x20000058
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	40010400 	.word	0x40010400

080006e4 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80006f0:	23ff      	movs	r3, #255	; 0xff
 80006f2:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	81fb      	strh	r3, [r7, #14]
 80006f8:	e021      	b.n	800073e <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	4053      	eors	r3, r2
 8000706:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000708:	2308      	movs	r3, #8
 800070a:	733b      	strb	r3, [r7, #12]
 800070c:	e011      	b.n	8000732 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800070e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000712:	2b00      	cmp	r3, #0
 8000714:	da07      	bge.n	8000726 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000716:	7b7b      	ldrb	r3, [r7, #13]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	b25b      	sxtb	r3, r3
 800071c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000720:	b25b      	sxtb	r3, r3
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	e002      	b.n	800072c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800072c:	7b3b      	ldrb	r3, [r7, #12]
 800072e:	3b01      	subs	r3, #1
 8000730:	733b      	strb	r3, [r7, #12]
 8000732:	7b3b      	ldrb	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1ea      	bne.n	800070e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000738:	89fb      	ldrh	r3, [r7, #14]
 800073a:	3301      	adds	r3, #1
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	89fa      	ldrh	r2, [r7, #14]
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3d9      	bcc.n	80006fa <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8000746:	7b7b      	ldrb	r3, [r7, #13]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	4619      	mov	r1, r3
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffbc 	bl	80006e4 <sensirion_common_generate_crc>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	4293      	cmp	r3, r2
 8000774:	d002      	beq.n	800077c <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e000      	b.n	800077e <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	461a      	mov	r2, r3
 8000792:	460b      	mov	r3, r1
 8000794:	817b      	strh	r3, [r7, #10]
 8000796:	4613      	mov	r3, r2
 8000798:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800079e:	8abb      	ldrh	r3, [r7, #20]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	82ba      	strh	r2, [r7, #20]
 80007a4:	461a      	mov	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	897a      	ldrh	r2, [r7, #10]
 80007ac:	0a12      	lsrs	r2, r2, #8
 80007ae:	b292      	uxth	r2, r2
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80007b4:	8abb      	ldrh	r3, [r7, #20]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	82ba      	strh	r2, [r7, #20]
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	897a      	ldrh	r2, [r7, #10]
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	75fb      	strb	r3, [r7, #23]
 80007ca:	e030      	b.n	800082e <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	82ba      	strh	r2, [r7, #20]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	7dfa      	ldrb	r2, [r7, #23]
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	440a      	add	r2, r1
 80007e0:	8812      	ldrh	r2, [r2, #0]
 80007e2:	0a12      	lsrs	r2, r2, #8
 80007e4:	b292      	uxth	r2, r2
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 80007ea:	8abb      	ldrh	r3, [r7, #20]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	82ba      	strh	r2, [r7, #20]
 80007f0:	461a      	mov	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	7dfa      	ldrb	r2, [r7, #23]
 80007f8:	0052      	lsls	r2, r2, #1
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	440a      	add	r2, r1
 80007fe:	8812      	ldrh	r2, [r2, #0]
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8000804:	8abb      	ldrh	r3, [r7, #20]
 8000806:	3b02      	subs	r3, #2
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff68 	bl	80006e4 <sensirion_common_generate_crc>
 8000814:	4603      	mov	r3, r0
 8000816:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8000818:	8abb      	ldrh	r3, [r7, #20]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	82ba      	strh	r2, [r7, #20]
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	7cfa      	ldrb	r2, [r7, #19]
 8000826:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	3301      	adds	r3, #1
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	7dfa      	ldrb	r2, [r7, #23]
 8000830:	7a7b      	ldrb	r3, [r7, #9]
 8000832:	429a      	cmp	r2, r3
 8000834:	d3ca      	bcc.n	80007cc <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8000836:	8abb      	ldrh	r3, [r7, #20]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	; 0x58
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	4613      	mov	r3, r2
 800084e:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8000850:	88bb      	ldrh	r3, [r7, #4]
 8000852:	461a      	mov	r2, r3
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	4413      	add	r3, r2
 8000858:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 8000862:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f8e5 	bl	8000a3a <sensirion_i2c_read>
 8000870:	4603      	mov	r3, r0
 8000872:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != NO_ERROR)
 8000876:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 800087e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000882:	e047      	b.n	8000914 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8000884:	2300      	movs	r3, #0
 8000886:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000890:	e039      	b.n	8000906 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8000892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000898:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800089a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800089e:	3302      	adds	r3, #2
 80008a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008a2:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2102      	movs	r1, #2
 80008aa:	f7ff ff52 	bl	8000752 <sensirion_common_check_crc>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != NO_ERROR)
 80008b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 80008bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008c0:	e028      	b.n	8000914 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 80008c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 80008cc:	461a      	mov	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008d8:	440a      	add	r2, r1
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80008de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 80008e8:	461a      	mov	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008f2:	3201      	adds	r2, #1
 80008f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008f6:	440a      	add	r2, r1
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80008fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000900:	3303      	adds	r3, #3
 8000902:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000906:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800090a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800090e:	429a      	cmp	r2, r3
 8000910:	d3bf      	bcc.n	8000892 <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return NO_ERROR;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3758      	adds	r7, #88	; 0x58
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 800092c:	88ba      	ldrh	r2, [r7, #4]
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff84 	bl	8000840 <sensirion_i2c_read_words_as_bytes>
 8000938:	4603      	mov	r3, r0
 800093a:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != NO_ERROR)
 800093c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <sensirion_i2c_read_words+0x2e>
        return ret;
 8000944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000948:	e020      	b.n	800098c <sensirion_i2c_read_words+0x70>

    for (i = 0; i < num_words; ++i) {
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e017      	b.n	8000980 <sensirion_i2c_read_words+0x64>
        word_bytes = (uint8_t*)&data_words[i];
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	4413      	add	r3, r2
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0212      	lsls	r2, r2, #8
 8000968:	b211      	sxth	r1, r2
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	3201      	adds	r2, #1
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	b212      	sxth	r2, r2
 8000972:	430a      	orrs	r2, r1
 8000974:	b212      	sxth	r2, r2
 8000976:	b292      	uxth	r2, r2
 8000978:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	3301      	adds	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	b29b      	uxth	r3, r3
 8000984:	88ba      	ldrh	r2, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	d8e2      	bhi.n	8000950 <sensirion_i2c_read_words+0x34>
    }

    return NO_ERROR;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 80009a4:	88b9      	ldrh	r1, [r7, #4]
 80009a6:	f107 000c 	add.w	r0, r7, #12
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	f7ff feea 	bl	8000786 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80009b2:	f107 010c 	add.w	r1, r7, #12
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2202      	movs	r2, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f850 	bl	8000a60 <sensirion_i2c_write>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b21b      	sxth	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <sensirion_i2c_delayed_read_cmd>:
    return sensirion_i2c_write(address, buf, buf_size);
}

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t* data_words,
                                       uint16_t num_words) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60ba      	str	r2, [r7, #8]
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	460b      	mov	r3, r1
 80009dc:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 80009de:	89b9      	ldrh	r1, [r7, #12]
 80009e0:	f107 0014 	add.w	r0, r7, #20
 80009e4:	2300      	movs	r3, #0
 80009e6:	2200      	movs	r2, #0
 80009e8:	f7ff fecd 	bl	8000786 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80009ec:	f107 0114 	add.w	r1, r7, #20
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2202      	movs	r2, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f833 	bl	8000a60 <sensirion_i2c_write>
 80009fa:	4603      	mov	r3, r0
 80009fc:	82fb      	strh	r3, [r7, #22]
    if (ret != NO_ERROR)
 80009fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 8000a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a0a:	e00c      	b.n	8000a26 <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f000 f837 	bl	8000a86 <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 8000a18:	8c3a      	ldrh	r2, [r7, #32]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff7c 	bl	800091c <sensirion_i2c_read_words>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <sensirion_i2c_init>:
{
    return 1;
}

void sensirion_i2c_init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
    I2C1_Init();
 8000a32:	f7ff fbc7 	bl	80001c4 <I2C1_Init>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <sensirion_i2c_read>:
{
    // TODO: Implement function
}

int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	6039      	str	r1, [r7, #0]
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	4613      	mov	r3, r2
 8000a48:	80bb      	strh	r3, [r7, #4]
    I2C1_Read(address, count, data);
 8000a4a:	88b9      	ldrh	r1, [r7, #4]
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fc6f 	bl	8000334 <I2C1_Read>
    return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <sensirion_i2c_write>:

int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data, uint16_t count)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
    I2C1_Write(address, count, data);
 8000a70:	88b9      	ldrh	r1, [r7, #4]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbfa 	bl	8000270 <I2C1_Write>

    return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <sensirion_sleep_usec>:

void sensirion_sleep_usec(uint32_t useconds)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	delay_us(useconds);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f986 	bl	8000da0 <delay_us>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <sgp30_check_featureset>:
 *         SGP30_ERR_INVALID_PRODUCT_TYPE if the sensor is not an SGP30,
 *         SGP30_ERR_UNSUPPORTED_FEATURE_SET if the sensor does not
 *                                           have the required FS,
 *         an error code otherwise
 */
static int16_t sgp30_check_featureset(uint16_t needed_fs) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
    int16_t ret;
    uint16_t fs_version;
    uint8_t product_type;

    ret = sgp30_get_feature_set_version(&fs_version, &product_type);
 8000aa6:	f107 020b 	add.w	r2, r7, #11
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f8e3 	bl	8000c7c <sgp30_get_feature_set_version>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <sgp30_check_featureset+0x2c>
        return ret;
 8000ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac6:	e00d      	b.n	8000ae4 <sgp30_check_featureset+0x48>

    if (product_type != SGP30_PRODUCT_TYPE)
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <sgp30_check_featureset+0x38>
        return SGP30_ERR_INVALID_PRODUCT_TYPE;
 8000ace:	f06f 030b 	mvn.w	r3, #11
 8000ad2:	e007      	b.n	8000ae4 <sgp30_check_featureset+0x48>

    if (fs_version < needed_fs)
 8000ad4:	89bb      	ldrh	r3, [r7, #12]
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d902      	bls.n	8000ae2 <sgp30_check_featureset+0x46>
        return SGP30_ERR_UNSUPPORTED_FEATURE_SET;
 8000adc:	f06f 0309 	mvn.w	r3, #9
 8000ae0:	e000      	b.n	8000ae4 <sgp30_check_featureset+0x48>

    return STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 8000af0:	2358      	movs	r3, #88	; 0x58
 8000af2:	f242 0108 	movw	r1, #8200	; 0x2008
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff4c 	bl	8000994 <sensirion_i2c_write_cmd>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t* tvoc_ppb, uint16_t* co2_eq_ppm) {
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000b0c:	2058      	movs	r0, #88	; 0x58
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2202      	movs	r2, #2
 8000b14:	4619      	mov	r1, r3
 8000b16:	f7ff ff01 	bl	800091c <sensirion_i2c_read_words>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 8000b1e:	897a      	ldrh	r2, [r7, #10]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8000b24:	893a      	ldrh	r2, [r7, #8]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	801a      	strh	r2, [r3, #0]

    return ret;
 8000b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t* tvoc_ppb,
                                        uint16_t* co2_eq_ppm) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 8000b40:	f7ff ffd4 	bl	8000aec <sgp30_measure_iaq>
 8000b44:	4603      	mov	r3, r0
 8000b46:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 8000b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b54:	e008      	b.n	8000b68 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8000b56:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000b5a:	f7ff ff94 	bl	8000a86 <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ffce 	bl	8000b02 <sgp30_read_iaq>
 8000b66:	4603      	mov	r3, r0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <sgp30_measure_raw_blocking_read>:
    uint16_t tvoc_ppb;
    return sgp30_measure_iaq_blocking_read(&tvoc_ppb, co2_eq_ppm);
}

int16_t sgp30_measure_raw_blocking_read(uint16_t* ethanol_raw_signal,
                                        uint16_t* h2_raw_signal) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_raw();
 8000b7a:	f000 f816 	bl	8000baa <sgp30_measure_raw>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8000b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <sgp30_measure_raw_blocking_read+0x20>
        return ret;
 8000b8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b8e:	e008      	b.n	8000ba2 <sgp30_measure_raw_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_RAW_MEASURE_DURATION_US);
 8000b90:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000b94:	f7ff ff77 	bl	8000a86 <sensirion_sleep_usec>

    return sgp30_read_raw(ethanol_raw_signal, h2_raw_signal);
 8000b98:	6839      	ldr	r1, [r7, #0]
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f810 	bl	8000bc0 <sgp30_read_raw>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <sgp30_measure_raw>:

int16_t sgp30_measure_raw() {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_RAW_MEASURE);
 8000bae:	2358      	movs	r3, #88	; 0x58
 8000bb0:	f242 0150 	movw	r1, #8272	; 0x2050
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff feed 	bl	8000994 <sensirion_i2c_write_cmd>
 8000bba:	4603      	mov	r3, r0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <sgp30_read_raw>:

int16_t sgp30_read_raw(uint16_t* ethanol_raw_signal, uint16_t* h2_raw_signal) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_RAW_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000bca:	2058      	movs	r0, #88	; 0x58
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff fea2 	bl	800091c <sensirion_i2c_read_words>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_RAW_MEASURE_WORDS);

    *ethanol_raw_signal = words[1];
 8000bdc:	897a      	ldrh	r2, [r7, #10]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	801a      	strh	r2, [r3, #0]
    *h2_raw_signal = words[0];
 8000be2:	893a      	ldrh	r2, [r7, #8]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	801a      	strh	r2, [r3, #0]

    return ret;
 8000be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <sgp30_get_iaq_baseline>:

int16_t sgp30_get_iaq_baseline(uint32_t* baseline) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_IAQ_BASELINE_WORDS];

    ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_GET_IAQ_BASELINE);
 8000bfc:	2358      	movs	r3, #88	; 0x58
    ret =
 8000bfe:	f242 0115 	movw	r1, #8213	; 0x2015
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fec6 	bl	8000994 <sensirion_i2c_write_cmd>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	81fb      	strh	r3, [r7, #14]

    if (ret != STATUS_OK)
 8000c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <sgp30_get_iaq_baseline+0x26>
        return ret;
 8000c14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c18:	e021      	b.n	8000c5e <sgp30_get_iaq_baseline+0x6a>

    sensirion_sleep_usec(SGP30_CMD_GET_IAQ_BASELINE_DURATION_US);
 8000c1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c1e:	f7ff ff32 	bl	8000a86 <sensirion_sleep_usec>

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8000c22:	2058      	movs	r0, #88	; 0x58
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f7ff fe76 	bl	800091c <sensirion_i2c_read_words>
 8000c30:	4603      	mov	r3, r0
 8000c32:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_GET_IAQ_BASELINE_WORDS);

    if (ret != STATUS_OK)
 8000c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <sgp30_get_iaq_baseline+0x4e>
        return ret;
 8000c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c40:	e00d      	b.n	8000c5e <sgp30_get_iaq_baseline+0x6a>

    *baseline = ((uint32_t)words[1] << 16) | ((uint32_t)words[0]);
 8000c42:	897b      	ldrh	r3, [r7, #10]
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	893a      	ldrh	r2, [r7, #8]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]

    if (*baseline)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <sgp30_get_iaq_baseline+0x66>
        return STATUS_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e001      	b.n	8000c5e <sgp30_get_iaq_baseline+0x6a>
    return STATUS_FAIL;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <sgp30_get_driver_version>:
    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);

    return ret;
}

const char* sgp30_get_driver_version() {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
    return SGP_DRV_VERSION_STR;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <sgp30_get_driver_version+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000000 	.word	0x20000000

08000c7c <sgp30_get_feature_set_version>:
uint8_t sgp30_get_configured_address() {
    return SGP30_I2C_ADDRESS;
}

int16_t sgp30_get_feature_set_version(uint16_t* feature_set_version,
                                      uint8_t* product_type) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_FEATURESET_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8000c86:	2058      	movs	r0, #88	; 0x58
 8000c88:	f107 020c 	add.w	r2, r7, #12
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4613      	mov	r3, r2
 8000c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c96:	f242 012f 	movw	r1, #8239	; 0x202f
 8000c9a:	f7ff fe97 	bl	80009cc <sensirion_i2c_delayed_read_cmd>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_FEATURESET,
                                         SGP30_CMD_GET_FEATURESET_DURATION_US,
                                         words, SGP30_CMD_GET_FEATURESET_WORDS);

    if (ret != STATUS_OK)
 8000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <sgp30_get_feature_set_version+0x34>
        return ret;
 8000caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cae:	e00b      	b.n	8000cc8 <sgp30_get_feature_set_version+0x4c>

    *feature_set_version = words[0] & 0x00FF;
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	801a      	strh	r2, [r3, #0]
    *product_type = (uint8_t)((words[0] & 0xF000) >> 12);
 8000cba:	89bb      	ldrh	r3, [r7, #12]
 8000cbc:	0b1b      	lsrs	r3, r3, #12
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	701a      	strb	r2, [r3, #0]

    return STATUS_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <sgp30_get_serial_id>:

int16_t sgp30_get_serial_id(uint64_t* serial_id) {
 8000cd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t words[SGP30_CMD_GET_SERIAL_ID_WORDS];

    ret = sensirion_i2c_delayed_read_cmd(SGP30_I2C_ADDRESS,
 8000cda:	2058      	movs	r0, #88	; 0x58
 8000cdc:	f107 0208 	add.w	r2, r7, #8
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cea:	f243 6182 	movw	r1, #13954	; 0x3682
 8000cee:	f7ff fe6d 	bl	80009cc <sensirion_i2c_delayed_read_cmd>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	81fb      	strh	r3, [r7, #14]
                                         SGP30_CMD_GET_SERIAL_ID,
                                         SGP30_CMD_GET_SERIAL_ID_DURATION_US,
                                         words, SGP30_CMD_GET_SERIAL_ID_WORDS);

    if (ret != STATUS_OK)
 8000cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <sgp30_get_serial_id+0x34>
        return ret;
 8000cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d02:	e01c      	b.n	8000d3e <sgp30_get_serial_id+0x6e>

    *serial_id = (((uint64_t)words[0]) << 32) | (((uint64_t)words[1]) << 16) |
 8000d04:	893b      	ldrh	r3, [r7, #8]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	f04f 0800 	mov.w	r8, #0
 8000d12:	897b      	ldrh	r3, [r7, #10]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	0c15      	lsrs	r5, r2, #16
 8000d1c:	0414      	lsls	r4, r2, #16
 8000d1e:	ea48 0104 	orr.w	r1, r8, r4
 8000d22:	ea49 0205 	orr.w	r2, r9, r5
                 (((uint64_t)words[2]) << 0);
 8000d26:	89bb      	ldrh	r3, [r7, #12]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f04f 0400 	mov.w	r4, #0
    *serial_id = (((uint64_t)words[0]) << 32) | (((uint64_t)words[1]) << 16) |
 8000d2e:	ea43 0301 	orr.w	r3, r3, r1
 8000d32:	ea44 0402 	orr.w	r4, r4, r2
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	e882 0018 	stmia.w	r2, {r3, r4}

    return STATUS_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000d48 <sgp30_iaq_init>:

int16_t sgp30_iaq_init() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 8000d4e:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 8000d50:	f242 0103 	movw	r1, #8195	; 0x2003
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe1d 	bl	8000994 <sensirion_i2c_write_cmd>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 8000d5e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d62:	f7ff fe90 	bl	8000a86 <sensirion_sleep_usec>
    return ret;
 8000d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <sgp30_probe>:

int16_t sgp30_probe() {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
    int16_t ret = sgp30_check_featureset(0x20);
 8000d78:	2020      	movs	r0, #32
 8000d7a:	f7ff fe8f 	bl	8000a9c <sgp30_check_featureset>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]

    if (ret != STATUS_OK)
 8000d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <sgp30_probe+0x1e>
        return ret;
 8000d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d8e:	e002      	b.n	8000d96 <sgp30_probe+0x24>

    return sgp30_iaq_init();
 8000d90:	f7ff ffda 	bl	8000d48 <sgp30_iaq_init>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <delay_us>:
#include "timing.h"
#include "stm32l1xx.h"

void delay_us(unsigned long delay)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32 - 1; //32 000 000 = 1s so 32 = 1 us
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <delay_us+0x48>)
 8000dae:	221f      	movs	r2, #31
 8000db0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <delay_us+0x48>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <delay_us+0x48>)
 8000dba:	2205      	movs	r2, #5
 8000dbc:	601a      	str	r2, [r3, #0]

	  while(i < delay)
 8000dbe:	e009      	b.n	8000dd4 <delay_us+0x34>
	  {
		  while(!((SysTick->CTRL) & 0x10000)){}
 8000dc0:	bf00      	nop
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <delay_us+0x48>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f9      	beq.n	8000dc2 <delay_us+0x22>
		  i++;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
	  while(i < delay)
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3f1      	bcc.n	8000dc0 <delay_us+0x20>
	  }
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <delay_ms>:

void delay_ms(unsigned long delay)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <delay_ms+0x48>)
 8000dfa:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000dfe:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <delay_ms+0x48>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <delay_ms+0x48>)
 8000e08:	2205      	movs	r2, #5
 8000e0a:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 8000e0c:	e009      	b.n	8000e22 <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 8000e0e:	bf00      	nop
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <delay_ms+0x48>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f9      	beq.n	8000e10 <delay_ms+0x24>
		i++;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d3f1      	bcc.n	8000e0e <delay_ms+0x22>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <SetSysClock>:
void SetSysClock(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000e42:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <SetSysClock+0x100>)
 8000e44:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <SetSysClock+0x100>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000e4e:	bf00      	nop
 8000e50:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <SetSysClock+0x100>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f9      	beq.n	8000e50 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <SetSysClock+0x100>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <SetSysClock+0x36>
  {
    status = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	e001      	b.n	8000e72 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10b      	bne.n	8000e90 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000e78:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <SetSysClock+0x100>)
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <SetSysClock+0x100>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000e82:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000e84:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <SetSysClock+0x100>)
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <SetSysClock+0x100>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000e8e:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000e90:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <SetSysClock+0x104>)
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <SetSysClock+0x104>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000e9c:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <SetSysClock+0x104>)
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <SetSysClock+0x104>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000ea8:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <SetSysClock+0x104>)
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <SetSysClock+0x104>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000eb4:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <SetSysClock+0x100>)
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <SetSysClock+0x100>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <SetSysClock+0x108>)
 8000ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec6:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000ec8:	bf00      	nop
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <SetSysClock+0x108>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0310 	and.w	r3, r3, #16
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f9      	bne.n	8000eca <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <SetSysClock+0x100>)
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SetSysClock+0x100>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ee0:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <SetSysClock+0x100>)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SetSysClock+0x100>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000eec:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <SetSysClock+0x100>)
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <SetSysClock+0x100>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ef8:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <SetSysClock+0x100>)
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <SetSysClock+0x100>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f04:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000f06:	bf00      	nop
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <SetSysClock+0x100>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f9      	beq.n	8000f08 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <SetSysClock+0x100>)
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <SetSysClock+0x100>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f043 0303 	orr.w	r3, r3, #3
 8000f1e:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000f20:	bf00      	nop
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SetSysClock+0x100>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f9      	beq.n	8000f22 <SetSysClock+0xea>
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40023c00 	.word	0x40023c00
 8000f40:	40007000 	.word	0x40007000

08000f44 <main>:

#include <stdio.h>

#define BUFFER_SIZE 50

int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0aa      	sub	sp, #168	; 0xa8
 8000f48:	af00      	add	r7, sp, #0
		SetSysClock();
 8000f4a:	f7ff ff75 	bl	8000e38 <SetSysClock>
	SystemCoreClockUpdate();
 8000f4e:	f000 f99d 	bl	800128c <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8000f52:	f7ff f921 	bl	8000198 <GPIO_init>
	USART2_init();
 8000f56:	f7ff fae3 	bl	8000520 <USART2_init>
	TIM2_Init();
 8000f5a:	f7ff faa9 	bl	80004b0 <TIM2_Init>
	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	//DHT22_init();

    uint16_t i = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    uint16_t tvoc_ppb, co2_eq_ppm;
    uint32_t iaq_baseline;
    uint16_t ethanol_raw_signal, h2_raw_signal;
    char buffer[128];

    USART2_write_buffer("Starting SGP30");
 8000f64:	4888      	ldr	r0, [pc, #544]	; (8001188 <main+0x244>)
 8000f66:	f7ff fb3d 	bl	80005e4 <USART2_write_buffer>

    const char* driver_version = sgp30_get_driver_version();
 8000f6a:	f7ff fe7d 	bl	8000c68 <sgp30_get_driver_version>
 8000f6e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (driver_version) {
 8000f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <main+0x56>
        sprintf(buffer, "SGP30 driver version %s\r\n", driver_version);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000f82:	4982      	ldr	r1, [pc, #520]	; (800118c <main+0x248>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fb08 	bl	800159a <siprintf>
        USART2_write_buffer(buffer);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb28 	bl	80005e4 <USART2_write_buffer>
        USART2_write_buffer("fatal: Getting driver version failed\r\n");
        return -1;
    }

    /* Initialize I2C bus */
    sensirion_i2c_init();
 8000f94:	f7ff fd4b 	bl	8000a2e <sensirion_i2c_init>
 8000f98:	e005      	b.n	8000fa6 <main+0x62>
        USART2_write_buffer("fatal: Getting driver version failed\r\n");
 8000f9a:	487d      	ldr	r0, [pc, #500]	; (8001190 <main+0x24c>)
 8000f9c:	f7ff fb22 	bl	80005e4 <USART2_write_buffer>
        return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	e0ec      	b.n	8001180 <main+0x23c>

    /* Busy loop for initialization. The main loop does not work without a sensor. */
    int16_t probe;
    while (1) {
        probe = sgp30_probe();
 8000fa6:	f7ff fee4 	bl	8000d72 <sgp30_probe>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        if (probe == STATUS_OK)
 8000fb0:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00e      	beq.n	8000fd6 <main+0x92>
            break;

        if (probe == SGP30_ERR_UNSUPPORTED_FEATURE_SET)
 8000fb8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8000fbc:	f113 0f0a 	cmn.w	r3, #10
 8000fc0:	d102      	bne.n	8000fc8 <main+0x84>
            USART2_write_buffer("Your sensor needs at least feature set version 1.0 (0x20)\r\n");
 8000fc2:	4874      	ldr	r0, [pc, #464]	; (8001194 <main+0x250>)
 8000fc4:	f7ff fb0e 	bl	80005e4 <USART2_write_buffer>

        USART2_write_buffer("SGP sensor probing failed\r\n");
 8000fc8:	4873      	ldr	r0, [pc, #460]	; (8001198 <main+0x254>)
 8000fca:	f7ff fb0b 	bl	80005e4 <USART2_write_buffer>
        sensirion_sleep_usec(1000000);
 8000fce:	4873      	ldr	r0, [pc, #460]	; (800119c <main+0x258>)
 8000fd0:	f7ff fd59 	bl	8000a86 <sensirion_sleep_usec>
        probe = sgp30_probe();
 8000fd4:	e7e7      	b.n	8000fa6 <main+0x62>
            break;
 8000fd6:	bf00      	nop
    }

    USART2_write_buffer("SGP sensor probing successful\r\n");
 8000fd8:	4871      	ldr	r0, [pc, #452]	; (80011a0 <main+0x25c>)
 8000fda:	f7ff fb03 	bl	80005e4 <USART2_write_buffer>

    uint16_t feature_set_version;
    uint8_t product_type;
    err = sgp30_get_feature_set_version(&feature_set_version, &product_type);
 8000fde:	f107 020d 	add.w	r2, r7, #13
 8000fe2:	f107 030e 	add.w	r3, r7, #14
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe47 	bl	8000c7c <sgp30_get_feature_set_version>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    if (err == STATUS_OK) {
 8000ff4:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11a      	bne.n	8001032 <main+0xee>
        sprintf(buffer, "Feature set version: %u\r\n", feature_set_version);
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	4967      	ldr	r1, [pc, #412]	; (80011a4 <main+0x260>)
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fac7 	bl	800159a <siprintf>
        USART2_write_buffer(buffer);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fae7 	bl	80005e4 <USART2_write_buffer>
        sprintf(buffer, "Product type: %u\r\n", product_type);
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	461a      	mov	r2, r3
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4962      	ldr	r1, [pc, #392]	; (80011a8 <main+0x264>)
 8001020:	4618      	mov	r0, r3
 8001022:	f000 faba 	bl	800159a <siprintf>
        USART2_write_buffer(buffer);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fada 	bl	80005e4 <USART2_write_buffer>
 8001030:	e002      	b.n	8001038 <main+0xf4>
    } else {
        USART2_write_buffer("sgp30_get_feature_set_version failed!\r\n");
 8001032:	485e      	ldr	r0, [pc, #376]	; (80011ac <main+0x268>)
 8001034:	f7ff fad6 	bl	80005e4 <USART2_write_buffer>
    }

    uint64_t serial_id;
    err = sgp30_get_serial_id(&serial_id);
 8001038:	463b      	mov	r3, r7
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe48 	bl	8000cd0 <sgp30_get_serial_id>
 8001040:	4603      	mov	r3, r0
 8001042:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    if (err == STATUS_OK) {
 8001046:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <main+0x116>
        USART2_write_buffer(buffer);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fac6 	bl	80005e4 <USART2_write_buffer>
 8001058:	e002      	b.n	8001060 <main+0x11c>
    } else {
        USART2_write_buffer("sgp30_get_serial_id failed!\r\n");
 800105a:	4855      	ldr	r0, [pc, #340]	; (80011b0 <main+0x26c>)
 800105c:	f7ff fac2 	bl	80005e4 <USART2_write_buffer>
    }

    /* Read gas raw signals */
    err = sgp30_measure_raw_blocking_read(&ethanol_raw_signal, &h2_raw_signal);
 8001060:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001064:	f107 0392 	add.w	r3, r7, #146	; 0x92
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd80 	bl	8000b70 <sgp30_measure_raw_blocking_read>
 8001070:	4603      	mov	r3, r0
 8001072:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    if (err == STATUS_OK) {
 8001076:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d11c      	bne.n	80010b8 <main+0x174>
        sprintf(buffer, "Ethanol raw signal: %u\r\n", ethanol_raw_signal);
 800107e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001082:	461a      	mov	r2, r3
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	494a      	ldr	r1, [pc, #296]	; (80011b4 <main+0x270>)
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa85 	bl	800159a <siprintf>
        USART2_write_buffer(buffer);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff faa5 	bl	80005e4 <USART2_write_buffer>
        sprintf(buffer, "H2 raw signal: %u\r\n", h2_raw_signal);
 800109a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800109e:	461a      	mov	r2, r3
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4944      	ldr	r1, [pc, #272]	; (80011b8 <main+0x274>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa77 	bl	800159a <siprintf>
        USART2_write_buffer(buffer);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa97 	bl	80005e4 <USART2_write_buffer>
 80010b6:	e002      	b.n	80010be <main+0x17a>
    } else {
        USART2_write_buffer("error reading raw signals\r\n");
 80010b8:	4840      	ldr	r0, [pc, #256]	; (80011bc <main+0x278>)
 80010ba:	f7ff fa93 	bl	80005e4 <USART2_write_buffer>
    }

    /* Initialize IAQ */
    err = sgp30_iaq_init();
 80010be:	f7ff fe43 	bl	8000d48 <sgp30_iaq_init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    if (err == STATUS_OK) {
 80010c8:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d103      	bne.n	80010d8 <main+0x194>
        USART2_write_buffer("sgp30_iaq_init done\r\n");
 80010d0:	483b      	ldr	r0, [pc, #236]	; (80011c0 <main+0x27c>)
 80010d2:	f7ff fa87 	bl	80005e4 <USART2_write_buffer>
 80010d6:	e002      	b.n	80010de <main+0x19a>
    } else {
        USART2_write_buffer("sgp30_iaq_init failed!\r\n");
 80010d8:	483a      	ldr	r0, [pc, #232]	; (80011c4 <main+0x280>)
 80010da:	f7ff fa83 	bl	80005e4 <USART2_write_buffer>
    while (1) {
        /*
         * IMPLEMENT: get absolute humidity if needed and call
         * sgp30_set_absolute_humidity()
         */
        err = sgp30_measure_iaq_blocking_read(&tvoc_ppb, &co2_eq_ppm);
 80010de:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80010e2:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fd24 	bl	8000b36 <sgp30_measure_iaq_blocking_read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        if (err == STATUS_OK) {
 80010f4:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11c      	bne.n	8001136 <main+0x1f2>
            sprintf(buffer, "tVOC  Concentration: %dppb\r\n", tvoc_ppb);
 80010fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001100:	461a      	mov	r2, r3
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4930      	ldr	r1, [pc, #192]	; (80011c8 <main+0x284>)
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa46 	bl	800159a <siprintf>
            USART2_write_buffer(buffer);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa66 	bl	80005e4 <USART2_write_buffer>
            sprintf(buffer, "CO2eq Concentration: %dppm\r\n", co2_eq_ppm);
 8001118:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800111c:	461a      	mov	r2, r3
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	492a      	ldr	r1, [pc, #168]	; (80011cc <main+0x288>)
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fa38 	bl	800159a <siprintf>
            USART2_write_buffer(buffer);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa58 	bl	80005e4 <USART2_write_buffer>
 8001134:	e002      	b.n	800113c <main+0x1f8>
        } else {
            USART2_write_buffer("error reading IAQ values\r\n");
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <main+0x28c>)
 8001138:	f7ff fa54 	bl	80005e4 <USART2_write_buffer>
        }

        /* Persist the current baseline every hour */
        if (++i % 3600 == 3599) {
 800113c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001140:	3301      	adds	r3, #1
 8001142:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001146:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <main+0x290>)
 800114c:	fba2 1203 	umull	r1, r2, r2, r3
 8001150:	0ad2      	lsrs	r2, r2, #11
 8001152:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	b29b      	uxth	r3, r3
 800115e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001162:	4293      	cmp	r3, r2
 8001164:	d107      	bne.n	8001176 <main+0x232>
            err = sgp30_get_iaq_baseline(&iaq_baseline);
 8001166:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd42 	bl	8000bf4 <sgp30_get_iaq_baseline>
 8001170:	4603      	mov	r3, r0
 8001172:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                /* IMPLEMENT: store baseline to persistent storage */
            }
        }

        /* The IAQ measurement must be triggered exactly once per second (SGP30) */
        delay_ms(1000);  // SGP30 measurement interval
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f7ff fe37 	bl	8000dec <delay_ms>
        err = sgp30_measure_iaq_blocking_read(&tvoc_ppb, &co2_eq_ppm);
 800117e:	e7ae      	b.n	80010de <main+0x19a>
    }
    return 0;
}
 8001180:	4618      	mov	r0, r3
 8001182:	37a8      	adds	r7, #168	; 0xa8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08001628 	.word	0x08001628
 800118c:	08001638 	.word	0x08001638
 8001190:	08001654 	.word	0x08001654
 8001194:	0800167c 	.word	0x0800167c
 8001198:	080016b8 	.word	0x080016b8
 800119c:	000f4240 	.word	0x000f4240
 80011a0:	080016d4 	.word	0x080016d4
 80011a4:	080016f4 	.word	0x080016f4
 80011a8:	08001710 	.word	0x08001710
 80011ac:	08001724 	.word	0x08001724
 80011b0:	0800174c 	.word	0x0800174c
 80011b4:	0800176c 	.word	0x0800176c
 80011b8:	08001788 	.word	0x08001788
 80011bc:	0800179c 	.word	0x0800179c
 80011c0:	080017b8 	.word	0x080017b8
 80011c4:	080017d0 	.word	0x080017d0
 80011c8:	080017ec 	.word	0x080017ec
 80011cc:	0800180c 	.word	0x0800180c
 80011d0:	0800182c 	.word	0x0800182c
 80011d4:	91a2b3c5 	.word	0x91a2b3c5

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011da:	e003      	b.n	80011e4 <LoopCopyDataInit>

080011dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011e2:	3104      	adds	r1, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011ec:	d3f6      	bcc.n	80011dc <CopyDataInit>
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011f0:	e002      	b.n	80011f8 <LoopFillZerobss>

080011f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011f4:	f842 3b04 	str.w	r3, [r2], #4

080011f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011fc:	d3f9      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fe:	f000 f811 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f000 f9e1 	bl	80015c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fe9d 	bl	8000f44 <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r3, =_sidata
 800120c:	0800186c 	.word	0x0800186c
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001214:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 8001218:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 800121c:	200000dc 	.word	0x200000dc

08001220 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_IRQHandler>
	...

08001224 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <SystemInit+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <SystemInit+0x5c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001232:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001234:	4912      	ldr	r1, [pc, #72]	; (8001280 <SystemInit+0x5c>)
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <SystemInit+0x5c>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <SystemInit+0x60>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <SystemInit+0x5c>)
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SystemInit+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800124a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800124e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0x5c>)
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <SystemInit+0x5c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <SystemInit+0x5c>)
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <SystemInit+0x5c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001266:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SystemInit+0x5c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x64>)
 8001270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001274:	609a      	str	r2, [r3, #8]
#endif
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	88ffc00c 	.word	0x88ffc00c
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012a6:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d863      	bhi.n	800137e <SystemCoreClockUpdate+0xf2>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <SystemCoreClockUpdate+0x30>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012f1 	.word	0x080012f1
 80012c0:	0800137f 	.word	0x0800137f
 80012c4:	0800137f 	.word	0x0800137f
 80012c8:	0800137f 	.word	0x0800137f
 80012cc:	08001311 	.word	0x08001311
 80012d0:	0800137f 	.word	0x0800137f
 80012d4:	0800137f 	.word	0x0800137f
 80012d8:	0800137f 	.word	0x0800137f
 80012dc:	08001319 	.word	0x08001319
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	08001321 	.word	0x08001321
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	0b5b      	lsrs	r3, r3, #13
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <SystemCoreClockUpdate+0x140>)
 800130c:	601a      	str	r2, [r3, #0]
      break;
 800130e:	e046      	b.n	800139e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <SystemCoreClockUpdate+0x140>)
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <SystemCoreClockUpdate+0x144>)
 8001314:	601a      	str	r2, [r3, #0]
      break;
 8001316:	e042      	b.n	800139e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <SystemCoreClockUpdate+0x140>)
 800131a:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <SystemCoreClockUpdate+0x144>)
 800131c:	601a      	str	r2, [r3, #0]
      break;
 800131e:	e03e      	b.n	800139e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001328:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001332:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <SystemCoreClockUpdate+0x148>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	0d9b      	lsrs	r3, r3, #22
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <SystemCoreClockUpdate+0x144>)
 800135a:	fb02 f203 	mul.w	r2, r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <SystemCoreClockUpdate+0x140>)
 8001366:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001368:	e019      	b.n	800139e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <SystemCoreClockUpdate+0x144>)
 800136e:	fb02 f203 	mul.w	r2, r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <SystemCoreClockUpdate+0x140>)
 800137a:	6013      	str	r3, [r2, #0]
      break;
 800137c:	e00f      	b.n	800139e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0b5b      	lsrs	r3, r3, #13
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3301      	adds	r3, #1
 800138e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemCoreClockUpdate+0x140>)
 800139a:	601a      	str	r2, [r3, #0]
      break;
 800139c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SystemCoreClockUpdate+0x13c>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <SystemCoreClockUpdate+0x14c>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <SystemCoreClockUpdate+0x140>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <SystemCoreClockUpdate+0x140>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	20000004 	.word	0x20000004
 80013d0:	007a1200 	.word	0x007a1200
 80013d4:	08001848 	.word	0x08001848
 80013d8:	08001854 	.word	0x08001854

080013dc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013ec:	e004      	b.n	80013f8 <ts_itoa+0x1c>
		div *= base;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d2f3      	bcs.n	80013ee <ts_itoa+0x12>

	while (div != 0)
 8001406:	e029      	b.n	800145c <ts_itoa+0x80>
	{
		int num = d/div;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001410:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	fbb3 f1f2 	udiv	r1, r3, r2
 800141a:	fb02 f201 	mul.w	r2, r2, r1
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	fb92 f3f3 	sdiv	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b09      	cmp	r3, #9
 8001430:	dd0a      	ble.n	8001448 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	6011      	str	r1, [r2, #0]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	3237      	adds	r2, #55	; 0x37
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e009      	b.n	800145c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1c59      	adds	r1, r3, #1
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	6011      	str	r1, [r2, #0]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	3230      	adds	r2, #48	; 0x30
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1d2      	bne.n	8001408 <ts_itoa+0x2c>
	}
}
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800147c:	e07d      	b.n	800157a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b25      	cmp	r3, #37	; 0x25
 8001484:	d171      	bne.n	800156a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3301      	adds	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d01e      	beq.n	80014d2 <ts_formatstring+0x66>
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	dc06      	bgt.n	80014a6 <ts_formatstring+0x3a>
 8001498:	2b58      	cmp	r3, #88	; 0x58
 800149a:	d050      	beq.n	800153e <ts_formatstring+0xd2>
 800149c:	2b63      	cmp	r3, #99	; 0x63
 800149e:	d00e      	beq.n	80014be <ts_formatstring+0x52>
 80014a0:	2b25      	cmp	r3, #37	; 0x25
 80014a2:	d058      	beq.n	8001556 <ts_formatstring+0xea>
 80014a4:	e05d      	b.n	8001562 <ts_formatstring+0xf6>
 80014a6:	2b73      	cmp	r3, #115	; 0x73
 80014a8:	d02b      	beq.n	8001502 <ts_formatstring+0x96>
 80014aa:	2b73      	cmp	r3, #115	; 0x73
 80014ac:	dc02      	bgt.n	80014b4 <ts_formatstring+0x48>
 80014ae:	2b69      	cmp	r3, #105	; 0x69
 80014b0:	d00f      	beq.n	80014d2 <ts_formatstring+0x66>
 80014b2:	e056      	b.n	8001562 <ts_formatstring+0xf6>
 80014b4:	2b75      	cmp	r3, #117	; 0x75
 80014b6:	d037      	beq.n	8001528 <ts_formatstring+0xbc>
 80014b8:	2b78      	cmp	r3, #120	; 0x78
 80014ba:	d040      	beq.n	800153e <ts_formatstring+0xd2>
 80014bc:	e051      	b.n	8001562 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60fa      	str	r2, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	1d11      	adds	r1, r2, #4
 80014c8:	6079      	str	r1, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
				break;
 80014d0:	e047      	b.n	8001562 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1d1a      	adds	r2, r3, #4
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da07      	bge.n	80014f2 <ts_formatstring+0x86>
					{
						val *= -1;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	425b      	negs	r3, r3
 80014e6:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60fa      	str	r2, [r7, #12]
 80014ee:	222d      	movs	r2, #45	; 0x2d
 80014f0:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80014f2:	69f9      	ldr	r1, [r7, #28]
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	220a      	movs	r2, #10
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff6e 	bl	80013dc <ts_itoa>
				}
				break;
 8001500:	e02f      	b.n	8001562 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1d1a      	adds	r2, r3, #4
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800150c:	e007      	b.n	800151e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	60fa      	str	r2, [r7, #12]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	1c51      	adds	r1, r2, #1
 8001518:	61b9      	str	r1, [r7, #24]
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f3      	bne.n	800150e <ts_formatstring+0xa2>
					}
				}
				break;
 8001526:	e01c      	b.n	8001562 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	220a      	movs	r2, #10
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff50 	bl	80013dc <ts_itoa>
				break;
 800153c:	e011      	b.n	8001562 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	1d1a      	adds	r2, r3, #4
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2210      	movs	r2, #16
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff44 	bl	80013dc <ts_itoa>
				break;
 8001554:	e005      	b.n	8001562 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60fa      	str	r2, [r7, #12]
 800155c:	2225      	movs	r2, #37	; 0x25
 800155e:	701a      	strb	r2, [r3, #0]
				  break;
 8001560:	bf00      	nop
			}
			fmt++;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	e007      	b.n	800157a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60fa      	str	r2, [r7, #12]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	1c51      	adds	r1, r2, #1
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f af7d 	bne.w	800147e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	461a      	mov	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	1ad3      	subs	r3, r2, r3
}
 8001592:	4618      	mov	r0, r3
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800159a:	b40e      	push	{r1, r2, r3}
 800159c:	b580      	push	{r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	69f9      	ldr	r1, [r7, #28]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff5c 	bl	800146c <ts_formatstring>
 80015b4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015c2:	b003      	add	sp, #12
 80015c4:	4770      	bx	lr
	...

080015c8 <__libc_init_array>:
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	2500      	movs	r5, #0
 80015cc:	4e0c      	ldr	r6, [pc, #48]	; (8001600 <__libc_init_array+0x38>)
 80015ce:	4c0d      	ldr	r4, [pc, #52]	; (8001604 <__libc_init_array+0x3c>)
 80015d0:	1ba4      	subs	r4, r4, r6
 80015d2:	10a4      	asrs	r4, r4, #2
 80015d4:	42a5      	cmp	r5, r4
 80015d6:	d109      	bne.n	80015ec <__libc_init_array+0x24>
 80015d8:	f000 f81a 	bl	8001610 <_init>
 80015dc:	2500      	movs	r5, #0
 80015de:	4e0a      	ldr	r6, [pc, #40]	; (8001608 <__libc_init_array+0x40>)
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <__libc_init_array+0x44>)
 80015e2:	1ba4      	subs	r4, r4, r6
 80015e4:	10a4      	asrs	r4, r4, #2
 80015e6:	42a5      	cmp	r5, r4
 80015e8:	d105      	bne.n	80015f6 <__libc_init_array+0x2e>
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
 80015ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015f0:	4798      	blx	r3
 80015f2:	3501      	adds	r5, #1
 80015f4:	e7ee      	b.n	80015d4 <__libc_init_array+0xc>
 80015f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015fa:	4798      	blx	r3
 80015fc:	3501      	adds	r5, #1
 80015fe:	e7f2      	b.n	80015e6 <__libc_init_array+0x1e>
 8001600:	08001864 	.word	0x08001864
 8001604:	08001864 	.word	0x08001864
 8001608:	08001864 	.word	0x08001864
 800160c:	08001868 	.word	0x08001868

08001610 <_init>:
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001612:	bf00      	nop
 8001614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001616:	bc08      	pop	{r3}
 8001618:	469e      	mov	lr, r3
 800161a:	4770      	bx	lr

0800161c <_fini>:
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161e:	bf00      	nop
 8001620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001622:	bc08      	pop	{r3}
 8001624:	469e      	mov	lr, r3
 8001626:	4770      	bx	lr


template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080009e0  080009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080009fc  080009fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a00  08000a00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  20000004  08000a08  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000d8  08000a08  000200d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000056df  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000fab  00000000  00000000  0002570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000260  00000000  00000000  000266b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00026918  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000192e  00000000  00000000  00026ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001193  00000000  00000000  00028416  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000295a9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000688  00000000  00000000  00029628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080009c8 	.word	0x080009c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080009c8 	.word	0x080009c8

0800017c <EXTI9_5_IRQHandler>:
 */

#include "exti_handlers.h"

void EXTI9_5_IRQHandler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR7)
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <EXTI9_5_IRQHandler+0x18>)
 8000182:	695b      	ldr	r3, [r3, #20]
 8000184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <EXTI9_5_IRQHandler+0x14>
	{
        DHT22_IRQHandler();
 800018c:	f000 f9ca 	bl	8000524 <DHT22_IRQHandler>
	}
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010400 	.word	0x40010400

08000198 <GPIO_init>:

#include "gpio.h"
#include "stm32l1xx.h"

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	  RCC->AHBENR|=1;
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <GPIO_init+0x24>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	61d3      	str	r3, [r2, #28]
	  GPIOA->MODER|=0x400;
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_init+0x28>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40023800 	.word	0x40023800
 80001c0:	40020000 	.word	0x40020000

080001c4 <I2C1_Init>:
 */

#include "i2c.h"

void I2C1_Init(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= 2;			//Enable GPIOB clock PB8(D15)=SCL,PB9(D14)=SDA.
 80001c8:	4a26      	ldr	r2, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001ca:	4b26      	ldr	r3, [pc, #152]	; (8000264 <I2C1_Init+0xa0>)
 80001cc:	69db      	ldr	r3, [r3, #28]
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= (1<<21);	//Enable I2C1_EN clock
 80001d4:	4a23      	ldr	r2, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d6:	4b23      	ldr	r3, [pc, #140]	; (8000264 <I2C1_Init+0xa0>)
 80001d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001de:	6253      	str	r3, [r2, #36]	; 0x24

	//configures PB8,PB9 to I2C1_EN
	GPIOB->AFR[1] &= ~0x000000FF;	//PB8,PB9 I2C1 SCL, SDA. AFRH8 and AFRH9. clear
 80001e0:	4a21      	ldr	r2, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e2:	4b21      	ldr	r3, [pc, #132]	; (8000268 <I2C1_Init+0xa4>)
 80001e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;	//GPIOx_AFRL p.189,AF4=I2C1(0100 BIN) p.177
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001ee:	4b1e      	ldr	r3, [pc, #120]	; (8000268 <I2C1_Init+0xa4>)
 80001f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80001f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~0x000F0000;	//PB8 and PB9 clear
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <I2C1_Init+0xa4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;		//Alternate function mode PB8,PB9
 8000204:	4a18      	ldr	r2, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <I2C1_Init+0xa4>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 0x00000300;	//output open-drain. p.184
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <I2C1_Init+0xa4>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800021a:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~0x000F0000;	//no pull-up resistors for PB8 and PB9 p.185
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <I2C1_Init+0xa4>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000226:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000;				//software reset I2C1 SWRST p.682
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <I2C1_Init+0xa8>)
 800022a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800022e:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;			//stop reset
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <I2C1_Init+0xa8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800023a:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0020;				//peripheral clock 32 MHz
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <I2C1_Init+0xa8>)
 800023e:	2220      	movs	r2, #32
 8000240:	605a      	str	r2, [r3, #4]
	TPCLK1=1/32MHz=31,25ns
	tI2C_bus=1/100kHz=10us=10000ns
	tI2C_bus_div2=10000ns/2=5000ns
	CCR value=tI2C_bus_div2/TPCLK1=5000ns/31,25ns=160
	p. 692*/
	I2C1->CCR = 160;
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <I2C1_Init+0xa8>)
 8000244:	22a0      	movs	r2, #160	; 0xa0
 8000246:	61da      	str	r2, [r3, #28]

	//maximum rise time in sm mode = 1000ns. Equation 1000 ns/TPCK1
	I2C1->TRISE = 33;				//1000ns/31,25ns=32+1=33, p.693
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <I2C1_Init+0xa8>)
 800024a:	2221      	movs	r2, #33	; 0x21
 800024c:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001;			//peripheral enable (I2C1)
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <I2C1_Init+0xa8>)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <I2C1_Init+0xa8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f043 0301 	orr.w	r3, r3, #1
 8000258:	6013      	str	r3, [r2, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020400 	.word	0x40020400
 800026c:	40005400 	.word	0x40005400

08000270 <I2C1_ByteWrite>:
	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
	I2C1->CR1 |= (1<<9);			//generate stop
}

void I2C1_ByteWrite(uint8_t address, uint8_t command)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	71bb      	strb	r3, [r7, #6]
	volatile int tmp;

	while(I2C1->SR2 & 2){}			//wait until bus not busy
 8000280:	bf00      	nop
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <I2C1_ByteWrite+0x98>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f9      	bne.n	8000282 <I2C1_ByteWrite+0x12>

	I2C1->CR1 &= ~0x800;			//Acknowledge clear p.682
 800028e:	4a1e      	ldr	r2, [pc, #120]	; (8000308 <I2C1_ByteWrite+0x98>)
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <I2C1_ByteWrite+0x98>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000298:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= 0x100;				//generate start p.694
 800029a:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <I2C1_ByteWrite+0x98>)
 800029c:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <I2C1_ByteWrite+0x98>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a4:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1&1)){}			//wait until start condition generated
 80002a6:	bf00      	nop
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0f9      	beq.n	80002a8 <I2C1_ByteWrite+0x38>

	I2C1->DR=address << 1;			//transmit slave address
 80002b4:	4a14      	ldr	r2, [pc, #80]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & 2)){}		//wait until end of address transmission p.690
 80002bc:	bf00      	nop
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <I2C1_ByteWrite+0x4e>

	tmp=I2C1->SR2;					//Reading I2C_SR2 after reading I2C_SR1 clears the ADDR flag p691
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	60fb      	str	r3, [r7, #12]
	while(!(I2C1->SR1 & 0x80)){}	//wait until data register empty p.689
 80002d0:	bf00      	nop
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <I2C1_ByteWrite+0x62>

	I2C1->DR = command;				//send command
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & 4)){}		//wait until byte transfer finished p.690
 80002e4:	bf00      	nop
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <I2C1_ByteWrite+0x76>
	I2C1->CR1 |= (1<<9);			//generate stop
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <I2C1_ByteWrite+0x98>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fc:	6013      	str	r3, [r2, #0]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40005400 	.word	0x40005400

0800030c <MODBUS_IRQHandler>:

	return MODBUS_FRAME_OK;
}

void MODBUS_IRQHandler()
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE)
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MODBUS_IRQHandler+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0320 	and.w	r3, r3, #32
 800031a:	2b00      	cmp	r3, #0
 800031c:	d022      	beq.n	8000364 <MODBUS_IRQHandler+0x58>
    {
        uint8_t data = USART2->DR;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MODBUS_IRQHandler+0x64>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	71fb      	strb	r3, [r7, #7]
        uint16_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MODBUS_IRQHandler+0x68>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	b29b      	uxth	r3, r3
 800032a:	3301      	adds	r3, #1
 800032c:	425a      	negs	r2, r3
 800032e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000332:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000336:	bf58      	it	pl
 8000338:	4253      	negpl	r3, r2
 800033a:	80bb      	strh	r3, [r7, #4]

        if (next_head != rx_tail)
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MODBUS_IRQHandler+0x6c>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	88ba      	ldrh	r2, [r7, #4]
 8000344:	429a      	cmp	r2, r3
 8000346:	d00a      	beq.n	800035e <MODBUS_IRQHandler+0x52>
        {
            rx_buffer[rx_head] = data;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MODBUS_IRQHandler+0x68>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	4619      	mov	r1, r3
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <MODBUS_IRQHandler+0x70>)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 8000356:	4a07      	ldr	r2, [pc, #28]	; (8000374 <MODBUS_IRQHandler+0x68>)
 8000358:	88bb      	ldrh	r3, [r7, #4]
 800035a:	8013      	strh	r3, [r2, #0]
        else
        {
        	buffer_OVF = 1;
        }
    }
}
 800035c:	e002      	b.n	8000364 <MODBUS_IRQHandler+0x58>
        	buffer_OVF = 1;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MODBUS_IRQHandler+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	701a      	strb	r2, [r3, #0]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40004400 	.word	0x40004400
 8000374:	20000022 	.word	0x20000022
 8000378:	20000024 	.word	0x20000024
 800037c:	20000058 	.word	0x20000058
 8000380:	20000020 	.word	0x20000020

08000384 <TIM2_Init>:
 */

#include "timers.h"

void TIM2_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <TIM2_Init+0x3c>)
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <TIM2_Init+0x3c>)
 800038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6253      	str	r3, [r2, #36]	; 0x24
    TIM2->PSC = 32 - 1;
 8000394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000398:	221f      	movs	r2, #31
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF;
 800039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003a4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 80003a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023800 	.word	0x40023800

080003c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <NVIC_EnableIRQ+0x2c>)
 80003d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d4:	095b      	lsrs	r3, r3, #5
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	f002 021f 	and.w	r2, r2, #31
 80003dc:	2001      	movs	r0, #1
 80003de:	fa00 f202 	lsl.w	r2, r0, r2
 80003e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <USART2_init>:
 */

#include "usart.h"

void USART2_init()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	//set bit 17 (USART2 EN)
 80003f8:	4a21      	ldr	r2, [pc, #132]	; (8000480 <USART2_init+0x8c>)
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <USART2_init+0x8c>)
 80003fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000402:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 8000404:	4a1e      	ldr	r2, [pc, #120]	; (8000480 <USART2_init+0x8c>)
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <USART2_init+0x8c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <USART2_init+0x90>)
 8000412:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000416:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 8000418:	4a1a      	ldr	r2, [pc, #104]	; (8000484 <USART2_init+0x90>)
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <USART2_init+0x90>)
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000422:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <USART2_init+0x90>)
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <USART2_init+0x90>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000430:	4a14      	ldr	r2, [pc, #80]	; (8000484 <USART2_init+0x90>)
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <USART2_init+0x90>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043a:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, 116
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <USART2_init+0x94>)
 800043e:	f640 5205 	movw	r2, #3333	; 0xd05
 8000442:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE;	//TE bit. p739-740. Enable transmit
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <USART2_init+0x94>)
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <USART2_init+0x94>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;	//RE bit. p739-740. Enable receiver
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <USART2_init+0x94>)
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <USART2_init+0x94>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;	//UE bit. p739-740. Uart enable
 800045c:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <USART2_init+0x94>)
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <USART2_init+0x94>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000466:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;			//enable RX interrupt
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <USART2_init+0x94>)
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <USART2_init+0x94>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); 	//enable interrupt in NVIC
 8000474:	2026      	movs	r0, #38	; 0x26
 8000476:	f7ff ffa5 	bl	80003c4 <NVIC_EnableIRQ>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	40020000 	.word	0x40020000
 8000488:	40004400 	.word	0x40004400

0800048c <USART2_IRQHandler>:
	USART2_write('\r');
	USART2_write('\n');
}

void USART2_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	MODBUS_IRQHandler();
 8000490:	f7ff ff3c 	bl	800030c <MODBUS_IRQHandler>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <NVIC_EnableIRQ>:
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004a2:	4908      	ldr	r1, [pc, #32]	; (80004c4 <NVIC_EnableIRQ+0x2c>)
 80004a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a8:	095b      	lsrs	r3, r3, #5
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	f002 021f 	and.w	r2, r2, #31
 80004b0:	2001      	movs	r0, #1
 80004b2:	fa00 f202 	lsl.w	r2, r0, r2
 80004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	e000e100 	.word	0xe000e100

080004c8 <DHT22_init>:
{
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
}

void DHT22_init()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004cc:	4a12      	ldr	r2, [pc, #72]	; (8000518 <DHT22_init+0x50>)
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <DHT22_init+0x50>)
 80004d0:	6a1b      	ldr	r3, [r3, #32]
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6213      	str	r3, [r2, #32]
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI7_PA;
 80004d8:	4a10      	ldr	r2, [pc, #64]	; (800051c <DHT22_init+0x54>)
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <DHT22_init+0x54>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PA;
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <DHT22_init+0x54>)
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <DHT22_init+0x54>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	60d3      	str	r3, [r2, #12]

    EXTI->IMR |= EXTI_IMR_MR7;
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <DHT22_init+0x58>)
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <DHT22_init+0x58>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_FT7;
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <DHT22_init+0x58>)
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <DHT22_init+0x58>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fe:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR |= EXTI_RTSR_RT7;
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <DHT22_init+0x58>)
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <DHT22_init+0x58>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050a:	6093      	str	r3, [r2, #8]

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 800050c:	2017      	movs	r0, #23
 800050e:	f7ff ffc3 	bl	8000498 <NVIC_EnableIRQ>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800
 800051c:	40010000 	.word	0x40010000
 8000520:	40010400 	.word	0x40010400

08000524 <DHT22_IRQHandler>:

	return;
}

void DHT22_IRQHandler()
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	static uint8_t index = 0;
	static uint16_t last_time = 0;
	uint16_t now = TIM2->CNT;
 800052a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	80fb      	strh	r3, [r7, #6]
	uint16_t pulse_width;

	dht_status = DHT_MEASURING;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <DHT22_IRQHandler+0xa4>)
 8000534:	2203      	movs	r2, #3
 8000536:	701a      	strb	r2, [r3, #0]

	if (GPIOA->IDR & GPIO_IDR_IDR_7) // Rising edge
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <DHT22_IRQHandler+0xa8>)
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000540:	2b00      	cmp	r3, #0
 8000542:	d009      	beq.n	8000558 <DHT22_IRQHandler+0x34>
	{
		last_time = now;
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <DHT22_IRQHandler+0xac>)
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	8013      	strh	r3, [r2, #0]
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <DHT22_IRQHandler+0xa8>)
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <DHT22_IRQHandler+0xa8>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	e025      	b.n	80005a4 <DHT22_IRQHandler+0x80>
	}

	else // Falling edge
	{
		pulse_width = (now >= last_time) ? (now - last_time) : (0xFFFF - last_time + now);
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <DHT22_IRQHandler+0xac>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	88fa      	ldrh	r2, [r7, #6]
 800055e:	429a      	cmp	r2, r3
 8000560:	d305      	bcc.n	800056e <DHT22_IRQHandler+0x4a>
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <DHT22_IRQHandler+0xac>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	88fa      	ldrh	r2, [r7, #6]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	b29b      	uxth	r3, r3
 800056c:	e006      	b.n	800057c <DHT22_IRQHandler+0x58>
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <DHT22_IRQHandler+0xac>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	88fa      	ldrh	r2, [r7, #6]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	3b01      	subs	r3, #1
 800057a:	b29b      	uxth	r3, r3
 800057c:	80bb      	strh	r3, [r7, #4]
		pulses[index] = pulse_width;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <DHT22_IRQHandler+0xb0>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	88bb      	ldrh	r3, [r7, #4]
 8000586:	b2d9      	uxtb	r1, r3
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <DHT22_IRQHandler+0xb4>)
 800058a:	5499      	strb	r1, [r3, r2]
		index++;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <DHT22_IRQHandler+0xb0>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <DHT22_IRQHandler+0xb0>)
 8000596:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <DHT22_IRQHandler+0xa8>)
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <DHT22_IRQHandler+0xa8>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f023 0320 	bic.w	r3, r3, #32
 80005a2:	6153      	str	r3, [r2, #20]
	}

	if (index >= BIT_COUNT)
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <DHT22_IRQHandler+0xb0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b28      	cmp	r3, #40	; 0x28
 80005aa:	d905      	bls.n	80005b8 <DHT22_IRQHandler+0x94>
	{
		index = 0;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <DHT22_IRQHandler+0xb0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
		dht_status = DHT_READY;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <DHT22_IRQHandler+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	EXTI->PR = EXTI_PR_PR7;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <DHT22_IRQHandler+0xb8>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000051 	.word	0x20000051
 80005cc:	40020000 	.word	0x40020000
 80005d0:	20000052 	.word	0x20000052
 80005d4:	20000054 	.word	0x20000054
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40010400 	.word	0x40010400

080005e0 <delay_ms>:
		  i++;
	  }
}

void delay_ms(unsigned long delay)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	unsigned long i = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = 32000 - 1; //32 000 000 = 1s so 32 000 = 1 ms
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <delay_ms+0x48>)
 80005ee:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80005f2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <delay_ms+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <delay_ms+0x48>)
 80005fc:	2205      	movs	r2, #5
 80005fe:	601a      	str	r2, [r3, #0]
		  
	while(i < delay)
 8000600:	e009      	b.n	8000616 <delay_ms+0x36>
	{	
		while(!((SysTick->CTRL) & 0x10000)){} //M3 Generic User Guide p. 159
 8000602:	bf00      	nop
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <delay_ms+0x48>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <delay_ms+0x24>
		i++;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
	while(i < delay)
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	d3f1      	bcc.n	8000602 <delay_ms+0x22>
	}
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e010 	.word	0xe000e010

0800062c <SetSysClock>:
void SetSysClock(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000636:	4a3d      	ldr	r2, [pc, #244]	; (800072c <SetSysClock+0x100>)
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <SetSysClock+0x100>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000642:	bf00      	nop
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <SetSysClock+0x100>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000650:	4b36      	ldr	r3, [pc, #216]	; (800072c <SetSysClock+0x100>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <SetSysClock+0x36>
  {
    status = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	e001      	b.n	8000666 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10b      	bne.n	8000684 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 800066c:	4a2f      	ldr	r2, [pc, #188]	; (800072c <SetSysClock+0x100>)
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <SetSysClock+0x100>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000676:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000678:	4a2c      	ldr	r2, [pc, #176]	; (800072c <SetSysClock+0x100>)
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <SetSysClock+0x100>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000682:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SetSysClock+0x104>)
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <SetSysClock+0x104>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SetSysClock+0x104>)
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SetSysClock+0x104>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 800069c:	4a24      	ldr	r2, [pc, #144]	; (8000730 <SetSysClock+0x104>)
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <SetSysClock+0x104>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <SetSysClock+0x100>)
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <SetSysClock+0x100>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SetSysClock+0x108>)
 80006b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ba:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 80006bc:	bf00      	nop
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <SetSysClock+0x108>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f9      	bne.n	80006be <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <SetSysClock+0x100>)
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <SetSysClock+0x100>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006d4:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <SetSysClock+0x100>)
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <SetSysClock+0x100>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006e0:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <SetSysClock+0x100>)
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <SetSysClock+0x100>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006ec:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <SetSysClock+0x100>)
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <SetSysClock+0x100>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f8:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 80006fa:	bf00      	nop
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <SetSysClock+0x100>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f9      	beq.n	80006fc <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <SetSysClock+0x100>)
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <SetSysClock+0x100>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f043 0303 	orr.w	r3, r3, #3
 8000712:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000714:	bf00      	nop
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <SetSysClock+0x100>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f003 030c 	and.w	r3, r3, #12
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f9      	beq.n	8000716 <SetSysClock+0xea>
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800
 8000730:	40023c00 	.word	0x40023c00
 8000734:	40007000 	.word	0x40007000

08000738 <main>:
#include <stdio.h>

#define BUFFER_SIZE 50

int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// CMSIS Initializations

	SetSysClock();
 800073c:	f7ff ff76 	bl	800062c <SetSysClock>
	SystemCoreClockUpdate();
 8000740:	f000 f876 	bl	8000830 <SystemCoreClockUpdate>

	// Utils Initializations

	// Peripheral Initializations
	GPIO_init();
 8000744:	f7ff fd28 	bl	8000198 <GPIO_init>
	USART2_init();
 8000748:	f7ff fe54 	bl	80003f4 <USART2_init>
	TIM2_Init();
 800074c:	f7ff fe1a 	bl	8000384 <TIM2_Init>
	I2C1_Init();
 8000750:	f7ff fd38 	bl	80001c4 <I2C1_Init>

	// Sensor Initializations
	//LMT84LP_init();
	//NSL19M51_init();
	DHT22_init();
 8000754:	f7ff feb8 	bl	80004c8 <DHT22_init>
	//ADC_init();

	while (1)
	{
	    GPIOA->ODR ^= GPIO_ODR_ODR_5;
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <main+0x40>)
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <main+0x40>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f083 0320 	eor.w	r3, r3, #32
 8000762:	6153      	str	r3, [r2, #20]
	    I2C1_ByteWrite(GROVE_VOC_I2C_ADDR, 0x5);
 8000764:	2105      	movs	r1, #5
 8000766:	2058      	movs	r0, #88	; 0x58
 8000768:	f7ff fd82 	bl	8000270 <I2C1_ByteWrite>
		delay_ms(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f7ff ff36 	bl	80005e0 <delay_ms>
	    GPIOA->ODR ^= GPIO_ODR_ODR_5;
 8000774:	e7f0      	b.n	8000758 <main+0x20>
 8000776:	bf00      	nop
 8000778:	40020000 	.word	0x40020000

0800077c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800077c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800077e:	e003      	b.n	8000788 <LoopCopyDataInit>

08000780 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000782:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000784:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000786:	3104      	adds	r1, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800078c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800078e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000790:	d3f6      	bcc.n	8000780 <CopyDataInit>
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000794:	e002      	b.n	800079c <LoopFillZerobss>

08000796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000798:	f842 3b04 	str.w	r3, [r2], #4

0800079c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007a0:	d3f9      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a2:	f000 f811 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f000 f8eb 	bl	8000980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff ffc5 	bl	8000738 <main>
  bx lr
 80007ae:	4770      	bx	lr
  ldr r3, =_sidata
 80007b0:	08000a04 	.word	0x08000a04
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007b8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80007bc:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80007c0:	200000d8 	.word	0x200000d8

080007c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_IRQHandler>
	...

080007c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80007cc:	4a15      	ldr	r2, [pc, #84]	; (8000824 <SystemInit+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <SystemInit+0x5c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80007d8:	4912      	ldr	r1, [pc, #72]	; (8000824 <SystemInit+0x5c>)
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <SystemInit+0x5c>)
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <SystemInit+0x60>)
 80007e0:	4013      	ands	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80007e4:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <SystemInit+0x5c>)
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <SystemInit+0x5c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80007ee:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80007f2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <SystemInit+0x5c>)
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <SystemInit+0x5c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fe:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000800:	4a08      	ldr	r2, [pc, #32]	; (8000824 <SystemInit+0x5c>)
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <SystemInit+0x5c>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800080a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SystemInit+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemInit+0x64>)
 8000814:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000818:	609a      	str	r2, [r3, #8]
#endif
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	88ffc00c 	.word	0x88ffc00c
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000830:	b480      	push	{r7}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <SystemCoreClockUpdate+0x13c>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b0c      	cmp	r3, #12
 8000858:	d863      	bhi.n	8000922 <SystemCoreClockUpdate+0xf2>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <SystemCoreClockUpdate+0x30>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	08000895 	.word	0x08000895
 8000864:	08000923 	.word	0x08000923
 8000868:	08000923 	.word	0x08000923
 800086c:	08000923 	.word	0x08000923
 8000870:	080008b5 	.word	0x080008b5
 8000874:	08000923 	.word	0x08000923
 8000878:	08000923 	.word	0x08000923
 800087c:	08000923 	.word	0x08000923
 8000880:	080008bd 	.word	0x080008bd
 8000884:	08000923 	.word	0x08000923
 8000888:	08000923 	.word	0x08000923
 800088c:	08000923 	.word	0x08000923
 8000890:	080008c5 	.word	0x080008c5
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <SystemCoreClockUpdate+0x13c>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	0b5b      	lsrs	r3, r3, #13
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <SystemCoreClockUpdate+0x140>)
 80008b0:	601a      	str	r2, [r3, #0]
      break;
 80008b2:	e046      	b.n	8000942 <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <SystemCoreClockUpdate+0x140>)
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <SystemCoreClockUpdate+0x144>)
 80008b8:	601a      	str	r2, [r3, #0]
      break;
 80008ba:	e042      	b.n	8000942 <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <SystemCoreClockUpdate+0x140>)
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <SystemCoreClockUpdate+0x144>)
 80008c0:	601a      	str	r2, [r3, #0]
      break;
 80008c2:	e03e      	b.n	8000942 <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <SystemCoreClockUpdate+0x13c>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008cc:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <SystemCoreClockUpdate+0x13c>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80008d6:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	4a26      	ldr	r2, [pc, #152]	; (8000978 <SystemCoreClockUpdate+0x148>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	0d9b      	lsrs	r3, r3, #22
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <SystemCoreClockUpdate+0x13c>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f2:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d109      	bne.n	800090e <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <SystemCoreClockUpdate+0x144>)
 80008fe:	fb02 f203 	mul.w	r2, r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <SystemCoreClockUpdate+0x140>)
 800090a:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800090c:	e019      	b.n	8000942 <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <SystemCoreClockUpdate+0x144>)
 8000912:	fb02 f203 	mul.w	r2, r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <SystemCoreClockUpdate+0x140>)
 800091e:	6013      	str	r3, [r2, #0]
      break;
 8000920:	e00f      	b.n	8000942 <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <SystemCoreClockUpdate+0x13c>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	0b5b      	lsrs	r3, r3, #13
 8000928:	f003 0307 	and.w	r3, r3, #7
 800092c:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3301      	adds	r3, #1
 8000932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <SystemCoreClockUpdate+0x140>)
 800093e:	601a      	str	r2, [r3, #0]
      break;
 8000940:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <SystemCoreClockUpdate+0x13c>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SystemCoreClockUpdate+0x14c>)
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <SystemCoreClockUpdate+0x140>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	fa22 f303 	lsr.w	r3, r2, r3
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <SystemCoreClockUpdate+0x140>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	371c      	adds	r7, #28
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	20000000 	.word	0x20000000
 8000974:	007a1200 	.word	0x007a1200
 8000978:	080009e0 	.word	0x080009e0
 800097c:	080009ec 	.word	0x080009ec

08000980 <__libc_init_array>:
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	2500      	movs	r5, #0
 8000984:	4e0c      	ldr	r6, [pc, #48]	; (80009b8 <__libc_init_array+0x38>)
 8000986:	4c0d      	ldr	r4, [pc, #52]	; (80009bc <__libc_init_array+0x3c>)
 8000988:	1ba4      	subs	r4, r4, r6
 800098a:	10a4      	asrs	r4, r4, #2
 800098c:	42a5      	cmp	r5, r4
 800098e:	d109      	bne.n	80009a4 <__libc_init_array+0x24>
 8000990:	f000 f81a 	bl	80009c8 <_init>
 8000994:	2500      	movs	r5, #0
 8000996:	4e0a      	ldr	r6, [pc, #40]	; (80009c0 <__libc_init_array+0x40>)
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <__libc_init_array+0x44>)
 800099a:	1ba4      	subs	r4, r4, r6
 800099c:	10a4      	asrs	r4, r4, #2
 800099e:	42a5      	cmp	r5, r4
 80009a0:	d105      	bne.n	80009ae <__libc_init_array+0x2e>
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a8:	4798      	blx	r3
 80009aa:	3501      	adds	r5, #1
 80009ac:	e7ee      	b.n	800098c <__libc_init_array+0xc>
 80009ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009b2:	4798      	blx	r3
 80009b4:	3501      	adds	r5, #1
 80009b6:	e7f2      	b.n	800099e <__libc_init_array+0x1e>
 80009b8:	080009fc 	.word	0x080009fc
 80009bc:	080009fc 	.word	0x080009fc
 80009c0:	080009fc 	.word	0x080009fc
 80009c4:	08000a00 	.word	0x08000a00

080009c8 <_init>:
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	bf00      	nop
 80009cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ce:	bc08      	pop	{r3}
 80009d0:	469e      	mov	lr, r3
 80009d2:	4770      	bx	lr

080009d4 <_fini>:
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	bf00      	nop
 80009d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009da:	bc08      	pop	{r3}
 80009dc:	469e      	mov	lr, r3
 80009de:	4770      	bx	lr
